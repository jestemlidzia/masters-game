
cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a674  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  0800a848  0800a848  0001a848  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ade0  0800ade0  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800ade0  0800ade0  0001ade0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ade8  0800ade8  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ade8  0800ade8  0001ade8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800adec  0800adec  0001adec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800adf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e00  20000200  0800aff0  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001000  0800aff0  00021000  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b73  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003409  00000000  00000000  00036da3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001380  00000000  00000000  0003a1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001260  00000000  00000000  0003b530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d5d  00000000  00000000  0003c790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019988  00000000  00000000  000624ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1f43  00000000  00000000  0007be75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015ddb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006290  00000000  00000000  0015de08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a82c 	.word	0x0800a82c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	0800a82c 	.word	0x0800a82c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b974 	b.w	8000f08 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468e      	mov	lr, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d14d      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c46:	428a      	cmp	r2, r1
 8000c48:	4694      	mov	ip, r2
 8000c4a:	d969      	bls.n	8000d20 <__udivmoddi4+0xe8>
 8000c4c:	fab2 f282 	clz	r2, r2
 8000c50:	b152      	cbz	r2, 8000c68 <__udivmoddi4+0x30>
 8000c52:	fa01 f302 	lsl.w	r3, r1, r2
 8000c56:	f1c2 0120 	rsb	r1, r2, #32
 8000c5a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c5e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c62:	ea41 0e03 	orr.w	lr, r1, r3
 8000c66:	4094      	lsls	r4, r2
 8000c68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c6c:	0c21      	lsrs	r1, r4, #16
 8000c6e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c72:	fa1f f78c 	uxth.w	r7, ip
 8000c76:	fb08 e316 	mls	r3, r8, r6, lr
 8000c7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c7e:	fb06 f107 	mul.w	r1, r6, r7
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8e:	f080 811f 	bcs.w	8000ed0 <__udivmoddi4+0x298>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 811c 	bls.w	8000ed0 <__udivmoddi4+0x298>
 8000c98:	3e02      	subs	r6, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a5b      	subs	r3, r3, r1
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cac:	fb00 f707 	mul.w	r7, r0, r7
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	d90a      	bls.n	8000cca <__udivmoddi4+0x92>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cbc:	f080 810a 	bcs.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	f240 8107 	bls.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc6:	4464      	add	r4, ip
 8000cc8:	3802      	subs	r0, #2
 8000cca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cce:	1be4      	subs	r4, r4, r7
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	b11d      	cbz	r5, 8000cdc <__udivmoddi4+0xa4>
 8000cd4:	40d4      	lsrs	r4, r2
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cdc:	4631      	mov	r1, r6
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0xc2>
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	f000 80ef 	beq.w	8000eca <__udivmoddi4+0x292>
 8000cec:	2600      	movs	r6, #0
 8000cee:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf2:	4630      	mov	r0, r6
 8000cf4:	4631      	mov	r1, r6
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	fab3 f683 	clz	r6, r3
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	d14a      	bne.n	8000d98 <__udivmoddi4+0x160>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0xd4>
 8000d06:	4282      	cmp	r2, r0
 8000d08:	f200 80f9 	bhi.w	8000efe <__udivmoddi4+0x2c6>
 8000d0c:	1a84      	subs	r4, r0, r2
 8000d0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	469e      	mov	lr, r3
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	d0e0      	beq.n	8000cdc <__udivmoddi4+0xa4>
 8000d1a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d1e:	e7dd      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000d20:	b902      	cbnz	r2, 8000d24 <__udivmoddi4+0xec>
 8000d22:	deff      	udf	#255	; 0xff
 8000d24:	fab2 f282 	clz	r2, r2
 8000d28:	2a00      	cmp	r2, #0
 8000d2a:	f040 8092 	bne.w	8000e52 <__udivmoddi4+0x21a>
 8000d2e:	eba1 010c 	sub.w	r1, r1, ip
 8000d32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d36:	fa1f fe8c 	uxth.w	lr, ip
 8000d3a:	2601      	movs	r6, #1
 8000d3c:	0c20      	lsrs	r0, r4, #16
 8000d3e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d42:	fb07 1113 	mls	r1, r7, r3, r1
 8000d46:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d4a:	fb0e f003 	mul.w	r0, lr, r3
 8000d4e:	4288      	cmp	r0, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x12c>
 8000d52:	eb1c 0101 	adds.w	r1, ip, r1
 8000d56:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x12a>
 8000d5c:	4288      	cmp	r0, r1
 8000d5e:	f200 80cb 	bhi.w	8000ef8 <__udivmoddi4+0x2c0>
 8000d62:	4643      	mov	r3, r8
 8000d64:	1a09      	subs	r1, r1, r0
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d6c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d70:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d74:	fb0e fe00 	mul.w	lr, lr, r0
 8000d78:	45a6      	cmp	lr, r4
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x156>
 8000d7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d84:	d202      	bcs.n	8000d8c <__udivmoddi4+0x154>
 8000d86:	45a6      	cmp	lr, r4
 8000d88:	f200 80bb 	bhi.w	8000f02 <__udivmoddi4+0x2ca>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	eba4 040e 	sub.w	r4, r4, lr
 8000d92:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d96:	e79c      	b.n	8000cd2 <__udivmoddi4+0x9a>
 8000d98:	f1c6 0720 	rsb	r7, r6, #32
 8000d9c:	40b3      	lsls	r3, r6
 8000d9e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000da2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000da6:	fa20 f407 	lsr.w	r4, r0, r7
 8000daa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dae:	431c      	orrs	r4, r3
 8000db0:	40f9      	lsrs	r1, r7
 8000db2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000db6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dba:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dbe:	0c20      	lsrs	r0, r4, #16
 8000dc0:	fa1f fe8c 	uxth.w	lr, ip
 8000dc4:	fb09 1118 	mls	r1, r9, r8, r1
 8000dc8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dcc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dd0:	4288      	cmp	r0, r1
 8000dd2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd6:	d90b      	bls.n	8000df0 <__udivmoddi4+0x1b8>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de0:	f080 8088 	bcs.w	8000ef4 <__udivmoddi4+0x2bc>
 8000de4:	4288      	cmp	r0, r1
 8000de6:	f240 8085 	bls.w	8000ef4 <__udivmoddi4+0x2bc>
 8000dea:	f1a8 0802 	sub.w	r8, r8, #2
 8000dee:	4461      	add	r1, ip
 8000df0:	1a09      	subs	r1, r1, r0
 8000df2:	b2a4      	uxth	r4, r4
 8000df4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000df8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dfc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e00:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e04:	458e      	cmp	lr, r1
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x1e2>
 8000e08:	eb1c 0101 	adds.w	r1, ip, r1
 8000e0c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e10:	d26c      	bcs.n	8000eec <__udivmoddi4+0x2b4>
 8000e12:	458e      	cmp	lr, r1
 8000e14:	d96a      	bls.n	8000eec <__udivmoddi4+0x2b4>
 8000e16:	3802      	subs	r0, #2
 8000e18:	4461      	add	r1, ip
 8000e1a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e1e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e22:	eba1 010e 	sub.w	r1, r1, lr
 8000e26:	42a1      	cmp	r1, r4
 8000e28:	46c8      	mov	r8, r9
 8000e2a:	46a6      	mov	lr, r4
 8000e2c:	d356      	bcc.n	8000edc <__udivmoddi4+0x2a4>
 8000e2e:	d053      	beq.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e30:	b15d      	cbz	r5, 8000e4a <__udivmoddi4+0x212>
 8000e32:	ebb3 0208 	subs.w	r2, r3, r8
 8000e36:	eb61 010e 	sbc.w	r1, r1, lr
 8000e3a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e3e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e42:	40f1      	lsrs	r1, r6
 8000e44:	431f      	orrs	r7, r3
 8000e46:	e9c5 7100 	strd	r7, r1, [r5]
 8000e4a:	2600      	movs	r6, #0
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	f1c2 0320 	rsb	r3, r2, #32
 8000e56:	40d8      	lsrs	r0, r3
 8000e58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e5c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e60:	4091      	lsls	r1, r2
 8000e62:	4301      	orrs	r1, r0
 8000e64:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e68:	fa1f fe8c 	uxth.w	lr, ip
 8000e6c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e70:	fb07 3610 	mls	r6, r7, r0, r3
 8000e74:	0c0b      	lsrs	r3, r1, #16
 8000e76:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e7a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	fa04 f402 	lsl.w	r4, r4, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x260>
 8000e86:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e8e:	d22f      	bcs.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e90:	429e      	cmp	r6, r3
 8000e92:	d92d      	bls.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e94:	3802      	subs	r0, #2
 8000e96:	4463      	add	r3, ip
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	b289      	uxth	r1, r1
 8000e9c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ea0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ea4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x28a>
 8000eb0:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000eb8:	d216      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d914      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000ebe:	3e02      	subs	r6, #2
 8000ec0:	4461      	add	r1, ip
 8000ec2:	1ac9      	subs	r1, r1, r3
 8000ec4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ec8:	e738      	b.n	8000d3c <__udivmoddi4+0x104>
 8000eca:	462e      	mov	r6, r5
 8000ecc:	4628      	mov	r0, r5
 8000ece:	e705      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000ed0:	4606      	mov	r6, r0
 8000ed2:	e6e3      	b.n	8000c9c <__udivmoddi4+0x64>
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	e6f8      	b.n	8000cca <__udivmoddi4+0x92>
 8000ed8:	454b      	cmp	r3, r9
 8000eda:	d2a9      	bcs.n	8000e30 <__udivmoddi4+0x1f8>
 8000edc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ee4:	3801      	subs	r0, #1
 8000ee6:	e7a3      	b.n	8000e30 <__udivmoddi4+0x1f8>
 8000ee8:	4646      	mov	r6, r8
 8000eea:	e7ea      	b.n	8000ec2 <__udivmoddi4+0x28a>
 8000eec:	4620      	mov	r0, r4
 8000eee:	e794      	b.n	8000e1a <__udivmoddi4+0x1e2>
 8000ef0:	4640      	mov	r0, r8
 8000ef2:	e7d1      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ef4:	46d0      	mov	r8, sl
 8000ef6:	e77b      	b.n	8000df0 <__udivmoddi4+0x1b8>
 8000ef8:	3b02      	subs	r3, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	e732      	b.n	8000d64 <__udivmoddi4+0x12c>
 8000efe:	4630      	mov	r0, r6
 8000f00:	e709      	b.n	8000d16 <__udivmoddi4+0xde>
 8000f02:	4464      	add	r4, ip
 8000f04:	3802      	subs	r0, #2
 8000f06:	e742      	b.n	8000d8e <__udivmoddi4+0x156>

08000f08 <__aeabi_idiv0>:
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop

08000f0c <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f12:	463b      	mov	r3, r7
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000f1e:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <MX_ADC2_Init+0x98>)
 8000f20:	4a21      	ldr	r2, [pc, #132]	; (8000fa8 <MX_ADC2_Init+0x9c>)
 8000f22:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f24:	4b1f      	ldr	r3, [pc, #124]	; (8000fa4 <MX_ADC2_Init+0x98>)
 8000f26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f2a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f2c:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <MX_ADC2_Init+0x98>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000f32:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <MX_ADC2_Init+0x98>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000f38:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <MX_ADC2_Init+0x98>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f3e:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <MX_ADC2_Init+0x98>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f46:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <MX_ADC2_Init+0x98>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f4c:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <MX_ADC2_Init+0x98>)
 8000f4e:	4a17      	ldr	r2, [pc, #92]	; (8000fac <MX_ADC2_Init+0xa0>)
 8000f50:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f52:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <MX_ADC2_Init+0x98>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <MX_ADC2_Init+0x98>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <MX_ADC2_Init+0x98>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f66:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <MX_ADC2_Init+0x98>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f6c:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <MX_ADC2_Init+0x98>)
 8000f6e:	f001 ff81 	bl	8002e74 <HAL_ADC_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000f78:	f001 f980 	bl	800227c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f7c:	2306      	movs	r3, #6
 8000f7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f80:	2301      	movs	r3, #1
 8000f82:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f88:	463b      	mov	r3, r7
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <MX_ADC2_Init+0x98>)
 8000f8e:	f002 f953 	bl	8003238 <HAL_ADC_ConfigChannel>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000f98:	f001 f970 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	2000021c 	.word	0x2000021c
 8000fa8:	40012100 	.word	0x40012100
 8000fac:	0f000001 	.word	0x0f000001

08000fb0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a17      	ldr	r2, [pc, #92]	; (800102c <HAL_ADC_MspInit+0x7c>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d127      	bne.n	8001022 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	4b16      	ldr	r3, [pc, #88]	; (8001030 <HAL_ADC_MspInit+0x80>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	4a15      	ldr	r2, [pc, #84]	; (8001030 <HAL_ADC_MspInit+0x80>)
 8000fdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe2:	4b13      	ldr	r3, [pc, #76]	; (8001030 <HAL_ADC_MspInit+0x80>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <HAL_ADC_MspInit+0x80>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <HAL_ADC_MspInit+0x80>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <HAL_ADC_MspInit+0x80>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA6     ------> ADC2_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800100a:	2340      	movs	r3, #64	; 0x40
 800100c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800100e:	2303      	movs	r3, #3
 8001010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	4805      	ldr	r0, [pc, #20]	; (8001034 <HAL_ADC_MspInit+0x84>)
 800101e:	f002 fcdd 	bl	80039dc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001022:	bf00      	nop
 8001024:	3728      	adds	r7, #40	; 0x28
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40012100 	.word	0x40012100
 8001030:	40023800 	.word	0x40023800
 8001034:	40020000 	.word	0x40020000

08001038 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	; 0x28
 800103c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
 800104c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	4b52      	ldr	r3, [pc, #328]	; (800119c <MX_GPIO_Init+0x164>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a51      	ldr	r2, [pc, #324]	; (800119c <MX_GPIO_Init+0x164>)
 8001058:	f043 0304 	orr.w	r3, r3, #4
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b4f      	ldr	r3, [pc, #316]	; (800119c <MX_GPIO_Init+0x164>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f003 0304 	and.w	r3, r3, #4
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b4b      	ldr	r3, [pc, #300]	; (800119c <MX_GPIO_Init+0x164>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a4a      	ldr	r2, [pc, #296]	; (800119c <MX_GPIO_Init+0x164>)
 8001074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b48      	ldr	r3, [pc, #288]	; (800119c <MX_GPIO_Init+0x164>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	4b44      	ldr	r3, [pc, #272]	; (800119c <MX_GPIO_Init+0x164>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a43      	ldr	r2, [pc, #268]	; (800119c <MX_GPIO_Init+0x164>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b41      	ldr	r3, [pc, #260]	; (800119c <MX_GPIO_Init+0x164>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	4b3d      	ldr	r3, [pc, #244]	; (800119c <MX_GPIO_Init+0x164>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a3c      	ldr	r2, [pc, #240]	; (800119c <MX_GPIO_Init+0x164>)
 80010ac:	f043 0302 	orr.w	r3, r3, #2
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b3a      	ldr	r3, [pc, #232]	; (800119c <MX_GPIO_Init+0x164>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	210c      	movs	r1, #12
 80010c2:	4837      	ldr	r0, [pc, #220]	; (80011a0 <MX_GPIO_Init+0x168>)
 80010c4:	f002 fe36 	bl	8003d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2120      	movs	r1, #32
 80010cc:	4835      	ldr	r0, [pc, #212]	; (80011a4 <MX_GPIO_Init+0x16c>)
 80010ce:	f002 fe31 	bl	8003d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R4_Pin|R3_Pin|R2_Pin|R1_Pin, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80010d8:	4833      	ldr	r0, [pc, #204]	; (80011a8 <MX_GPIO_Init+0x170>)
 80010da:	f002 fe2b 	bl	8003d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010e4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80010e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ea:	2301      	movs	r3, #1
 80010ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4619      	mov	r1, r3
 80010f4:	482a      	ldr	r0, [pc, #168]	; (80011a0 <MX_GPIO_Init+0x168>)
 80010f6:	f002 fc71 	bl	80039dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = CIRC_Pin|C4_Pin|C3_Pin|C2_Pin
 80010fa:	f240 33c2 	movw	r3, #962	; 0x3c2
 80010fe:	617b      	str	r3, [r7, #20]
                          |C1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001100:	2300      	movs	r3, #0
 8001102:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001104:	2301      	movs	r3, #1
 8001106:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4619      	mov	r1, r3
 800110e:	4824      	ldr	r0, [pc, #144]	; (80011a0 <MX_GPIO_Init+0x168>)
 8001110:	f002 fc64 	bl	80039dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8001114:	230c      	movs	r3, #12
 8001116:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001118:	2301      	movs	r3, #1
 800111a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800111c:	2301      	movs	r3, #1
 800111e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2300      	movs	r3, #0
 8001122:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	4619      	mov	r1, r3
 800112a:	481d      	ldr	r0, [pc, #116]	; (80011a0 <MX_GPIO_Init+0x168>)
 800112c:	f002 fc56 	bl	80039dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001130:	2320      	movs	r3, #32
 8001132:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001134:	2301      	movs	r3, #1
 8001136:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	4619      	mov	r1, r3
 8001146:	4817      	ldr	r0, [pc, #92]	; (80011a4 <MX_GPIO_Init+0x16c>)
 8001148:	f002 fc48 	bl	80039dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SET_Pin|RESET_Pin;
 800114c:	2306      	movs	r3, #6
 800114e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001150:	2300      	movs	r3, #0
 8001152:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001154:	2301      	movs	r3, #1
 8001156:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	4619      	mov	r1, r3
 800115e:	4812      	ldr	r0, [pc, #72]	; (80011a8 <MX_GPIO_Init+0x170>)
 8001160:	f002 fc3c 	bl	80039dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = R4_Pin|R3_Pin|R2_Pin|R1_Pin;
 8001164:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001168:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116a:	2301      	movs	r3, #1
 800116c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4619      	mov	r1, r3
 800117c:	480a      	ldr	r0, [pc, #40]	; (80011a8 <MX_GPIO_Init+0x170>)
 800117e:	f002 fc2d 	bl	80039dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	2028      	movs	r0, #40	; 0x28
 8001188:	f002 fb5f 	bl	800384a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800118c:	2028      	movs	r0, #40	; 0x28
 800118e:	f002 fb78 	bl	8003882 <HAL_NVIC_EnableIRQ>

}
 8001192:	bf00      	nop
 8001194:	3728      	adds	r7, #40	; 0x28
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800
 80011a0:	40020800 	.word	0x40020800
 80011a4:	40020000 	.word	0x40020000
 80011a8:	40020400 	.word	0x40020400

080011ac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <MX_I2C1_Init+0x50>)
 80011b2:	4a13      	ldr	r2, [pc, #76]	; (8001200 <MX_I2C1_Init+0x54>)
 80011b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <MX_I2C1_Init+0x50>)
 80011b8:	4a12      	ldr	r2, [pc, #72]	; (8001204 <MX_I2C1_Init+0x58>)
 80011ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <MX_I2C1_Init+0x50>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <MX_I2C1_Init+0x50>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <MX_I2C1_Init+0x50>)
 80011ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d0:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <MX_I2C1_Init+0x50>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <MX_I2C1_Init+0x50>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011dc:	4b07      	ldr	r3, [pc, #28]	; (80011fc <MX_I2C1_Init+0x50>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <MX_I2C1_Init+0x50>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011e8:	4804      	ldr	r0, [pc, #16]	; (80011fc <MX_I2C1_Init+0x50>)
 80011ea:	f002 fde1 	bl	8003db0 <HAL_I2C_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011f4:	f001 f842 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000264 	.word	0x20000264
 8001200:	40005400 	.word	0x40005400
 8001204:	000186a0 	.word	0x000186a0

08001208 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a19      	ldr	r2, [pc, #100]	; (800128c <HAL_I2C_MspInit+0x84>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d12c      	bne.n	8001284 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
 800122e:	4b18      	ldr	r3, [pc, #96]	; (8001290 <HAL_I2C_MspInit+0x88>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a17      	ldr	r2, [pc, #92]	; (8001290 <HAL_I2C_MspInit+0x88>)
 8001234:	f043 0302 	orr.w	r3, r3, #2
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b15      	ldr	r3, [pc, #84]	; (8001290 <HAL_I2C_MspInit+0x88>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001246:	f44f 7340 	mov.w	r3, #768	; 0x300
 800124a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800124c:	2312      	movs	r3, #18
 800124e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001254:	2303      	movs	r3, #3
 8001256:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001258:	2304      	movs	r3, #4
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	4619      	mov	r1, r3
 8001262:	480c      	ldr	r0, [pc, #48]	; (8001294 <HAL_I2C_MspInit+0x8c>)
 8001264:	f002 fbba 	bl	80039dc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <HAL_I2C_MspInit+0x88>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	4a07      	ldr	r2, [pc, #28]	; (8001290 <HAL_I2C_MspInit+0x88>)
 8001272:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001276:	6413      	str	r3, [r2, #64]	; 0x40
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <HAL_I2C_MspInit+0x88>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001284:	bf00      	nop
 8001286:	3728      	adds	r7, #40	; 0x28
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40005400 	.word	0x40005400
 8001290:	40023800 	.word	0x40023800
 8001294:	40020400 	.word	0x40020400

08001298 <read_keyboard>:
#include "main.h"
#include "usart.h"
#include "gpio.h"

char *read_keyboard(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012a2:	48bd      	ldr	r0, [pc, #756]	; (8001598 <read_keyboard+0x300>)
 80012a4:	f002 fd46 	bl	8003d34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 80012a8:	2201      	movs	r2, #1
 80012aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012ae:	48ba      	ldr	r0, [pc, #744]	; (8001598 <read_keyboard+0x300>)
 80012b0:	f002 fd40 	bl	8003d34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 80012b4:	2201      	movs	r2, #1
 80012b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ba:	48b7      	ldr	r0, [pc, #732]	; (8001598 <read_keyboard+0x300>)
 80012bc:	f002 fd3a 	bl	8003d34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 80012c0:	2201      	movs	r2, #1
 80012c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012c6:	48b4      	ldr	r0, [pc, #720]	; (8001598 <read_keyboard+0x300>)
 80012c8:	f002 fd34 	bl	8003d34 <HAL_GPIO_WritePin>


	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)))
 80012cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d0:	48b2      	ldr	r0, [pc, #712]	; (800159c <read_keyboard+0x304>)
 80012d2:	f002 fd17 	bl	8003d04 <HAL_GPIO_ReadPin>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d114      	bne.n	8001306 <read_keyboard+0x6e>
	{
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80012dc:	2201      	movs	r2, #1
 80012de:	2120      	movs	r1, #32
 80012e0:	48af      	ldr	r0, [pc, #700]	; (80015a0 <read_keyboard+0x308>)
 80012e2:	f002 fd27 	bl	8003d34 <HAL_GPIO_WritePin>
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 80012e6:	bf00      	nop
 80012e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ec:	48ab      	ldr	r0, [pc, #684]	; (800159c <read_keyboard+0x304>)
 80012ee:	f002 fd09 	bl	8003d04 <HAL_GPIO_ReadPin>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d0f7      	beq.n	80012e8 <read_keyboard+0x50>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2120      	movs	r1, #32
 80012fc:	48a8      	ldr	r0, [pc, #672]	; (80015a0 <read_keyboard+0x308>)
 80012fe:	f002 fd19 	bl	8003d34 <HAL_GPIO_WritePin>
		return "1";
 8001302:	4ba8      	ldr	r3, [pc, #672]	; (80015a4 <read_keyboard+0x30c>)
 8001304:	e207      	b.n	8001716 <read_keyboard+0x47e>
	}

	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)))
 8001306:	f44f 7180 	mov.w	r1, #256	; 0x100
 800130a:	48a4      	ldr	r0, [pc, #656]	; (800159c <read_keyboard+0x304>)
 800130c:	f002 fcfa 	bl	8003d04 <HAL_GPIO_ReadPin>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d114      	bne.n	8001340 <read_keyboard+0xa8>
	{
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001316:	2201      	movs	r2, #1
 8001318:	2120      	movs	r1, #32
 800131a:	48a1      	ldr	r0, [pc, #644]	; (80015a0 <read_keyboard+0x308>)
 800131c:	f002 fd0a 	bl	8003d34 <HAL_GPIO_WritePin>
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 8001320:	bf00      	nop
 8001322:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001326:	489d      	ldr	r0, [pc, #628]	; (800159c <read_keyboard+0x304>)
 8001328:	f002 fcec 	bl	8003d04 <HAL_GPIO_ReadPin>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0f7      	beq.n	8001322 <read_keyboard+0x8a>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	2120      	movs	r1, #32
 8001336:	489a      	ldr	r0, [pc, #616]	; (80015a0 <read_keyboard+0x308>)
 8001338:	f002 fcfc 	bl	8003d34 <HAL_GPIO_WritePin>
		return "2";
 800133c:	4b9a      	ldr	r3, [pc, #616]	; (80015a8 <read_keyboard+0x310>)
 800133e:	e1ea      	b.n	8001716 <read_keyboard+0x47e>
	}

	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)))
 8001340:	2180      	movs	r1, #128	; 0x80
 8001342:	4896      	ldr	r0, [pc, #600]	; (800159c <read_keyboard+0x304>)
 8001344:	f002 fcde 	bl	8003d04 <HAL_GPIO_ReadPin>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d113      	bne.n	8001376 <read_keyboard+0xde>
	{
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800134e:	2201      	movs	r2, #1
 8001350:	2120      	movs	r1, #32
 8001352:	4893      	ldr	r0, [pc, #588]	; (80015a0 <read_keyboard+0x308>)
 8001354:	f002 fcee 	bl	8003d34 <HAL_GPIO_WritePin>
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 8001358:	bf00      	nop
 800135a:	2180      	movs	r1, #128	; 0x80
 800135c:	488f      	ldr	r0, [pc, #572]	; (800159c <read_keyboard+0x304>)
 800135e:	f002 fcd1 	bl	8003d04 <HAL_GPIO_ReadPin>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d0f8      	beq.n	800135a <read_keyboard+0xc2>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	2120      	movs	r1, #32
 800136c:	488c      	ldr	r0, [pc, #560]	; (80015a0 <read_keyboard+0x308>)
 800136e:	f002 fce1 	bl	8003d34 <HAL_GPIO_WritePin>
		return "3";
 8001372:	4b8e      	ldr	r3, [pc, #568]	; (80015ac <read_keyboard+0x314>)
 8001374:	e1cf      	b.n	8001716 <read_keyboard+0x47e>
	}

	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)))
 8001376:	2140      	movs	r1, #64	; 0x40
 8001378:	4888      	ldr	r0, [pc, #544]	; (800159c <read_keyboard+0x304>)
 800137a:	f002 fcc3 	bl	8003d04 <HAL_GPIO_ReadPin>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d113      	bne.n	80013ac <read_keyboard+0x114>
	{
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001384:	2201      	movs	r2, #1
 8001386:	2120      	movs	r1, #32
 8001388:	4885      	ldr	r0, [pc, #532]	; (80015a0 <read_keyboard+0x308>)
 800138a:	f002 fcd3 	bl	8003d34 <HAL_GPIO_WritePin>
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 800138e:	bf00      	nop
 8001390:	2140      	movs	r1, #64	; 0x40
 8001392:	4882      	ldr	r0, [pc, #520]	; (800159c <read_keyboard+0x304>)
 8001394:	f002 fcb6 	bl	8003d04 <HAL_GPIO_ReadPin>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0f8      	beq.n	8001390 <read_keyboard+0xf8>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800139e:	2200      	movs	r2, #0
 80013a0:	2120      	movs	r1, #32
 80013a2:	487f      	ldr	r0, [pc, #508]	; (80015a0 <read_keyboard+0x308>)
 80013a4:	f002 fcc6 	bl	8003d34 <HAL_GPIO_WritePin>
		return "A";
 80013a8:	4b81      	ldr	r3, [pc, #516]	; (80015b0 <read_keyboard+0x318>)
 80013aa:	e1b4      	b.n	8001716 <read_keyboard+0x47e>
	}

	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 80013ac:	2201      	movs	r2, #1
 80013ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013b2:	4879      	ldr	r0, [pc, #484]	; (8001598 <read_keyboard+0x300>)
 80013b4:	f002 fcbe 	bl	8003d34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 80013b8:	2200      	movs	r2, #0
 80013ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013be:	4876      	ldr	r0, [pc, #472]	; (8001598 <read_keyboard+0x300>)
 80013c0:	f002 fcb8 	bl	8003d34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 80013c4:	2201      	movs	r2, #1
 80013c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ca:	4873      	ldr	r0, [pc, #460]	; (8001598 <read_keyboard+0x300>)
 80013cc:	f002 fcb2 	bl	8003d34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 80013d0:	2201      	movs	r2, #1
 80013d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013d6:	4870      	ldr	r0, [pc, #448]	; (8001598 <read_keyboard+0x300>)
 80013d8:	f002 fcac 	bl	8003d34 <HAL_GPIO_WritePin>


	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)))
 80013dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013e0:	486e      	ldr	r0, [pc, #440]	; (800159c <read_keyboard+0x304>)
 80013e2:	f002 fc8f 	bl	8003d04 <HAL_GPIO_ReadPin>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d114      	bne.n	8001416 <read_keyboard+0x17e>
	{
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80013ec:	2201      	movs	r2, #1
 80013ee:	2120      	movs	r1, #32
 80013f0:	486b      	ldr	r0, [pc, #428]	; (80015a0 <read_keyboard+0x308>)
 80013f2:	f002 fc9f 	bl	8003d34 <HAL_GPIO_WritePin>
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 80013f6:	bf00      	nop
 80013f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013fc:	4867      	ldr	r0, [pc, #412]	; (800159c <read_keyboard+0x304>)
 80013fe:	f002 fc81 	bl	8003d04 <HAL_GPIO_ReadPin>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d0f7      	beq.n	80013f8 <read_keyboard+0x160>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001408:	2200      	movs	r2, #0
 800140a:	2120      	movs	r1, #32
 800140c:	4864      	ldr	r0, [pc, #400]	; (80015a0 <read_keyboard+0x308>)
 800140e:	f002 fc91 	bl	8003d34 <HAL_GPIO_WritePin>
		return "4";
 8001412:	4b68      	ldr	r3, [pc, #416]	; (80015b4 <read_keyboard+0x31c>)
 8001414:	e17f      	b.n	8001716 <read_keyboard+0x47e>
	}

	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)))
 8001416:	f44f 7180 	mov.w	r1, #256	; 0x100
 800141a:	4860      	ldr	r0, [pc, #384]	; (800159c <read_keyboard+0x304>)
 800141c:	f002 fc72 	bl	8003d04 <HAL_GPIO_ReadPin>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d114      	bne.n	8001450 <read_keyboard+0x1b8>
	{
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001426:	2201      	movs	r2, #1
 8001428:	2120      	movs	r1, #32
 800142a:	485d      	ldr	r0, [pc, #372]	; (80015a0 <read_keyboard+0x308>)
 800142c:	f002 fc82 	bl	8003d34 <HAL_GPIO_WritePin>
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 8001430:	bf00      	nop
 8001432:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001436:	4859      	ldr	r0, [pc, #356]	; (800159c <read_keyboard+0x304>)
 8001438:	f002 fc64 	bl	8003d04 <HAL_GPIO_ReadPin>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0f7      	beq.n	8001432 <read_keyboard+0x19a>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001442:	2200      	movs	r2, #0
 8001444:	2120      	movs	r1, #32
 8001446:	4856      	ldr	r0, [pc, #344]	; (80015a0 <read_keyboard+0x308>)
 8001448:	f002 fc74 	bl	8003d34 <HAL_GPIO_WritePin>
		return "5";
 800144c:	4b5a      	ldr	r3, [pc, #360]	; (80015b8 <read_keyboard+0x320>)
 800144e:	e162      	b.n	8001716 <read_keyboard+0x47e>
	}

	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)))
 8001450:	2180      	movs	r1, #128	; 0x80
 8001452:	4852      	ldr	r0, [pc, #328]	; (800159c <read_keyboard+0x304>)
 8001454:	f002 fc56 	bl	8003d04 <HAL_GPIO_ReadPin>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d113      	bne.n	8001486 <read_keyboard+0x1ee>
	{
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800145e:	2201      	movs	r2, #1
 8001460:	2120      	movs	r1, #32
 8001462:	484f      	ldr	r0, [pc, #316]	; (80015a0 <read_keyboard+0x308>)
 8001464:	f002 fc66 	bl	8003d34 <HAL_GPIO_WritePin>
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 8001468:	bf00      	nop
 800146a:	2180      	movs	r1, #128	; 0x80
 800146c:	484b      	ldr	r0, [pc, #300]	; (800159c <read_keyboard+0x304>)
 800146e:	f002 fc49 	bl	8003d04 <HAL_GPIO_ReadPin>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0f8      	beq.n	800146a <read_keyboard+0x1d2>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001478:	2200      	movs	r2, #0
 800147a:	2120      	movs	r1, #32
 800147c:	4848      	ldr	r0, [pc, #288]	; (80015a0 <read_keyboard+0x308>)
 800147e:	f002 fc59 	bl	8003d34 <HAL_GPIO_WritePin>
		return "6";
 8001482:	4b4e      	ldr	r3, [pc, #312]	; (80015bc <read_keyboard+0x324>)
 8001484:	e147      	b.n	8001716 <read_keyboard+0x47e>
	}

	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)))
 8001486:	2140      	movs	r1, #64	; 0x40
 8001488:	4844      	ldr	r0, [pc, #272]	; (800159c <read_keyboard+0x304>)
 800148a:	f002 fc3b 	bl	8003d04 <HAL_GPIO_ReadPin>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d113      	bne.n	80014bc <read_keyboard+0x224>
	{
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001494:	2201      	movs	r2, #1
 8001496:	2120      	movs	r1, #32
 8001498:	4841      	ldr	r0, [pc, #260]	; (80015a0 <read_keyboard+0x308>)
 800149a:	f002 fc4b 	bl	8003d34 <HAL_GPIO_WritePin>
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 800149e:	bf00      	nop
 80014a0:	2140      	movs	r1, #64	; 0x40
 80014a2:	483e      	ldr	r0, [pc, #248]	; (800159c <read_keyboard+0x304>)
 80014a4:	f002 fc2e 	bl	8003d04 <HAL_GPIO_ReadPin>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f8      	beq.n	80014a0 <read_keyboard+0x208>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2120      	movs	r1, #32
 80014b2:	483b      	ldr	r0, [pc, #236]	; (80015a0 <read_keyboard+0x308>)
 80014b4:	f002 fc3e 	bl	8003d34 <HAL_GPIO_WritePin>
		return "B";
 80014b8:	4b41      	ldr	r3, [pc, #260]	; (80015c0 <read_keyboard+0x328>)
 80014ba:	e12c      	b.n	8001716 <read_keyboard+0x47e>
	}

	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 80014bc:	2201      	movs	r2, #1
 80014be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014c2:	4835      	ldr	r0, [pc, #212]	; (8001598 <read_keyboard+0x300>)
 80014c4:	f002 fc36 	bl	8003d34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 80014c8:	2201      	movs	r2, #1
 80014ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014ce:	4832      	ldr	r0, [pc, #200]	; (8001598 <read_keyboard+0x300>)
 80014d0:	f002 fc30 	bl	8003d34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_RESET);
 80014d4:	2200      	movs	r2, #0
 80014d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014da:	482f      	ldr	r0, [pc, #188]	; (8001598 <read_keyboard+0x300>)
 80014dc:	f002 fc2a 	bl	8003d34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 80014e0:	2201      	movs	r2, #1
 80014e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014e6:	482c      	ldr	r0, [pc, #176]	; (8001598 <read_keyboard+0x300>)
 80014e8:	f002 fc24 	bl	8003d34 <HAL_GPIO_WritePin>


	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)))
 80014ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014f0:	482a      	ldr	r0, [pc, #168]	; (800159c <read_keyboard+0x304>)
 80014f2:	f002 fc07 	bl	8003d04 <HAL_GPIO_ReadPin>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d114      	bne.n	8001526 <read_keyboard+0x28e>
	{
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80014fc:	2201      	movs	r2, #1
 80014fe:	2120      	movs	r1, #32
 8001500:	4827      	ldr	r0, [pc, #156]	; (80015a0 <read_keyboard+0x308>)
 8001502:	f002 fc17 	bl	8003d34 <HAL_GPIO_WritePin>
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 8001506:	bf00      	nop
 8001508:	f44f 7100 	mov.w	r1, #512	; 0x200
 800150c:	4823      	ldr	r0, [pc, #140]	; (800159c <read_keyboard+0x304>)
 800150e:	f002 fbf9 	bl	8003d04 <HAL_GPIO_ReadPin>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0f7      	beq.n	8001508 <read_keyboard+0x270>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001518:	2200      	movs	r2, #0
 800151a:	2120      	movs	r1, #32
 800151c:	4820      	ldr	r0, [pc, #128]	; (80015a0 <read_keyboard+0x308>)
 800151e:	f002 fc09 	bl	8003d34 <HAL_GPIO_WritePin>
		return "7";
 8001522:	4b28      	ldr	r3, [pc, #160]	; (80015c4 <read_keyboard+0x32c>)
 8001524:	e0f7      	b.n	8001716 <read_keyboard+0x47e>
	}

	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)))
 8001526:	f44f 7180 	mov.w	r1, #256	; 0x100
 800152a:	481c      	ldr	r0, [pc, #112]	; (800159c <read_keyboard+0x304>)
 800152c:	f002 fbea 	bl	8003d04 <HAL_GPIO_ReadPin>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d114      	bne.n	8001560 <read_keyboard+0x2c8>
	{
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001536:	2201      	movs	r2, #1
 8001538:	2120      	movs	r1, #32
 800153a:	4819      	ldr	r0, [pc, #100]	; (80015a0 <read_keyboard+0x308>)
 800153c:	f002 fbfa 	bl	8003d34 <HAL_GPIO_WritePin>
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 8001540:	bf00      	nop
 8001542:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001546:	4815      	ldr	r0, [pc, #84]	; (800159c <read_keyboard+0x304>)
 8001548:	f002 fbdc 	bl	8003d04 <HAL_GPIO_ReadPin>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f7      	beq.n	8001542 <read_keyboard+0x2aa>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001552:	2200      	movs	r2, #0
 8001554:	2120      	movs	r1, #32
 8001556:	4812      	ldr	r0, [pc, #72]	; (80015a0 <read_keyboard+0x308>)
 8001558:	f002 fbec 	bl	8003d34 <HAL_GPIO_WritePin>
		return "8";
 800155c:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <read_keyboard+0x330>)
 800155e:	e0da      	b.n	8001716 <read_keyboard+0x47e>
	}

	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)))
 8001560:	2180      	movs	r1, #128	; 0x80
 8001562:	480e      	ldr	r0, [pc, #56]	; (800159c <read_keyboard+0x304>)
 8001564:	f002 fbce 	bl	8003d04 <HAL_GPIO_ReadPin>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d130      	bne.n	80015d0 <read_keyboard+0x338>
	{
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800156e:	2201      	movs	r2, #1
 8001570:	2120      	movs	r1, #32
 8001572:	480b      	ldr	r0, [pc, #44]	; (80015a0 <read_keyboard+0x308>)
 8001574:	f002 fbde 	bl	8003d34 <HAL_GPIO_WritePin>
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 8001578:	bf00      	nop
 800157a:	2180      	movs	r1, #128	; 0x80
 800157c:	4807      	ldr	r0, [pc, #28]	; (800159c <read_keyboard+0x304>)
 800157e:	f002 fbc1 	bl	8003d04 <HAL_GPIO_ReadPin>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0f8      	beq.n	800157a <read_keyboard+0x2e2>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001588:	2200      	movs	r2, #0
 800158a:	2120      	movs	r1, #32
 800158c:	4804      	ldr	r0, [pc, #16]	; (80015a0 <read_keyboard+0x308>)
 800158e:	f002 fbd1 	bl	8003d34 <HAL_GPIO_WritePin>
		return "9";
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <read_keyboard+0x334>)
 8001594:	e0bf      	b.n	8001716 <read_keyboard+0x47e>
 8001596:	bf00      	nop
 8001598:	40020400 	.word	0x40020400
 800159c:	40020800 	.word	0x40020800
 80015a0:	40020000 	.word	0x40020000
 80015a4:	0800a848 	.word	0x0800a848
 80015a8:	0800a84c 	.word	0x0800a84c
 80015ac:	0800a850 	.word	0x0800a850
 80015b0:	0800a854 	.word	0x0800a854
 80015b4:	0800a858 	.word	0x0800a858
 80015b8:	0800a85c 	.word	0x0800a85c
 80015bc:	0800a860 	.word	0x0800a860
 80015c0:	0800a864 	.word	0x0800a864
 80015c4:	0800a868 	.word	0x0800a868
 80015c8:	0800a86c 	.word	0x0800a86c
 80015cc:	0800a870 	.word	0x0800a870
	}

	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)))
 80015d0:	2140      	movs	r1, #64	; 0x40
 80015d2:	4852      	ldr	r0, [pc, #328]	; (800171c <read_keyboard+0x484>)
 80015d4:	f002 fb96 	bl	8003d04 <HAL_GPIO_ReadPin>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d113      	bne.n	8001606 <read_keyboard+0x36e>
	{
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80015de:	2201      	movs	r2, #1
 80015e0:	2120      	movs	r1, #32
 80015e2:	484f      	ldr	r0, [pc, #316]	; (8001720 <read_keyboard+0x488>)
 80015e4:	f002 fba6 	bl	8003d34 <HAL_GPIO_WritePin>
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 80015e8:	bf00      	nop
 80015ea:	2140      	movs	r1, #64	; 0x40
 80015ec:	484b      	ldr	r0, [pc, #300]	; (800171c <read_keyboard+0x484>)
 80015ee:	f002 fb89 	bl	8003d04 <HAL_GPIO_ReadPin>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d0f8      	beq.n	80015ea <read_keyboard+0x352>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2120      	movs	r1, #32
 80015fc:	4848      	ldr	r0, [pc, #288]	; (8001720 <read_keyboard+0x488>)
 80015fe:	f002 fb99 	bl	8003d34 <HAL_GPIO_WritePin>
		return "C";
 8001602:	4b48      	ldr	r3, [pc, #288]	; (8001724 <read_keyboard+0x48c>)
 8001604:	e087      	b.n	8001716 <read_keyboard+0x47e>
	}

	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8001606:	2201      	movs	r2, #1
 8001608:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800160c:	4846      	ldr	r0, [pc, #280]	; (8001728 <read_keyboard+0x490>)
 800160e:	f002 fb91 	bl	8003d34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8001612:	2201      	movs	r2, #1
 8001614:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001618:	4843      	ldr	r0, [pc, #268]	; (8001728 <read_keyboard+0x490>)
 800161a:	f002 fb8b 	bl	8003d34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 800161e:	2201      	movs	r2, #1
 8001620:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001624:	4840      	ldr	r0, [pc, #256]	; (8001728 <read_keyboard+0x490>)
 8001626:	f002 fb85 	bl	8003d34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);
 800162a:	2200      	movs	r2, #0
 800162c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001630:	483d      	ldr	r0, [pc, #244]	; (8001728 <read_keyboard+0x490>)
 8001632:	f002 fb7f 	bl	8003d34 <HAL_GPIO_WritePin>


	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)))
 8001636:	f44f 7100 	mov.w	r1, #512	; 0x200
 800163a:	4838      	ldr	r0, [pc, #224]	; (800171c <read_keyboard+0x484>)
 800163c:	f002 fb62 	bl	8003d04 <HAL_GPIO_ReadPin>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d114      	bne.n	8001670 <read_keyboard+0x3d8>
	{
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001646:	2201      	movs	r2, #1
 8001648:	2120      	movs	r1, #32
 800164a:	4835      	ldr	r0, [pc, #212]	; (8001720 <read_keyboard+0x488>)
 800164c:	f002 fb72 	bl	8003d34 <HAL_GPIO_WritePin>
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 8001650:	bf00      	nop
 8001652:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001656:	4831      	ldr	r0, [pc, #196]	; (800171c <read_keyboard+0x484>)
 8001658:	f002 fb54 	bl	8003d04 <HAL_GPIO_ReadPin>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0f7      	beq.n	8001652 <read_keyboard+0x3ba>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	2120      	movs	r1, #32
 8001666:	482e      	ldr	r0, [pc, #184]	; (8001720 <read_keyboard+0x488>)
 8001668:	f002 fb64 	bl	8003d34 <HAL_GPIO_WritePin>
		return "*";
 800166c:	4b2f      	ldr	r3, [pc, #188]	; (800172c <read_keyboard+0x494>)
 800166e:	e052      	b.n	8001716 <read_keyboard+0x47e>
	}

	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)))
 8001670:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001674:	4829      	ldr	r0, [pc, #164]	; (800171c <read_keyboard+0x484>)
 8001676:	f002 fb45 	bl	8003d04 <HAL_GPIO_ReadPin>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d114      	bne.n	80016aa <read_keyboard+0x412>
	{
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001680:	2201      	movs	r2, #1
 8001682:	2120      	movs	r1, #32
 8001684:	4826      	ldr	r0, [pc, #152]	; (8001720 <read_keyboard+0x488>)
 8001686:	f002 fb55 	bl	8003d34 <HAL_GPIO_WritePin>
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 800168a:	bf00      	nop
 800168c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001690:	4822      	ldr	r0, [pc, #136]	; (800171c <read_keyboard+0x484>)
 8001692:	f002 fb37 	bl	8003d04 <HAL_GPIO_ReadPin>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0f7      	beq.n	800168c <read_keyboard+0x3f4>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800169c:	2200      	movs	r2, #0
 800169e:	2120      	movs	r1, #32
 80016a0:	481f      	ldr	r0, [pc, #124]	; (8001720 <read_keyboard+0x488>)
 80016a2:	f002 fb47 	bl	8003d34 <HAL_GPIO_WritePin>
		return "0";
 80016a6:	4b22      	ldr	r3, [pc, #136]	; (8001730 <read_keyboard+0x498>)
 80016a8:	e035      	b.n	8001716 <read_keyboard+0x47e>
	}

	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)))
 80016aa:	2180      	movs	r1, #128	; 0x80
 80016ac:	481b      	ldr	r0, [pc, #108]	; (800171c <read_keyboard+0x484>)
 80016ae:	f002 fb29 	bl	8003d04 <HAL_GPIO_ReadPin>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d113      	bne.n	80016e0 <read_keyboard+0x448>
	{
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80016b8:	2201      	movs	r2, #1
 80016ba:	2120      	movs	r1, #32
 80016bc:	4818      	ldr	r0, [pc, #96]	; (8001720 <read_keyboard+0x488>)
 80016be:	f002 fb39 	bl	8003d34 <HAL_GPIO_WritePin>
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 80016c2:	bf00      	nop
 80016c4:	2180      	movs	r1, #128	; 0x80
 80016c6:	4815      	ldr	r0, [pc, #84]	; (800171c <read_keyboard+0x484>)
 80016c8:	f002 fb1c 	bl	8003d04 <HAL_GPIO_ReadPin>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f8      	beq.n	80016c4 <read_keyboard+0x42c>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2120      	movs	r1, #32
 80016d6:	4812      	ldr	r0, [pc, #72]	; (8001720 <read_keyboard+0x488>)
 80016d8:	f002 fb2c 	bl	8003d34 <HAL_GPIO_WritePin>
		return "#";
 80016dc:	4b15      	ldr	r3, [pc, #84]	; (8001734 <read_keyboard+0x49c>)
 80016de:	e01a      	b.n	8001716 <read_keyboard+0x47e>
	}

	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)))
 80016e0:	2140      	movs	r1, #64	; 0x40
 80016e2:	480e      	ldr	r0, [pc, #56]	; (800171c <read_keyboard+0x484>)
 80016e4:	f002 fb0e 	bl	8003d04 <HAL_GPIO_ReadPin>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d113      	bne.n	8001716 <read_keyboard+0x47e>
	{
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80016ee:	2201      	movs	r2, #1
 80016f0:	2120      	movs	r1, #32
 80016f2:	480b      	ldr	r0, [pc, #44]	; (8001720 <read_keyboard+0x488>)
 80016f4:	f002 fb1e 	bl	8003d34 <HAL_GPIO_WritePin>
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 80016f8:	bf00      	nop
 80016fa:	2140      	movs	r1, #64	; 0x40
 80016fc:	4807      	ldr	r0, [pc, #28]	; (800171c <read_keyboard+0x484>)
 80016fe:	f002 fb01 	bl	8003d04 <HAL_GPIO_ReadPin>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0f8      	beq.n	80016fa <read_keyboard+0x462>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001708:	2200      	movs	r2, #0
 800170a:	2120      	movs	r1, #32
 800170c:	4804      	ldr	r0, [pc, #16]	; (8001720 <read_keyboard+0x488>)
 800170e:	f002 fb11 	bl	8003d34 <HAL_GPIO_WritePin>
		return "D";
 8001712:	4b09      	ldr	r3, [pc, #36]	; (8001738 <read_keyboard+0x4a0>)
 8001714:	e7ff      	b.n	8001716 <read_keyboard+0x47e>
	}

}
 8001716:	4618      	mov	r0, r3
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40020800 	.word	0x40020800
 8001720:	40020000 	.word	0x40020000
 8001724:	0800a874 	.word	0x0800a874
 8001728:	40020400 	.word	0x40020400
 800172c:	0800a878 	.word	0x0800a878
 8001730:	0800a87c 	.word	0x0800a87c
 8001734:	0800a880 	.word	0x0800a880
 8001738:	0800a884 	.word	0x0800a884

0800173c <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8001746:	4a38      	ldr	r2, [pc, #224]	; (8001828 <HD44780_Init+0xec>)
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 800174c:	4b37      	ldr	r3, [pc, #220]	; (800182c <HD44780_Init+0xf0>)
 800174e:	2208      	movs	r2, #8
 8001750:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8001752:	4b37      	ldr	r3, [pc, #220]	; (8001830 <HD44780_Init+0xf4>)
 8001754:	2200      	movs	r2, #0
 8001756:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8001758:	4b33      	ldr	r3, [pc, #204]	; (8001828 <HD44780_Init+0xec>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d907      	bls.n	8001770 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8001760:	4b33      	ldr	r3, [pc, #204]	; (8001830 <HD44780_Init+0xf4>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	f043 0308 	orr.w	r3, r3, #8
 8001768:	b2da      	uxtb	r2, r3
 800176a:	4b31      	ldr	r3, [pc, #196]	; (8001830 <HD44780_Init+0xf4>)
 800176c:	701a      	strb	r2, [r3, #0]
 800176e:	e006      	b.n	800177e <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8001770:	4b2f      	ldr	r3, [pc, #188]	; (8001830 <HD44780_Init+0xf4>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	f043 0304 	orr.w	r3, r3, #4
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4b2d      	ldr	r3, [pc, #180]	; (8001830 <HD44780_Init+0xf4>)
 800177c:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800177e:	f000 f985 	bl	8001a8c <DelayInit>
  HAL_Delay(50);
 8001782:	2032      	movs	r0, #50	; 0x32
 8001784:	f001 fb52 	bl	8002e2c <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8001788:	4b28      	ldr	r3, [pc, #160]	; (800182c <HD44780_Init+0xf0>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f000 f943 	bl	8001a18 <ExpanderWrite>
  HAL_Delay(1000);
 8001792:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001796:	f001 fb49 	bl	8002e2c <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800179a:	2030      	movs	r0, #48	; 0x30
 800179c:	f000 f92b 	bl	80019f6 <Write4Bits>
  DelayUS(4500);
 80017a0:	f241 1094 	movw	r0, #4500	; 0x1194
 80017a4:	f000 f99c 	bl	8001ae0 <DelayUS>

  Write4Bits(0x03 << 4);
 80017a8:	2030      	movs	r0, #48	; 0x30
 80017aa:	f000 f924 	bl	80019f6 <Write4Bits>
  DelayUS(4500);
 80017ae:	f241 1094 	movw	r0, #4500	; 0x1194
 80017b2:	f000 f995 	bl	8001ae0 <DelayUS>

  Write4Bits(0x03 << 4);
 80017b6:	2030      	movs	r0, #48	; 0x30
 80017b8:	f000 f91d 	bl	80019f6 <Write4Bits>
  DelayUS(4500);
 80017bc:	f241 1094 	movw	r0, #4500	; 0x1194
 80017c0:	f000 f98e 	bl	8001ae0 <DelayUS>

  Write4Bits(0x02 << 4);
 80017c4:	2020      	movs	r0, #32
 80017c6:	f000 f916 	bl	80019f6 <Write4Bits>
  DelayUS(100);
 80017ca:	2064      	movs	r0, #100	; 0x64
 80017cc:	f000 f988 	bl	8001ae0 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80017d0:	4b17      	ldr	r3, [pc, #92]	; (8001830 <HD44780_Init+0xf4>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	f043 0320 	orr.w	r3, r3, #32
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 f8ce 	bl	800197c <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80017e0:	4b14      	ldr	r3, [pc, #80]	; (8001834 <HD44780_Init+0xf8>)
 80017e2:	2204      	movs	r2, #4
 80017e4:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80017e6:	f000 f875 	bl	80018d4 <HD44780_Display>
  HD44780_Clear();
 80017ea:	f000 f82b 	bl	8001844 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80017ee:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HD44780_Init+0xfc>)
 80017f0:	2202      	movs	r2, #2
 80017f2:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80017f4:	4b10      	ldr	r3, [pc, #64]	; (8001838 <HD44780_Init+0xfc>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 f8bc 	bl	800197c <SendCommand>
  DelayUS(4500);
 8001804:	f241 1094 	movw	r0, #4500	; 0x1194
 8001808:	f000 f96a 	bl	8001ae0 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 800180c:	490b      	ldr	r1, [pc, #44]	; (800183c <HD44780_Init+0x100>)
 800180e:	2000      	movs	r0, #0
 8001810:	f000 f876 	bl	8001900 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8001814:	490a      	ldr	r1, [pc, #40]	; (8001840 <HD44780_Init+0x104>)
 8001816:	2001      	movs	r0, #1
 8001818:	f000 f872 	bl	8001900 <HD44780_CreateSpecialChar>

  HD44780_Home();
 800181c:	f000 f81d 	bl	800185a <HD44780_Home>
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	200002bb 	.word	0x200002bb
 800182c:	200002bc 	.word	0x200002bc
 8001830:	200002b8 	.word	0x200002b8
 8001834:	200002b9 	.word	0x200002b9
 8001838:	200002ba 	.word	0x200002ba
 800183c:	20000000 	.word	0x20000000
 8001840:	20000008 	.word	0x20000008

08001844 <HD44780_Clear>:

void HD44780_Clear()
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8001848:	2001      	movs	r0, #1
 800184a:	f000 f897 	bl	800197c <SendCommand>
  DelayUS(2000);
 800184e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001852:	f000 f945 	bl	8001ae0 <DelayUS>
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}

0800185a <HD44780_Home>:

void HD44780_Home()
{
 800185a:	b580      	push	{r7, lr}
 800185c:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800185e:	2002      	movs	r0, #2
 8001860:	f000 f88c 	bl	800197c <SendCommand>
  DelayUS(2000);
 8001864:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001868:	f000 f93a 	bl	8001ae0 <DelayUS>
}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}

08001870 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8001870:	b590      	push	{r4, r7, lr}
 8001872:	b087      	sub	sp, #28
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	460a      	mov	r2, r1
 800187a:	71fb      	strb	r3, [r7, #7]
 800187c:	4613      	mov	r3, r2
 800187e:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001880:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HD44780_SetCursor+0x5c>)
 8001882:	f107 0408 	add.w	r4, r7, #8
 8001886:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001888:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 800188c:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <HD44780_SetCursor+0x60>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	79ba      	ldrb	r2, [r7, #6]
 8001892:	429a      	cmp	r2, r3
 8001894:	d303      	bcc.n	800189e <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8001896:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <HD44780_SetCursor+0x60>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	3b01      	subs	r3, #1
 800189c:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800189e:	79bb      	ldrb	r3, [r7, #6]
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	3318      	adds	r3, #24
 80018a4:	443b      	add	r3, r7
 80018a6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	4413      	add	r3, r2
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	b25b      	sxtb	r3, r3
 80018b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018b8:	b25b      	sxtb	r3, r3
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	4618      	mov	r0, r3
 80018be:	f000 f85d 	bl	800197c <SendCommand>
}
 80018c2:	bf00      	nop
 80018c4:	371c      	adds	r7, #28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd90      	pop	{r4, r7, pc}
 80018ca:	bf00      	nop
 80018cc:	0800a888 	.word	0x0800a888
 80018d0:	200002bb 	.word	0x200002bb

080018d4 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <HD44780_Display+0x28>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	f043 0304 	orr.w	r3, r3, #4
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HD44780_Display+0x28>)
 80018e4:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80018e6:	4b05      	ldr	r3, [pc, #20]	; (80018fc <HD44780_Display+0x28>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	f043 0308 	orr.w	r3, r3, #8
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	4618      	mov	r0, r3
 80018f2:	f000 f843 	bl	800197c <SendCommand>
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	200002b9 	.word	0x200002b9

08001900 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	6039      	str	r1, [r7, #0]
 800190a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	b25b      	sxtb	r3, r3
 800191a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800191e:	b25b      	sxtb	r3, r3
 8001920:	b2db      	uxtb	r3, r3
 8001922:	4618      	mov	r0, r3
 8001924:	f000 f82a 	bl	800197c <SendCommand>
  for (int i=0; i<8; i++)
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	e009      	b.n	8001942 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	4413      	add	r3, r2
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f000 f82e 	bl	8001998 <SendChar>
  for (int i=0; i<8; i++)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	3301      	adds	r3, #1
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2b07      	cmp	r3, #7
 8001946:	ddf2      	ble.n	800192e <HD44780_CreateSpecialChar+0x2e>
  }
}
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800195a:	e006      	b.n	800196a <HD44780_PrintStr+0x18>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	1c5a      	adds	r2, r3, #1
 8001960:	607a      	str	r2, [r7, #4]
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f000 f817 	bl	8001998 <SendChar>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1f4      	bne.n	800195c <HD44780_PrintStr+0xa>
}
 8001972:	bf00      	nop
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	2100      	movs	r1, #0
 800198a:	4618      	mov	r0, r3
 800198c:	f000 f812 	bl	80019b4 <Send>
}
 8001990:	bf00      	nop
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <SendChar>:

static void SendChar(uint8_t ch)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	2101      	movs	r1, #1
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 f804 	bl	80019b4 <Send>
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	460a      	mov	r2, r1
 80019be:	71fb      	strb	r3, [r7, #7]
 80019c0:	4613      	mov	r3, r2
 80019c2:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	f023 030f 	bic.w	r3, r3, #15
 80019ca:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	011b      	lsls	r3, r3, #4
 80019d0:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80019d2:	7bfa      	ldrb	r2, [r7, #15]
 80019d4:	79bb      	ldrb	r3, [r7, #6]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 f80b 	bl	80019f6 <Write4Bits>
  Write4Bits((lownib)|mode);
 80019e0:	7bba      	ldrb	r2, [r7, #14]
 80019e2:	79bb      	ldrb	r3, [r7, #6]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 f804 	bl	80019f6 <Write4Bits>
}
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	4603      	mov	r3, r0
 80019fe:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 f808 	bl	8001a18 <ExpanderWrite>
  PulseEnable(value);
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 f820 	bl	8001a50 <PulseEnable>
}
 8001a10:	bf00      	nop
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af02      	add	r7, sp, #8
 8001a1e:	4603      	mov	r3, r0
 8001a20:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <ExpanderWrite+0x30>)
 8001a24:	781a      	ldrb	r2, [r3, #0]
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8001a2e:	f107 020f 	add.w	r2, r7, #15
 8001a32:	230a      	movs	r3, #10
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	2301      	movs	r3, #1
 8001a38:	214e      	movs	r1, #78	; 0x4e
 8001a3a:	4804      	ldr	r0, [pc, #16]	; (8001a4c <ExpanderWrite+0x34>)
 8001a3c:	f002 fafc 	bl	8004038 <HAL_I2C_Master_Transmit>
}
 8001a40:	bf00      	nop
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	200002bc 	.word	0x200002bc
 8001a4c:	20000264 	.word	0x20000264

08001a50 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	f043 0304 	orr.w	r3, r3, #4
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff ffd8 	bl	8001a18 <ExpanderWrite>
  DelayUS(20);
 8001a68:	2014      	movs	r0, #20
 8001a6a:	f000 f839 	bl	8001ae0 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	f023 0304 	bic.w	r3, r3, #4
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff ffce 	bl	8001a18 <ExpanderWrite>
  DelayUS(20);
 8001a7c:	2014      	movs	r0, #20
 8001a7e:	f000 f82f 	bl	8001ae0 <DelayUS>
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <DelayInit>:

static void DelayInit(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <DelayInit+0x4c>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	4a10      	ldr	r2, [pc, #64]	; (8001ad8 <DelayInit+0x4c>)
 8001a96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a9a:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8001a9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <DelayInit+0x4c>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	4a0d      	ldr	r2, [pc, #52]	; (8001ad8 <DelayInit+0x4c>)
 8001aa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aa6:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <DelayInit+0x50>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a0b      	ldr	r2, [pc, #44]	; (8001adc <DelayInit+0x50>)
 8001aae:	f023 0301 	bic.w	r3, r3, #1
 8001ab2:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001ab4:	4b09      	ldr	r3, [pc, #36]	; (8001adc <DelayInit+0x50>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a08      	ldr	r2, [pc, #32]	; (8001adc <DelayInit+0x50>)
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <DelayInit+0x50>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8001ac6:	bf00      	nop
  __ASM volatile ("NOP");
 8001ac8:	bf00      	nop
  __ASM volatile ("NOP");
 8001aca:	bf00      	nop
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000edf0 	.word	0xe000edf0
 8001adc:	e0001000 	.word	0xe0001000

08001ae0 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001ae0:	b480      	push	{r7}
 8001ae2:	b087      	sub	sp, #28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001ae8:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <DelayUS+0x44>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0e      	ldr	r2, [pc, #56]	; (8001b28 <DelayUS+0x48>)
 8001aee:	fba2 2303 	umull	r2, r3, r2, r3
 8001af2:	0c9a      	lsrs	r2, r3, #18
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	fb02 f303 	mul.w	r3, r2, r3
 8001afa:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <DelayUS+0x4c>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8001b02:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <DelayUS+0x4c>)
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d8f6      	bhi.n	8001b02 <DelayUS+0x22>
}
 8001b14:	bf00      	nop
 8001b16:	bf00      	nop
 8001b18:	371c      	adds	r7, #28
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	20000024 	.word	0x20000024
 8001b28:	431bde83 	.word	0x431bde83
 8001b2c:	e0001000 	.word	0xe0001000

08001b30 <HAL_UART_TxCpltCallback>:
uint8_t keyb = 1;
uint8_t diode = 0;
uint8_t volume = 0;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  if (huart == &huart2) {
  }
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  if (huart == &huart2) {
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a08      	ldr	r2, [pc, #32]	; (8001b70 <HAL_UART_RxCpltCallback+0x2c>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d109      	bne.n	8001b68 <HAL_UART_RxCpltCallback+0x24>
	  char_append(uart_rx_buffer);
 8001b54:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <HAL_UART_RxCpltCallback+0x30>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f000 ffbf 	bl	8002adc <char_append>
    HAL_UART_Receive_IT(&huart2, &uart_rx_buffer, 1);
 8001b5e:	2201      	movs	r2, #1
 8001b60:	4904      	ldr	r1, [pc, #16]	; (8001b74 <HAL_UART_RxCpltCallback+0x30>)
 8001b62:	4803      	ldr	r0, [pc, #12]	; (8001b70 <HAL_UART_RxCpltCallback+0x2c>)
 8001b64:	f004 ffa9 	bl	8006aba <HAL_UART_Receive_IT>
  }
}
 8001b68:	bf00      	nop
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000fa8 	.word	0x20000fa8
 8001b74:	20000ef4 	.word	0x20000ef4

08001b78 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]

	if(htim==&htim1)
	{

	}
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b09c      	sub	sp, #112	; 0x70
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b92:	f001 f8d9 	bl	8002d48 <HAL_Init>

  /* USER CODE BEGIN Init */
  RingBuffer_Init(&UART_RingBuffer_Tx, &RingBufferData_Tx, 1024);
 8001b96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b9a:	49b8      	ldr	r1, [pc, #736]	; (8001e7c <main+0x2f0>)
 8001b9c:	48b8      	ldr	r0, [pc, #736]	; (8001e80 <main+0x2f4>)
 8001b9e:	f000 fb73 	bl	8002288 <RingBuffer_Init>
  RingBuffer_Init(&UART_RingBuffer_Rx, &RingBufferData_Rx, 1024);
 8001ba2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ba6:	49b7      	ldr	r1, [pc, #732]	; (8001e84 <main+0x2f8>)
 8001ba8:	48b7      	ldr	r0, [pc, #732]	; (8001e88 <main+0x2fc>)
 8001baa:	f000 fb6d 	bl	8002288 <RingBuffer_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bae:	f000 facd 	bl	800214c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bb2:	f7ff fa41 	bl	8001038 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001bb6:	f001 f823 	bl	8002c00 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001bba:	f7ff faf7 	bl	80011ac <MX_I2C1_Init>
  MX_TIM2_Init();
 8001bbe:	f000 fdf3 	bl	80027a8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001bc2:	f000 fd9f 	bl	8002704 <MX_TIM1_Init>
  MX_ADC2_Init();
 8001bc6:	f7ff f9a1 	bl	8000f0c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 8001bca:	2002      	movs	r0, #2
 8001bcc:	f7ff fdb6 	bl	800173c <HD44780_Init>
  HD44780_Clear();
 8001bd0:	f7ff fe38 	bl	8001844 <HD44780_Clear>
  HD44780_SetCursor(0,0);
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f7ff fe4a 	bl	8001870 <HD44780_SetCursor>
  HD44780_PrintStr("ON THE");
 8001bdc:	48ab      	ldr	r0, [pc, #684]	; (8001e8c <main+0x300>)
 8001bde:	f7ff feb8 	bl	8001952 <HD44780_PrintStr>
  HD44780_SetCursor(10,1);
 8001be2:	2101      	movs	r1, #1
 8001be4:	200a      	movs	r0, #10
 8001be6:	f7ff fe43 	bl	8001870 <HD44780_SetCursor>
  HD44780_PrintStr("OTHER SIDE");
 8001bea:	48a9      	ldr	r0, [pc, #676]	; (8001e90 <main+0x304>)
 8001bec:	f7ff feb1 	bl	8001952 <HD44780_PrintStr>
  HAL_Delay(2000);
 8001bf0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001bf4:	f001 f91a 	bl	8002e2c <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8001bf8:	48a6      	ldr	r0, [pc, #664]	; (8001e94 <main+0x308>)
 8001bfa:	f003 fb5d 	bl	80052b8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  readyToRead = 0;
 8001bfe:	4ba6      	ldr	r3, [pc, #664]	; (8001e98 <main+0x30c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	701a      	strb	r2, [r3, #0]
  readyToSend = 0;
 8001c04:	4ba5      	ldr	r3, [pc, #660]	; (8001e9c <main+0x310>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	701a      	strb	r2, [r3, #0]

  HAL_UART_Receive_IT(&huart2, &uart_rx_buffer, 1);
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	49a4      	ldr	r1, [pc, #656]	; (8001ea0 <main+0x314>)
 8001c0e:	48a5      	ldr	r0, [pc, #660]	; (8001ea4 <main+0x318>)
 8001c10:	f004 ff53 	bl	8006aba <HAL_UART_Receive_IT>


  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8001c14:	2100      	movs	r1, #0
 8001c16:	48a4      	ldr	r0, [pc, #656]	; (8001ea8 <main+0x31c>)
 8001c18:	f003 fd3a 	bl	8005690 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8001c1c:	2104      	movs	r1, #4
 8001c1e:	48a2      	ldr	r0, [pc, #648]	; (8001ea8 <main+0x31c>)
 8001c20:	f003 fd36 	bl	8005690 <HAL_TIM_IC_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001c24:	2108      	movs	r1, #8
 8001c26:	48a0      	ldr	r0, [pc, #640]	; (8001ea8 <main+0x31c>)
 8001c28:	f003 fc10 	bl	800544c <HAL_TIM_PWM_Start>

  HAL_Delay(1000);
 8001c2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c30:	f001 f8fc 	bl	8002e2c <HAL_Delay>

  uint32_t cursor = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t counter = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	66bb      	str	r3, [r7, #104]	; 0x68
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

     HAL_ADC_Start(&hadc2);
 8001c3c:	489b      	ldr	r0, [pc, #620]	; (8001eac <main+0x320>)
 8001c3e:	f001 f95d 	bl	8002efc <HAL_ADC_Start>
     if (HAL_ADC_PollForConversion(&hadc2, 1000) == HAL_OK)
 8001c42:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c46:	4899      	ldr	r0, [pc, #612]	; (8001eac <main+0x320>)
 8001c48:	f001 fa5d 	bl	8003106 <HAL_ADC_PollForConversion>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d118      	bne.n	8001c84 <main+0xf8>
     {
         adcValue = HAL_ADC_GetValue(&hadc2);
 8001c52:	4896      	ldr	r0, [pc, #600]	; (8001eac <main+0x320>)
 8001c54:	f001 fae2 	bl	800321c <HAL_ADC_GetValue>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	4b94      	ldr	r3, [pc, #592]	; (8001eb0 <main+0x324>)
 8001c5e:	801a      	strh	r2, [r3, #0]
         counter = counter + 1;
 8001c60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c62:	3301      	adds	r3, #1
 8001c64:	66bb      	str	r3, [r7, #104]	; 0x68
         if ((adcValue < 200 || adcValue > 400) && counter > 2){
 8001c66:	4b92      	ldr	r3, [pc, #584]	; (8001eb0 <main+0x324>)
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	2bc7      	cmp	r3, #199	; 0xc7
 8001c6c:	d904      	bls.n	8001c78 <main+0xec>
 8001c6e:	4b90      	ldr	r3, [pc, #576]	; (8001eb0 <main+0x324>)
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001c76:	d905      	bls.n	8001c84 <main+0xf8>
 8001c78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d902      	bls.n	8001c84 <main+0xf8>
        	 volume = 1;
 8001c7e:	4b8d      	ldr	r3, [pc, #564]	; (8001eb4 <main+0x328>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	701a      	strb	r2, [r3, #0]
         }
     }
     HAL_ADC_Stop(&hadc2);
 8001c84:	4889      	ldr	r0, [pc, #548]	; (8001eac <main+0x320>)
 8001c86:	f001 fa0b 	bl	80030a0 <HAL_ADC_Stop>


	 uint32_t start = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4886      	ldr	r0, [pc, #536]	; (8001ea8 <main+0x31c>)
 8001c8e:	f004 f909 	bl	8005ea4 <HAL_TIM_ReadCapturedValue>
 8001c92:	6678      	str	r0, [r7, #100]	; 0x64
	 uint32_t stop = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 8001c94:	2104      	movs	r1, #4
 8001c96:	4884      	ldr	r0, [pc, #528]	; (8001ea8 <main+0x31c>)
 8001c98:	f004 f904 	bl	8005ea4 <HAL_TIM_ReadCapturedValue>
 8001c9c:	6638      	str	r0, [r7, #96]	; 0x60

	 uint32_t distance = (stop - start) / 58.0f;
 8001c9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ca0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	ee07 3a90 	vmov	s15, r3
 8001ca8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cac:	eddf 6a82 	vldr	s13, [pc, #520]	; 8001eb8 <main+0x32c>
 8001cb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cb8:	ee17 3a90 	vmov	r3, s15
 8001cbc:	65fb      	str	r3, [r7, #92]	; 0x5c
	 HAL_Delay(1000);
 8001cbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cc2:	f001 f8b3 	bl	8002e2c <HAL_Delay>

	 char binary_buff[32];
	 if (strlen(binary_buff) == 5)
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7fe faab 	bl	8000224 <strlen>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b05      	cmp	r3, #5
 8001cd2:	d104      	bne.n	8001cde <main+0x152>
	 {
		 strcpy(binary_check, binary_buff);
 8001cd4:	1d3b      	adds	r3, r7, #4
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4878      	ldr	r0, [pc, #480]	; (8001ebc <main+0x330>)
 8001cda:	f006 fcd2 	bl	8008682 <strcpy>
	 }

	 if (HAL_GPIO_ReadPin(GPIOB, RESET_Pin) == GPIO_PIN_RESET || strlen(binary_buff) == 6)
 8001cde:	2104      	movs	r1, #4
 8001ce0:	4877      	ldr	r0, [pc, #476]	; (8001ec0 <main+0x334>)
 8001ce2:	f002 f80f 	bl	8003d04 <HAL_GPIO_ReadPin>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d006      	beq.n	8001cfa <main+0x16e>
 8001cec:	1d3b      	adds	r3, r7, #4
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe fa98 	bl	8000224 <strlen>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b06      	cmp	r3, #6
 8001cf8:	d108      	bne.n	8001d0c <main+0x180>
	 {
		 HD44780_Clear();
 8001cfa:	f7ff fda3 	bl	8001844 <HD44780_Clear>
		 binary_buff[0] = '\0';
 8001cfe:	2300      	movs	r3, #0
 8001d00:	713b      	strb	r3, [r7, #4]
		 binary_check[0] = '\0';
 8001d02:	4b6e      	ldr	r3, [pc, #440]	; (8001ebc <main+0x330>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]
		 cursor = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	66fb      	str	r3, [r7, #108]	; 0x6c
	 }

	 if (HAL_GPIO_ReadPin(GPIOB, SET_Pin) == GPIO_PIN_RESET)
 8001d0c:	2102      	movs	r1, #2
 8001d0e:	486c      	ldr	r0, [pc, #432]	; (8001ec0 <main+0x334>)
 8001d10:	f001 fff8 	bl	8003d04 <HAL_GPIO_ReadPin>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d12c      	bne.n	8001d74 <main+0x1e8>
	 {
		 HD44780_SetCursor(cursor,0);
 8001d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff fda5 	bl	8001870 <HD44780_SetCursor>
		 if (distance < 15)
 8001d26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d28:	2b0e      	cmp	r3, #14
 8001d2a:	d810      	bhi.n	8001d4e <main+0x1c2>
		 {
			 HD44780_PrintStr("1");
 8001d2c:	4865      	ldr	r0, [pc, #404]	; (8001ec4 <main+0x338>)
 8001d2e:	f7ff fe10 	bl	8001952 <HD44780_PrintStr>
			 strcat(binary_buff, "1");
 8001d32:	1d3b      	adds	r3, r7, #4
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7fe fa75 	bl	8000224 <strlen>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	1d3b      	adds	r3, r7, #4
 8001d40:	4413      	add	r3, r2
 8001d42:	4960      	ldr	r1, [pc, #384]	; (8001ec4 <main+0x338>)
 8001d44:	461a      	mov	r2, r3
 8001d46:	460b      	mov	r3, r1
 8001d48:	881b      	ldrh	r3, [r3, #0]
 8001d4a:	8013      	strh	r3, [r2, #0]
 8001d4c:	e00f      	b.n	8001d6e <main+0x1e2>
		 }
		 else
		 {
			 HD44780_PrintStr("0");
 8001d4e:	485e      	ldr	r0, [pc, #376]	; (8001ec8 <main+0x33c>)
 8001d50:	f7ff fdff 	bl	8001952 <HD44780_PrintStr>
			 strcat(binary_buff, "0");
 8001d54:	1d3b      	adds	r3, r7, #4
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fa64 	bl	8000224 <strlen>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	461a      	mov	r2, r3
 8001d60:	1d3b      	adds	r3, r7, #4
 8001d62:	4413      	add	r3, r2
 8001d64:	4958      	ldr	r1, [pc, #352]	; (8001ec8 <main+0x33c>)
 8001d66:	461a      	mov	r2, r3
 8001d68:	460b      	mov	r3, r1
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	8013      	strh	r3, [r2, #0]
		 }
		 cursor = cursor + 1;
 8001d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d70:	3301      	adds	r3, #1
 8001d72:	66fb      	str	r3, [r7, #108]	; 0x6c
	 }

	 GPIO_PinState currentPinState = HAL_GPIO_ReadPin(CIRC_GPIO_Port, CIRC_Pin);
 8001d74:	2102      	movs	r1, #2
 8001d76:	4855      	ldr	r0, [pc, #340]	; (8001ecc <main+0x340>)
 8001d78:	f001 ffc4 	bl	8003d04 <HAL_GPIO_ReadPin>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

	 if (currentPinState != lastPinState)
 8001d82:	4b53      	ldr	r3, [pc, #332]	; (8001ed0 <main+0x344>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d004      	beq.n	8001d98 <main+0x20c>
	 {
		 lastDebounceTime = HAL_GetTick();
 8001d8e:	f001 f841 	bl	8002e14 <HAL_GetTick>
 8001d92:	4603      	mov	r3, r0
 8001d94:	4a4f      	ldr	r2, [pc, #316]	; (8001ed4 <main+0x348>)
 8001d96:	6013      	str	r3, [r2, #0]
	 }

	 if ((HAL_GetTick() - lastDebounceTime) > DEBOUNCE_TIME)
 8001d98:	f001 f83c 	bl	8002e14 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	4b4d      	ldr	r3, [pc, #308]	; (8001ed4 <main+0x348>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b32      	cmp	r3, #50	; 0x32
 8001da6:	d914      	bls.n	8001dd2 <main+0x246>
	 {
		 if (currentPinState == GPIO_PIN_RESET)
 8001da8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d108      	bne.n	8001dc2 <main+0x236>
	     {
	         HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001db0:	2201      	movs	r2, #1
 8001db2:	2120      	movs	r1, #32
 8001db4:	4848      	ldr	r0, [pc, #288]	; (8001ed8 <main+0x34c>)
 8001db6:	f001 ffbd 	bl	8003d34 <HAL_GPIO_WritePin>
	         diode = 1;
 8001dba:	4b48      	ldr	r3, [pc, #288]	; (8001edc <main+0x350>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	701a      	strb	r2, [r3, #0]
 8001dc0:	e007      	b.n	8001dd2 <main+0x246>
	      }
	      else
	      {
	    	 HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2120      	movs	r1, #32
 8001dc6:	4844      	ldr	r0, [pc, #272]	; (8001ed8 <main+0x34c>)
 8001dc8:	f001 ffb4 	bl	8003d34 <HAL_GPIO_WritePin>
	    	 diode = 0;
 8001dcc:	4b43      	ldr	r3, [pc, #268]	; (8001edc <main+0x350>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]
	      }
	 }

	 lastPinState = currentPinState;
 8001dd2:	4a3f      	ldr	r2, [pc, #252]	; (8001ed0 <main+0x344>)
 8001dd4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001dd8:	7013      	strb	r3, [r2, #0]

	 if (keyb == 1)
 8001dda:	4b41      	ldr	r3, [pc, #260]	; (8001ee0 <main+0x354>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d10b      	bne.n	8001dfa <main+0x26e>
	 {
		 HD44780_Clear();
 8001de2:	f7ff fd2f 	bl	8001844 <HD44780_Clear>
		 strcat(result, read_keyboard());
 8001de6:	f7ff fa57 	bl	8001298 <read_keyboard>
 8001dea:	4603      	mov	r3, r0
 8001dec:	4619      	mov	r1, r3
 8001dee:	483d      	ldr	r0, [pc, #244]	; (8001ee4 <main+0x358>)
 8001df0:	f006 fc38 	bl	8008664 <strcat>
		 HD44780_PrintStr(result);
 8001df4:	483b      	ldr	r0, [pc, #236]	; (8001ee4 <main+0x358>)
 8001df6:	f7ff fdac 	bl	8001952 <HD44780_PrintStr>
	 }

	 if(strlen(result) == 4)
 8001dfa:	483a      	ldr	r0, [pc, #232]	; (8001ee4 <main+0x358>)
 8001dfc:	f7fe fa12 	bl	8000224 <strlen>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d103      	bne.n	8001e0e <main+0x282>
  	 {
  		 strcpy(key_check, result);
 8001e06:	4937      	ldr	r1, [pc, #220]	; (8001ee4 <main+0x358>)
 8001e08:	4837      	ldr	r0, [pc, #220]	; (8001ee8 <main+0x35c>)
 8001e0a:	f006 fc3a 	bl	8008682 <strcpy>
  	 }

	 if(strlen(result) == 5 || read_keyboard() == "C")
 8001e0e:	4835      	ldr	r0, [pc, #212]	; (8001ee4 <main+0x358>)
 8001e10:	f7fe fa08 	bl	8000224 <strlen>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b05      	cmp	r3, #5
 8001e18:	d006      	beq.n	8001e28 <main+0x29c>
 8001e1a:	f7ff fa3d 	bl	8001298 <read_keyboard>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	461a      	mov	r2, r3
 8001e22:	4b32      	ldr	r3, [pc, #200]	; (8001eec <main+0x360>)
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d104      	bne.n	8001e32 <main+0x2a6>
	 {
		 result[0] = '\0';
 8001e28:	4b2e      	ldr	r3, [pc, #184]	; (8001ee4 <main+0x358>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	701a      	strb	r2, [r3, #0]
		 HD44780_Clear();
 8001e2e:	f7ff fd09 	bl	8001844 <HD44780_Clear>
	 }

	 if(readyToRead){
 8001e32:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <main+0x30c>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d004      	beq.n	8001e44 <main+0x2b8>
	     UART_ReadResponse();
 8001e3a:	f000 fe6f 	bl	8002b1c <UART_ReadResponse>
	     readyToRead = 0;
 8001e3e:	4b16      	ldr	r3, [pc, #88]	; (8001e98 <main+0x30c>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	701a      	strb	r2, [r3, #0]
	 }
	 if (readyToSend)
 8001e44:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <main+0x310>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f43f aef7 	beq.w	8001c3c <main+0xb0>
	 {
		 char toSend[32];

		 if (readyToSend == 1)
 8001e4e:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <main+0x310>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d14e      	bne.n	8001ef4 <main+0x368>
		 {
			 uint16_t finalSize = sprintf(toSend, "diode is on\r\n");
 8001e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e5a:	4925      	ldr	r1, [pc, #148]	; (8001ef0 <main+0x364>)
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f006 fbe1 	bl	8008624 <siprintf>
 8001e62:	4603      	mov	r3, r0
 8001e64:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
			 HAL_UART_Transmit(&huart2, (uint8_t *)toSend, finalSize, 100);
 8001e68:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8001e6c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001e70:	2364      	movs	r3, #100	; 0x64
 8001e72:	480c      	ldr	r0, [pc, #48]	; (8001ea4 <main+0x318>)
 8001e74:	f004 fd8f 	bl	8006996 <HAL_UART_Transmit>
 8001e78:	e13b      	b.n	80020f2 <main+0x566>
 8001e7a:	bf00      	nop
 8001e7c:	200002e0 	.word	0x200002e0
 8001e80:	200002cc 	.word	0x200002cc
 8001e84:	200006f4 	.word	0x200006f4
 8001e88:	200006e0 	.word	0x200006e0
 8001e8c:	0800a898 	.word	0x0800a898
 8001e90:	0800a8a0 	.word	0x0800a8a0
 8001e94:	20000f18 	.word	0x20000f18
 8001e98:	20000ef5 	.word	0x20000ef5
 8001e9c:	20000ef6 	.word	0x20000ef6
 8001ea0:	20000ef4 	.word	0x20000ef4
 8001ea4:	20000fa8 	.word	0x20000fa8
 8001ea8:	20000f60 	.word	0x20000f60
 8001eac:	2000021c 	.word	0x2000021c
 8001eb0:	20000f0e 	.word	0x20000f0e
 8001eb4:	20000f11 	.word	0x20000f11
 8001eb8:	42680000 	.word	0x42680000
 8001ebc:	20000f08 	.word	0x20000f08
 8001ec0:	40020400 	.word	0x40020400
 8001ec4:	0800a8ac 	.word	0x0800a8ac
 8001ec8:	0800a8b0 	.word	0x0800a8b0
 8001ecc:	40020800 	.word	0x40020800
 8001ed0:	20000010 	.word	0x20000010
 8001ed4:	200002c8 	.word	0x200002c8
 8001ed8:	40020000 	.word	0x40020000
 8001edc:	20000f10 	.word	0x20000f10
 8001ee0:	20000022 	.word	0x20000022
 8001ee4:	20000ef8 	.word	0x20000ef8
 8001ee8:	20000f00 	.word	0x20000f00
 8001eec:	0800a8b4 	.word	0x0800a8b4
 8001ef0:	0800a8b8 	.word	0x0800a8b8
		 }
		 else if (readyToSend == 2)
 8001ef4:	4b81      	ldr	r3, [pc, #516]	; (80020fc <main+0x570>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d12f      	bne.n	8001f5c <main+0x3d0>
		 {
			 if(strcmp(key_check, pass) == 0)
 8001efc:	4980      	ldr	r1, [pc, #512]	; (8002100 <main+0x574>)
 8001efe:	4881      	ldr	r0, [pc, #516]	; (8002104 <main+0x578>)
 8001f00:	f7fe f986 	bl	8000210 <strcmp>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d116      	bne.n	8001f38 <main+0x3ac>
			 {
				 uint16_t finalSize = sprintf(toSend, "OK\r\n");
 8001f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f0e:	497e      	ldr	r1, [pc, #504]	; (8002108 <main+0x57c>)
 8001f10:	4618      	mov	r0, r3
 8001f12:	f006 fb87 	bl	8008624 <siprintf>
 8001f16:	4603      	mov	r3, r0
 8001f18:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				 HAL_UART_Transmit(&huart2, (uint8_t *)toSend, finalSize, 100);
 8001f1c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001f20:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001f24:	2364      	movs	r3, #100	; 0x64
 8001f26:	4879      	ldr	r0, [pc, #484]	; (800210c <main+0x580>)
 8001f28:	f004 fd35 	bl	8006996 <HAL_UART_Transmit>
				 HD44780_Clear();
 8001f2c:	f7ff fc8a 	bl	8001844 <HD44780_Clear>
				 keyb = 0;
 8001f30:	4b77      	ldr	r3, [pc, #476]	; (8002110 <main+0x584>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	701a      	strb	r2, [r3, #0]
 8001f36:	e0dc      	b.n	80020f2 <main+0x566>
			 }
			 else
			 {
				 uint16_t finalSize = sprintf(toSend, "NOK\r\n");
 8001f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f3c:	4975      	ldr	r1, [pc, #468]	; (8002114 <main+0x588>)
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f006 fb70 	bl	8008624 <siprintf>
 8001f44:	4603      	mov	r3, r0
 8001f46:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
				 HAL_UART_Transmit(&huart2, (uint8_t *)toSend, finalSize, 100);
 8001f4a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001f4e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001f52:	2364      	movs	r3, #100	; 0x64
 8001f54:	486d      	ldr	r0, [pc, #436]	; (800210c <main+0x580>)
 8001f56:	f004 fd1e 	bl	8006996 <HAL_UART_Transmit>
 8001f5a:	e0ca      	b.n	80020f2 <main+0x566>
			 }

		 }

		 else if (readyToSend == 3)
 8001f5c:	4b67      	ldr	r3, [pc, #412]	; (80020fc <main+0x570>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b03      	cmp	r3, #3
 8001f62:	d12c      	bne.n	8001fbe <main+0x432>
		 {
			 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001f64:	2201      	movs	r2, #1
 8001f66:	2104      	movs	r1, #4
 8001f68:	486b      	ldr	r0, [pc, #428]	; (8002118 <main+0x58c>)
 8001f6a:	f001 fee3 	bl	8003d34 <HAL_GPIO_WritePin>

			 if (diode == 1)
 8001f6e:	4b6b      	ldr	r3, [pc, #428]	; (800211c <main+0x590>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d111      	bne.n	8001f9a <main+0x40e>
			 {
				 uint16_t finalSize = sprintf(toSend, "ON\r\n");
 8001f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f7a:	4969      	ldr	r1, [pc, #420]	; (8002120 <main+0x594>)
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f006 fb51 	bl	8008624 <siprintf>
 8001f82:	4603      	mov	r3, r0
 8001f84:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				 HAL_UART_Transmit(&huart2, (uint8_t *)toSend, finalSize, 100);
 8001f88:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8001f8c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001f90:	2364      	movs	r3, #100	; 0x64
 8001f92:	485e      	ldr	r0, [pc, #376]	; (800210c <main+0x580>)
 8001f94:	f004 fcff 	bl	8006996 <HAL_UART_Transmit>
 8001f98:	e0ab      	b.n	80020f2 <main+0x566>
			 }
			 else
			 {
				 uint16_t finalSize = sprintf(toSend, "OFF\r\n");
 8001f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f9e:	4961      	ldr	r1, [pc, #388]	; (8002124 <main+0x598>)
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f006 fb3f 	bl	8008624 <siprintf>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
				 HAL_UART_Transmit(&huart2, (uint8_t *)toSend, finalSize, 100);
 8001fac:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8001fb0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001fb4:	2364      	movs	r3, #100	; 0x64
 8001fb6:	4855      	ldr	r0, [pc, #340]	; (800210c <main+0x580>)
 8001fb8:	f004 fced 	bl	8006996 <HAL_UART_Transmit>
 8001fbc:	e099      	b.n	80020f2 <main+0x566>
			 }
		 }

		 else if (readyToSend == 4)
 8001fbe:	4b4f      	ldr	r3, [pc, #316]	; (80020fc <main+0x570>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d12a      	bne.n	800201c <main+0x490>
		 {

			 if(strcmp(binary_check, binary_pass) == 0)
 8001fc6:	4958      	ldr	r1, [pc, #352]	; (8002128 <main+0x59c>)
 8001fc8:	4858      	ldr	r0, [pc, #352]	; (800212c <main+0x5a0>)
 8001fca:	f7fe f921 	bl	8000210 <strcmp>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d111      	bne.n	8001ff8 <main+0x46c>
			 {
				 uint16_t finalSize = sprintf(toSend, "YES\r\n");
 8001fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd8:	4955      	ldr	r1, [pc, #340]	; (8002130 <main+0x5a4>)
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f006 fb22 	bl	8008624 <siprintf>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				 HAL_UART_Transmit(&huart2, (uint8_t *)toSend, finalSize, 100);
 8001fe6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8001fea:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001fee:	2364      	movs	r3, #100	; 0x64
 8001ff0:	4846      	ldr	r0, [pc, #280]	; (800210c <main+0x580>)
 8001ff2:	f004 fcd0 	bl	8006996 <HAL_UART_Transmit>
 8001ff6:	e07c      	b.n	80020f2 <main+0x566>
			 }
			 else
			 {
				 uint16_t finalSize = sprintf(toSend, "NO\r\n");
 8001ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ffc:	494d      	ldr	r1, [pc, #308]	; (8002134 <main+0x5a8>)
 8001ffe:	4618      	mov	r0, r3
 8002000:	f006 fb10 	bl	8008624 <siprintf>
 8002004:	4603      	mov	r3, r0
 8002006:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
				 HAL_UART_Transmit(&huart2, (uint8_t *)toSend, finalSize, 100);
 800200a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800200e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002012:	2364      	movs	r3, #100	; 0x64
 8002014:	483d      	ldr	r0, [pc, #244]	; (800210c <main+0x580>)
 8002016:	f004 fcbe 	bl	8006996 <HAL_UART_Transmit>
 800201a:	e06a      	b.n	80020f2 <main+0x566>
			 }
		 }

		 else if (readyToSend == 5)
 800201c:	4b37      	ldr	r3, [pc, #220]	; (80020fc <main+0x570>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b05      	cmp	r3, #5
 8002022:	d116      	bne.n	8002052 <main+0x4c6>
		 {
			 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002024:	2200      	movs	r2, #0
 8002026:	2104      	movs	r1, #4
 8002028:	483b      	ldr	r0, [pc, #236]	; (8002118 <main+0x58c>)
 800202a:	f001 fe83 	bl	8003d34 <HAL_GPIO_WritePin>
			 uint16_t finalSize = sprintf(toSend, "Diode off\r\n");
 800202e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002032:	4941      	ldr	r1, [pc, #260]	; (8002138 <main+0x5ac>)
 8002034:	4618      	mov	r0, r3
 8002036:	f006 faf5 	bl	8008624 <siprintf>
 800203a:	4603      	mov	r3, r0
 800203c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
			 HAL_UART_Transmit(&huart2, (uint8_t *)toSend, finalSize, 100);
 8002040:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8002044:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002048:	2364      	movs	r3, #100	; 0x64
 800204a:	4830      	ldr	r0, [pc, #192]	; (800210c <main+0x580>)
 800204c:	f004 fca3 	bl	8006996 <HAL_UART_Transmit>
 8002050:	e04f      	b.n	80020f2 <main+0x566>
		 }
		 else if (readyToSend == 6)
 8002052:	4b2a      	ldr	r3, [pc, #168]	; (80020fc <main+0x570>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b06      	cmp	r3, #6
 8002058:	d136      	bne.n	80020c8 <main+0x53c>
		 {
			 if(volume == 1)
 800205a:	4b38      	ldr	r3, [pc, #224]	; (800213c <main+0x5b0>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d11b      	bne.n	800209a <main+0x50e>
			 {
				 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8002062:	2201      	movs	r2, #1
 8002064:	2108      	movs	r1, #8
 8002066:	482c      	ldr	r0, [pc, #176]	; (8002118 <main+0x58c>)
 8002068:	f001 fe64 	bl	8003d34 <HAL_GPIO_WritePin>
				 uint16_t finalSize = sprintf(toSend, "OKK\r\n");
 800206c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002070:	4933      	ldr	r1, [pc, #204]	; (8002140 <main+0x5b4>)
 8002072:	4618      	mov	r0, r3
 8002074:	f006 fad6 	bl	8008624 <siprintf>
 8002078:	4603      	mov	r3, r0
 800207a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				 HAL_UART_Transmit(&huart2, (uint8_t *)toSend, finalSize, 100);
 800207e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8002082:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002086:	2364      	movs	r3, #100	; 0x64
 8002088:	4820      	ldr	r0, [pc, #128]	; (800210c <main+0x580>)
 800208a:	f004 fc84 	bl	8006996 <HAL_UART_Transmit>
				 volume = 0;
 800208e:	4b2b      	ldr	r3, [pc, #172]	; (800213c <main+0x5b0>)
 8002090:	2200      	movs	r2, #0
 8002092:	701a      	strb	r2, [r3, #0]
				 counter = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	66bb      	str	r3, [r7, #104]	; 0x68
 8002098:	e02b      	b.n	80020f2 <main+0x566>
			 }
			 else
			 {
				 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800209a:	2200      	movs	r2, #0
 800209c:	2108      	movs	r1, #8
 800209e:	481e      	ldr	r0, [pc, #120]	; (8002118 <main+0x58c>)
 80020a0:	f001 fe48 	bl	8003d34 <HAL_GPIO_WritePin>
				 uint16_t finalSize = sprintf(toSend, "NOT\r\n");
 80020a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a8:	4926      	ldr	r1, [pc, #152]	; (8002144 <main+0x5b8>)
 80020aa:	4618      	mov	r0, r3
 80020ac:	f006 faba 	bl	8008624 <siprintf>
 80020b0:	4603      	mov	r3, r0
 80020b2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				 HAL_UART_Transmit(&huart2, (uint8_t *)toSend, finalSize, 100);
 80020b6:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80020ba:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80020be:	2364      	movs	r3, #100	; 0x64
 80020c0:	4812      	ldr	r0, [pc, #72]	; (800210c <main+0x580>)
 80020c2:	f004 fc68 	bl	8006996 <HAL_UART_Transmit>
 80020c6:	e014      	b.n	80020f2 <main+0x566>
			 }
		 }

		 else if (readyToSend == 7) // command not found
 80020c8:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <main+0x570>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b07      	cmp	r3, #7
 80020ce:	d110      	bne.n	80020f2 <main+0x566>
		 {
			 uint16_t finalSize = sprintf(toSend, "unrecognized action\r\n");
 80020d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d4:	491c      	ldr	r1, [pc, #112]	; (8002148 <main+0x5bc>)
 80020d6:	4618      	mov	r0, r3
 80020d8:	f006 faa4 	bl	8008624 <siprintf>
 80020dc:	4603      	mov	r3, r0
 80020de:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
			 HAL_UART_Transmit(&huart2, (uint8_t *)toSend, finalSize, 100);
 80020e2:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 80020e6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80020ea:	2364      	movs	r3, #100	; 0x64
 80020ec:	4807      	ldr	r0, [pc, #28]	; (800210c <main+0x580>)
 80020ee:	f004 fc52 	bl	8006996 <HAL_UART_Transmit>
		 }

		 readyToSend = 0;
 80020f2:	4b02      	ldr	r3, [pc, #8]	; (80020fc <main+0x570>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	701a      	strb	r2, [r3, #0]
  {
 80020f8:	e5a0      	b.n	8001c3c <main+0xb0>
 80020fa:	bf00      	nop
 80020fc:	20000ef6 	.word	0x20000ef6
 8002100:	20000014 	.word	0x20000014
 8002104:	20000f00 	.word	0x20000f00
 8002108:	0800a8c8 	.word	0x0800a8c8
 800210c:	20000fa8 	.word	0x20000fa8
 8002110:	20000022 	.word	0x20000022
 8002114:	0800a8d0 	.word	0x0800a8d0
 8002118:	40020800 	.word	0x40020800
 800211c:	20000f10 	.word	0x20000f10
 8002120:	0800a8d8 	.word	0x0800a8d8
 8002124:	0800a8e0 	.word	0x0800a8e0
 8002128:	2000001c 	.word	0x2000001c
 800212c:	20000f08 	.word	0x20000f08
 8002130:	0800a8e8 	.word	0x0800a8e8
 8002134:	0800a8f0 	.word	0x0800a8f0
 8002138:	0800a8f8 	.word	0x0800a8f8
 800213c:	20000f11 	.word	0x20000f11
 8002140:	0800a904 	.word	0x0800a904
 8002144:	0800a90c 	.word	0x0800a90c
 8002148:	0800a914 	.word	0x0800a914

0800214c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b094      	sub	sp, #80	; 0x50
 8002150:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002152:	f107 031c 	add.w	r3, r7, #28
 8002156:	2234      	movs	r2, #52	; 0x34
 8002158:	2100      	movs	r1, #0
 800215a:	4618      	mov	r0, r3
 800215c:	f005 fc96 	bl	8007a8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002160:	f107 0308 	add.w	r3, r7, #8
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002170:	2300      	movs	r3, #0
 8002172:	607b      	str	r3, [r7, #4]
 8002174:	4b2a      	ldr	r3, [pc, #168]	; (8002220 <SystemClock_Config+0xd4>)
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	4a29      	ldr	r2, [pc, #164]	; (8002220 <SystemClock_Config+0xd4>)
 800217a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800217e:	6413      	str	r3, [r2, #64]	; 0x40
 8002180:	4b27      	ldr	r3, [pc, #156]	; (8002220 <SystemClock_Config+0xd4>)
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002188:	607b      	str	r3, [r7, #4]
 800218a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800218c:	2300      	movs	r3, #0
 800218e:	603b      	str	r3, [r7, #0]
 8002190:	4b24      	ldr	r3, [pc, #144]	; (8002224 <SystemClock_Config+0xd8>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002198:	4a22      	ldr	r2, [pc, #136]	; (8002224 <SystemClock_Config+0xd8>)
 800219a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	4b20      	ldr	r3, [pc, #128]	; (8002224 <SystemClock_Config+0xd8>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021a8:	603b      	str	r3, [r7, #0]
 80021aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021ac:	2302      	movs	r3, #2
 80021ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021b0:	2301      	movs	r3, #1
 80021b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021b4:	2310      	movs	r3, #16
 80021b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021b8:	2302      	movs	r3, #2
 80021ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021bc:	2300      	movs	r3, #0
 80021be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80021c0:	2310      	movs	r3, #16
 80021c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80021c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80021c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80021ca:	2304      	movs	r3, #4
 80021cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80021ce:	2302      	movs	r3, #2
 80021d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80021d2:	2302      	movs	r3, #2
 80021d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021d6:	f107 031c 	add.w	r3, r7, #28
 80021da:	4618      	mov	r0, r3
 80021dc:	f002 fd7e 	bl	8004cdc <HAL_RCC_OscConfig>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80021e6:	f000 f849 	bl	800227c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021ea:	230f      	movs	r3, #15
 80021ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021ee:	2302      	movs	r3, #2
 80021f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021f2:	2300      	movs	r3, #0
 80021f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021fc:	2300      	movs	r3, #0
 80021fe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002200:	f107 0308 	add.w	r3, r7, #8
 8002204:	2102      	movs	r1, #2
 8002206:	4618      	mov	r0, r3
 8002208:	f002 fa1e 	bl	8004648 <HAL_RCC_ClockConfig>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002212:	f000 f833 	bl	800227c <Error_Handler>
  }
}
 8002216:	bf00      	nop
 8002218:	3750      	adds	r7, #80	; 0x50
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40023800 	.word	0x40023800
 8002224:	40007000 	.word	0x40007000

08002228 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1) {
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a0d      	ldr	r2, [pc, #52]	; (800226c <HAL_TIM_IC_CaptureCallback+0x44>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d113      	bne.n	8002262 <HAL_TIM_IC_CaptureCallback+0x3a>
        if (HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET) {
 800223a:	2101      	movs	r1, #1
 800223c:	480c      	ldr	r0, [pc, #48]	; (8002270 <HAL_TIM_IC_CaptureCallback+0x48>)
 800223e:	f001 fd61 	bl	8003d04 <HAL_GPIO_ReadPin>
 8002242:	4603      	mov	r3, r0
 8002244:	2b01      	cmp	r3, #1
 8002246:	d104      	bne.n	8002252 <HAL_TIM_IC_CaptureCallback+0x2a>
            __HAL_TIM_SET_COUNTER(htim, 0); // Reset the counter
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2200      	movs	r2, #0
 800224e:	625a      	str	r2, [r3, #36]	; 0x24
        } else {
            pulse_duration = __HAL_TIM_GET_COUNTER(htim);
            capture_done = 1;
        }
    }
}
 8002250:	e007      	b.n	8002262 <HAL_TIM_IC_CaptureCallback+0x3a>
            pulse_duration = __HAL_TIM_GET_COUNTER(htim);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002258:	4a06      	ldr	r2, [pc, #24]	; (8002274 <HAL_TIM_IC_CaptureCallback+0x4c>)
 800225a:	6013      	str	r3, [r2, #0]
            capture_done = 1;
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <HAL_TIM_IC_CaptureCallback+0x50>)
 800225e:	2201      	movs	r2, #1
 8002260:	701a      	strb	r2, [r3, #0]
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40010000 	.word	0x40010000
 8002270:	40020000 	.word	0x40020000
 8002274:	200002c0 	.word	0x200002c0
 8002278:	200002c4 	.word	0x200002c4

0800227c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002280:	b672      	cpsid	i
}
 8002282:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002284:	e7fe      	b.n	8002284 <Error_Handler+0x8>
	...

08002288 <RingBuffer_Init>:
#include <assert.h>
#include "ring_buffer.h"


bool RingBuffer_Init(RingBuffer *ringBuffer, char *dataBuffer, size_t dataBufferSize)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
	assert(ringBuffer);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d105      	bne.n	80022a6 <RingBuffer_Init+0x1e>
 800229a:	4b1b      	ldr	r3, [pc, #108]	; (8002308 <RingBuffer_Init+0x80>)
 800229c:	4a1b      	ldr	r2, [pc, #108]	; (800230c <RingBuffer_Init+0x84>)
 800229e:	2108      	movs	r1, #8
 80022a0:	481b      	ldr	r0, [pc, #108]	; (8002310 <RingBuffer_Init+0x88>)
 80022a2:	f005 fb99 	bl	80079d8 <__assert_func>
	assert(dataBuffer);
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d105      	bne.n	80022b8 <RingBuffer_Init+0x30>
 80022ac:	4b19      	ldr	r3, [pc, #100]	; (8002314 <RingBuffer_Init+0x8c>)
 80022ae:	4a17      	ldr	r2, [pc, #92]	; (800230c <RingBuffer_Init+0x84>)
 80022b0:	2109      	movs	r1, #9
 80022b2:	4817      	ldr	r0, [pc, #92]	; (8002310 <RingBuffer_Init+0x88>)
 80022b4:	f005 fb90 	bl	80079d8 <__assert_func>
	assert(dataBufferSize > 0);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d105      	bne.n	80022ca <RingBuffer_Init+0x42>
 80022be:	4b16      	ldr	r3, [pc, #88]	; (8002318 <RingBuffer_Init+0x90>)
 80022c0:	4a12      	ldr	r2, [pc, #72]	; (800230c <RingBuffer_Init+0x84>)
 80022c2:	210a      	movs	r1, #10
 80022c4:	4812      	ldr	r0, [pc, #72]	; (8002310 <RingBuffer_Init+0x88>)
 80022c6:	f005 fb87 	bl	80079d8 <__assert_func>

	if ((ringBuffer) && (dataBuffer) && (dataBufferSize > 0)) {
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d016      	beq.n	80022fe <RingBuffer_Init+0x76>
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d013      	beq.n	80022fe <RingBuffer_Init+0x76>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d010      	beq.n	80022fe <RingBuffer_Init+0x76>
	  ringBuffer->buffer = dataBuffer;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	601a      	str	r2, [r3, #0]
	  ringBuffer->tail = 0;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	611a      	str	r2, [r3, #16]
	  ringBuffer->head = 0;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	60da      	str	r2, [r3, #12]
	  ringBuffer->max = dataBufferSize;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	609a      	str	r2, [r3, #8]
	  ringBuffer->length = 0;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	605a      	str	r2, [r3, #4]

	  return true;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e000      	b.n	8002300 <RingBuffer_Init+0x78>
	}


	return false;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	0800a92c 	.word	0x0800a92c
 800230c:	0800a99c 	.word	0x0800a99c
 8002310:	0800a938 	.word	0x0800a938
 8002314:	0800a954 	.word	0x0800a954
 8002318:	0800a960 	.word	0x0800a960

0800231c <RingBuffer_IsEmpty>:
	}
	return false;
}

bool RingBuffer_IsEmpty(const RingBuffer *ringBuffer)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  assert(ringBuffer);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d105      	bne.n	8002336 <RingBuffer_IsEmpty+0x1a>
 800232a:	4b08      	ldr	r3, [pc, #32]	; (800234c <RingBuffer_IsEmpty+0x30>)
 800232c:	4a08      	ldr	r2, [pc, #32]	; (8002350 <RingBuffer_IsEmpty+0x34>)
 800232e:	212b      	movs	r1, #43	; 0x2b
 8002330:	4808      	ldr	r0, [pc, #32]	; (8002354 <RingBuffer_IsEmpty+0x38>)
 8002332:	f005 fb51 	bl	80079d8 <__assert_func>
	return !ringBuffer->length;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	bf0c      	ite	eq
 800233e:	2301      	moveq	r3, #1
 8002340:	2300      	movne	r3, #0
 8002342:	b2db      	uxtb	r3, r3
}
 8002344:	4618      	mov	r0, r3
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	0800a92c 	.word	0x0800a92c
 8002350:	0800a9ac 	.word	0x0800a9ac
 8002354:	0800a938 	.word	0x0800a938

08002358 <RingBuffer_PutChar>:
	return 0;
}


bool RingBuffer_PutChar(RingBuffer *ringBuffer, char c)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	70fb      	strb	r3, [r7, #3]
	assert(ringBuffer);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d105      	bne.n	8002376 <RingBuffer_PutChar+0x1e>
 800236a:	4b18      	ldr	r3, [pc, #96]	; (80023cc <RingBuffer_PutChar+0x74>)
 800236c:	4a18      	ldr	r2, [pc, #96]	; (80023d0 <RingBuffer_PutChar+0x78>)
 800236e:	2147      	movs	r1, #71	; 0x47
 8002370:	4818      	ldr	r0, [pc, #96]	; (80023d4 <RingBuffer_PutChar+0x7c>)
 8002372:	f005 fb31 	bl	80079d8 <__assert_func>

	if (ringBuffer) {
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d021      	beq.n	80023c0 <RingBuffer_PutChar+0x68>

		if(ringBuffer->max - ringBuffer->length){
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	429a      	cmp	r2, r3
 8002386:	d01b      	beq.n	80023c0 <RingBuffer_PutChar+0x68>
		    ringBuffer->buffer[ringBuffer->head] = c;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4413      	add	r3, r2
 8002392:	78fa      	ldrb	r2, [r7, #3]
 8002394:	701a      	strb	r2, [r3, #0]
		    ringBuffer->length++;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	605a      	str	r2, [r3, #4]


		   ringBuffer->head = (ringBuffer->head + 1);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	60da      	str	r2, [r3, #12]
		   if(ringBuffer->head == (ringBuffer->max)){
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d102      	bne.n	80023bc <RingBuffer_PutChar+0x64>
		       ringBuffer->head = 0;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	60da      	str	r2, [r3, #12]
		   }


		   return true;
 80023bc:	2301      	movs	r3, #1
 80023be:	e000      	b.n	80023c2 <RingBuffer_PutChar+0x6a>
		}


	}
	return false;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	0800a92c 	.word	0x0800a92c
 80023d0:	0800a9c0 	.word	0x0800a9c0
 80023d4:	0800a938 	.word	0x0800a938

080023d8 <RingBuffer_GetChar>:

bool RingBuffer_GetChar(RingBuffer *ringBuffer, char *c)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
	assert(ringBuffer);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d105      	bne.n	80023f4 <RingBuffer_GetChar+0x1c>
 80023e8:	4b1f      	ldr	r3, [pc, #124]	; (8002468 <RingBuffer_GetChar+0x90>)
 80023ea:	4a20      	ldr	r2, [pc, #128]	; (800246c <RingBuffer_GetChar+0x94>)
 80023ec:	2160      	movs	r1, #96	; 0x60
 80023ee:	4820      	ldr	r0, [pc, #128]	; (8002470 <RingBuffer_GetChar+0x98>)
 80023f0:	f005 faf2 	bl	80079d8 <__assert_func>
	assert(c);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d105      	bne.n	8002406 <RingBuffer_GetChar+0x2e>
 80023fa:	4b1e      	ldr	r3, [pc, #120]	; (8002474 <RingBuffer_GetChar+0x9c>)
 80023fc:	4a1b      	ldr	r2, [pc, #108]	; (800246c <RingBuffer_GetChar+0x94>)
 80023fe:	2161      	movs	r1, #97	; 0x61
 8002400:	481b      	ldr	r0, [pc, #108]	; (8002470 <RingBuffer_GetChar+0x98>)
 8002402:	f005 fae9 	bl	80079d8 <__assert_func>

  if ((ringBuffer) && (c)) {
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d027      	beq.n	800245c <RingBuffer_GetChar+0x84>
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d024      	beq.n	800245c <RingBuffer_GetChar+0x84>

		if(RingBuffer_IsEmpty(ringBuffer)){
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff ff82 	bl	800231c <RingBuffer_IsEmpty>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <RingBuffer_GetChar+0x4a>
		    return false;
 800241e:	2300      	movs	r3, #0
 8002420:	e01d      	b.n	800245e <RingBuffer_GetChar+0x86>
		}

		*c = ringBuffer->buffer[ringBuffer->tail];
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	4413      	add	r3, r2
 800242c:	781a      	ldrb	r2, [r3, #0]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	701a      	strb	r2, [r3, #0]

		ringBuffer-> tail = (ringBuffer->tail + 1);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	1c5a      	adds	r2, r3, #1
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	611a      	str	r2, [r3, #16]
		   if(ringBuffer-> tail == ringBuffer->max){
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691a      	ldr	r2, [r3, #16]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	429a      	cmp	r2, r3
 8002446:	d102      	bne.n	800244e <RingBuffer_GetChar+0x76>
		       ringBuffer->tail = 0;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	611a      	str	r2, [r3, #16]
		   }
		ringBuffer->length--;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	1e5a      	subs	r2, r3, #1
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	605a      	str	r2, [r3, #4]
		return true;
 8002458:	2301      	movs	r3, #1
 800245a:	e000      	b.n	800245e <RingBuffer_GetChar+0x86>
	}
	return false;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	0800a92c 	.word	0x0800a92c
 800246c:	0800a9d4 	.word	0x0800a9d4
 8002470:	0800a938 	.word	0x0800a938
 8002474:	0800a974 	.word	0x0800a974

08002478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	607b      	str	r3, [r7, #4]
 8002482:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <HAL_MspInit+0x4c>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	4a0f      	ldr	r2, [pc, #60]	; (80024c4 <HAL_MspInit+0x4c>)
 8002488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800248c:	6453      	str	r3, [r2, #68]	; 0x44
 800248e:	4b0d      	ldr	r3, [pc, #52]	; (80024c4 <HAL_MspInit+0x4c>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002496:	607b      	str	r3, [r7, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	603b      	str	r3, [r7, #0]
 800249e:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <HAL_MspInit+0x4c>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	4a08      	ldr	r2, [pc, #32]	; (80024c4 <HAL_MspInit+0x4c>)
 80024a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a8:	6413      	str	r3, [r2, #64]	; 0x40
 80024aa:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <HAL_MspInit+0x4c>)
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b2:	603b      	str	r3, [r7, #0]
 80024b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80024b6:	2007      	movs	r0, #7
 80024b8:	f001 f9bc 	bl	8003834 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024bc:	bf00      	nop
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40023800 	.word	0x40023800

080024c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024cc:	e7fe      	b.n	80024cc <NMI_Handler+0x4>

080024ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ce:	b480      	push	{r7}
 80024d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024d2:	e7fe      	b.n	80024d2 <HardFault_Handler+0x4>

080024d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024d8:	e7fe      	b.n	80024d8 <MemManage_Handler+0x4>

080024da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024da:	b480      	push	{r7}
 80024dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024de:	e7fe      	b.n	80024de <BusFault_Handler+0x4>

080024e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024e4:	e7fe      	b.n	80024e4 <UsageFault_Handler+0x4>

080024e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024e6:	b480      	push	{r7}
 80024e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002502:	b480      	push	{r7}
 8002504:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002514:	f000 fc6a 	bl	8002dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002518:	bf00      	nop
 800251a:	bd80      	pop	{r7, pc}

0800251c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002520:	4802      	ldr	r0, [pc, #8]	; (800252c <TIM1_CC_IRQHandler+0x10>)
 8002522:	f003 f991 	bl	8005848 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20000f18 	.word	0x20000f18

08002530 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002534:	4802      	ldr	r0, [pc, #8]	; (8002540 <USART2_IRQHandler+0x10>)
 8002536:	f004 faf1 	bl	8006b1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	20000fa8 	.word	0x20000fa8

08002544 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
//	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002548:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800254c:	f001 fc0c 	bl	8003d68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002550:	bf00      	nop
 8002552:	bd80      	pop	{r7, pc}

08002554 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
	return 1;
 8002558:	2301      	movs	r3, #1
}
 800255a:	4618      	mov	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <_kill>:

int _kill(int pid, int sig)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800256e:	f005 fa51 	bl	8007a14 <__errno>
 8002572:	4603      	mov	r3, r0
 8002574:	2216      	movs	r2, #22
 8002576:	601a      	str	r2, [r3, #0]
	return -1;
 8002578:	f04f 33ff 	mov.w	r3, #4294967295
}
 800257c:	4618      	mov	r0, r3
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <_exit>:

void _exit (int status)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800258c:	f04f 31ff 	mov.w	r1, #4294967295
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7ff ffe7 	bl	8002564 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002596:	e7fe      	b.n	8002596 <_exit+0x12>

08002598 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]
 80025a8:	e00a      	b.n	80025c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025aa:	f3af 8000 	nop.w
 80025ae:	4601      	mov	r1, r0
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	60ba      	str	r2, [r7, #8]
 80025b6:	b2ca      	uxtb	r2, r1
 80025b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	3301      	adds	r3, #1
 80025be:	617b      	str	r3, [r7, #20]
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	dbf0      	blt.n	80025aa <_read+0x12>
	}

return len;
 80025c8:	687b      	ldr	r3, [r7, #4]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3718      	adds	r7, #24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b086      	sub	sp, #24
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	60f8      	str	r0, [r7, #12]
 80025da:	60b9      	str	r1, [r7, #8]
 80025dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025de:	2300      	movs	r3, #0
 80025e0:	617b      	str	r3, [r7, #20]
 80025e2:	e009      	b.n	80025f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	1c5a      	adds	r2, r3, #1
 80025e8:	60ba      	str	r2, [r7, #8]
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f000 fa21 	bl	8002a34 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	3301      	adds	r3, #1
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	dbf1      	blt.n	80025e4 <_write+0x12>
	}
	return len;
 8002600:	687b      	ldr	r3, [r7, #4]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <_close>:

int _close(int file)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
	return -1;
 8002612:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002616:	4618      	mov	r0, r3
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002632:	605a      	str	r2, [r3, #4]
	return 0;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <_isatty>:

int _isatty(int file)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
	return 1;
 800264a:	2301      	movs	r3, #1
}
 800264c:	4618      	mov	r0, r3
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
	return 0;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
	...

08002674 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800267c:	4a14      	ldr	r2, [pc, #80]	; (80026d0 <_sbrk+0x5c>)
 800267e:	4b15      	ldr	r3, [pc, #84]	; (80026d4 <_sbrk+0x60>)
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002688:	4b13      	ldr	r3, [pc, #76]	; (80026d8 <_sbrk+0x64>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d102      	bne.n	8002696 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002690:	4b11      	ldr	r3, [pc, #68]	; (80026d8 <_sbrk+0x64>)
 8002692:	4a12      	ldr	r2, [pc, #72]	; (80026dc <_sbrk+0x68>)
 8002694:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002696:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <_sbrk+0x64>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4413      	add	r3, r2
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d207      	bcs.n	80026b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026a4:	f005 f9b6 	bl	8007a14 <__errno>
 80026a8:	4603      	mov	r3, r0
 80026aa:	220c      	movs	r2, #12
 80026ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026ae:	f04f 33ff 	mov.w	r3, #4294967295
 80026b2:	e009      	b.n	80026c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026b4:	4b08      	ldr	r3, [pc, #32]	; (80026d8 <_sbrk+0x64>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ba:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <_sbrk+0x64>)
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4413      	add	r3, r2
 80026c2:	4a05      	ldr	r2, [pc, #20]	; (80026d8 <_sbrk+0x64>)
 80026c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026c6:	68fb      	ldr	r3, [r7, #12]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	20020000 	.word	0x20020000
 80026d4:	00000400 	.word	0x00000400
 80026d8:	20000f14 	.word	0x20000f14
 80026dc:	20001000 	.word	0x20001000

080026e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026e4:	4b06      	ldr	r3, [pc, #24]	; (8002700 <SystemInit+0x20>)
 80026e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ea:	4a05      	ldr	r2, [pc, #20]	; (8002700 <SystemInit+0x20>)
 80026ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026f4:	bf00      	nop
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800270a:	f107 0308 	add.w	r3, r7, #8
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	605a      	str	r2, [r3, #4]
 8002714:	609a      	str	r2, [r3, #8]
 8002716:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002718:	463b      	mov	r3, r7
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002720:	4b1f      	ldr	r3, [pc, #124]	; (80027a0 <MX_TIM1_Init+0x9c>)
 8002722:	4a20      	ldr	r2, [pc, #128]	; (80027a4 <MX_TIM1_Init+0xa0>)
 8002724:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 8002726:	4b1e      	ldr	r3, [pc, #120]	; (80027a0 <MX_TIM1_Init+0x9c>)
 8002728:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800272c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800272e:	4b1c      	ldr	r3, [pc, #112]	; (80027a0 <MX_TIM1_Init+0x9c>)
 8002730:	2200      	movs	r2, #0
 8002732:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002734:	4b1a      	ldr	r3, [pc, #104]	; (80027a0 <MX_TIM1_Init+0x9c>)
 8002736:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800273a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800273c:	4b18      	ldr	r3, [pc, #96]	; (80027a0 <MX_TIM1_Init+0x9c>)
 800273e:	2200      	movs	r2, #0
 8002740:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002742:	4b17      	ldr	r3, [pc, #92]	; (80027a0 <MX_TIM1_Init+0x9c>)
 8002744:	2200      	movs	r2, #0
 8002746:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002748:	4b15      	ldr	r3, [pc, #84]	; (80027a0 <MX_TIM1_Init+0x9c>)
 800274a:	2200      	movs	r2, #0
 800274c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800274e:	4814      	ldr	r0, [pc, #80]	; (80027a0 <MX_TIM1_Init+0x9c>)
 8002750:	f002 fd62 	bl	8005218 <HAL_TIM_Base_Init>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800275a:	f7ff fd8f 	bl	800227c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800275e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002762:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002764:	f107 0308 	add.w	r3, r7, #8
 8002768:	4619      	mov	r1, r3
 800276a:	480d      	ldr	r0, [pc, #52]	; (80027a0 <MX_TIM1_Init+0x9c>)
 800276c:	f003 fad2 	bl	8005d14 <HAL_TIM_ConfigClockSource>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002776:	f7ff fd81 	bl	800227c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800277a:	2300      	movs	r3, #0
 800277c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800277e:	2300      	movs	r3, #0
 8002780:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002782:	463b      	mov	r3, r7
 8002784:	4619      	mov	r1, r3
 8002786:	4806      	ldr	r0, [pc, #24]	; (80027a0 <MX_TIM1_Init+0x9c>)
 8002788:	f004 f828 	bl	80067dc <HAL_TIMEx_MasterConfigSynchronization>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002792:	f7ff fd73 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002796:	bf00      	nop
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000f18 	.word	0x20000f18
 80027a4:	40010000 	.word	0x40010000

080027a8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b092      	sub	sp, #72	; 0x48
 80027ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	605a      	str	r2, [r3, #4]
 80027b8:	609a      	str	r2, [r3, #8]
 80027ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80027c6:	f107 0320 	add.w	r3, r7, #32
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	605a      	str	r2, [r3, #4]
 80027d0:	609a      	str	r2, [r3, #8]
 80027d2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027d4:	1d3b      	adds	r3, r7, #4
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	605a      	str	r2, [r3, #4]
 80027dc:	609a      	str	r2, [r3, #8]
 80027de:	60da      	str	r2, [r3, #12]
 80027e0:	611a      	str	r2, [r3, #16]
 80027e2:	615a      	str	r2, [r3, #20]
 80027e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027e6:	4b43      	ldr	r3, [pc, #268]	; (80028f4 <MX_TIM2_Init+0x14c>)
 80027e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 80027ee:	4b41      	ldr	r3, [pc, #260]	; (80028f4 <MX_TIM2_Init+0x14c>)
 80027f0:	224f      	movs	r2, #79	; 0x4f
 80027f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027f4:	4b3f      	ldr	r3, [pc, #252]	; (80028f4 <MX_TIM2_Init+0x14c>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999999;
 80027fa:	4b3e      	ldr	r3, [pc, #248]	; (80028f4 <MX_TIM2_Init+0x14c>)
 80027fc:	4a3e      	ldr	r2, [pc, #248]	; (80028f8 <MX_TIM2_Init+0x150>)
 80027fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002800:	4b3c      	ldr	r3, [pc, #240]	; (80028f4 <MX_TIM2_Init+0x14c>)
 8002802:	2200      	movs	r2, #0
 8002804:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002806:	4b3b      	ldr	r3, [pc, #236]	; (80028f4 <MX_TIM2_Init+0x14c>)
 8002808:	2200      	movs	r2, #0
 800280a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800280c:	4839      	ldr	r0, [pc, #228]	; (80028f4 <MX_TIM2_Init+0x14c>)
 800280e:	f002 fd03 	bl	8005218 <HAL_TIM_Base_Init>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002818:	f7ff fd30 	bl	800227c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800281c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002820:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002822:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002826:	4619      	mov	r1, r3
 8002828:	4832      	ldr	r0, [pc, #200]	; (80028f4 <MX_TIM2_Init+0x14c>)
 800282a:	f003 fa73 	bl	8005d14 <HAL_TIM_ConfigClockSource>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002834:	f7ff fd22 	bl	800227c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002838:	482e      	ldr	r0, [pc, #184]	; (80028f4 <MX_TIM2_Init+0x14c>)
 800283a:	f002 fecf 	bl	80055dc <HAL_TIM_IC_Init>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002844:	f7ff fd1a 	bl	800227c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002848:	482a      	ldr	r0, [pc, #168]	; (80028f4 <MX_TIM2_Init+0x14c>)
 800284a:	f002 fda5 	bl	8005398 <HAL_TIM_PWM_Init>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002854:	f7ff fd12 	bl	800227c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002858:	2300      	movs	r3, #0
 800285a:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800285c:	2300      	movs	r3, #0
 800285e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002860:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002864:	4619      	mov	r1, r3
 8002866:	4823      	ldr	r0, [pc, #140]	; (80028f4 <MX_TIM2_Init+0x14c>)
 8002868:	f003 ffb8 	bl	80067dc <HAL_TIMEx_MasterConfigSynchronization>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 8002872:	f7ff fd03 	bl	800227c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002876:	2300      	movs	r3, #0
 8002878:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800287a:	2301      	movs	r3, #1
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800287e:	2300      	movs	r3, #0
 8002880:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICFilter = 0;
 8002882:	2300      	movs	r3, #0
 8002884:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002886:	f107 0320 	add.w	r3, r7, #32
 800288a:	2200      	movs	r2, #0
 800288c:	4619      	mov	r1, r3
 800288e:	4819      	ldr	r0, [pc, #100]	; (80028f4 <MX_TIM2_Init+0x14c>)
 8002890:	f003 f8e2 	bl	8005a58 <HAL_TIM_IC_ConfigChannel>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 800289a:	f7ff fcef 	bl	800227c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800289e:	2302      	movs	r3, #2
 80028a0:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80028a2:	2302      	movs	r3, #2
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80028a6:	f107 0320 	add.w	r3, r7, #32
 80028aa:	2204      	movs	r2, #4
 80028ac:	4619      	mov	r1, r3
 80028ae:	4811      	ldr	r0, [pc, #68]	; (80028f4 <MX_TIM2_Init+0x14c>)
 80028b0:	f003 f8d2 	bl	8005a58 <HAL_TIM_IC_ConfigChannel>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <MX_TIM2_Init+0x116>
  {
    Error_Handler();
 80028ba:	f7ff fcdf 	bl	800227c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028be:	2360      	movs	r3, #96	; 0x60
 80028c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 80028c2:	230a      	movs	r3, #10
 80028c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80028ce:	1d3b      	adds	r3, r7, #4
 80028d0:	2208      	movs	r2, #8
 80028d2:	4619      	mov	r1, r3
 80028d4:	4807      	ldr	r0, [pc, #28]	; (80028f4 <MX_TIM2_Init+0x14c>)
 80028d6:	f003 f95b 	bl	8005b90 <HAL_TIM_PWM_ConfigChannel>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <MX_TIM2_Init+0x13c>
  {
    Error_Handler();
 80028e0:	f7ff fccc 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80028e4:	4803      	ldr	r0, [pc, #12]	; (80028f4 <MX_TIM2_Init+0x14c>)
 80028e6:	f000 f86d 	bl	80029c4 <HAL_TIM_MspPostInit>

}
 80028ea:	bf00      	nop
 80028ec:	3748      	adds	r7, #72	; 0x48
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20000f60 	.word	0x20000f60
 80028f8:	000f423f 	.word	0x000f423f

080028fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08a      	sub	sp, #40	; 0x28
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002904:	f107 0314 	add.w	r3, r7, #20
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	605a      	str	r2, [r3, #4]
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	60da      	str	r2, [r3, #12]
 8002912:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a27      	ldr	r2, [pc, #156]	; (80029b8 <HAL_TIM_Base_MspInit+0xbc>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d116      	bne.n	800294c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	4b26      	ldr	r3, [pc, #152]	; (80029bc <HAL_TIM_Base_MspInit+0xc0>)
 8002924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002926:	4a25      	ldr	r2, [pc, #148]	; (80029bc <HAL_TIM_Base_MspInit+0xc0>)
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	6453      	str	r3, [r2, #68]	; 0x44
 800292e:	4b23      	ldr	r3, [pc, #140]	; (80029bc <HAL_TIM_Base_MspInit+0xc0>)
 8002930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	693b      	ldr	r3, [r7, #16]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800293a:	2200      	movs	r2, #0
 800293c:	2100      	movs	r1, #0
 800293e:	201b      	movs	r0, #27
 8002940:	f000 ff83 	bl	800384a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002944:	201b      	movs	r0, #27
 8002946:	f000 ff9c 	bl	8003882 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800294a:	e030      	b.n	80029ae <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM2)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002954:	d12b      	bne.n	80029ae <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	4b18      	ldr	r3, [pc, #96]	; (80029bc <HAL_TIM_Base_MspInit+0xc0>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	4a17      	ldr	r2, [pc, #92]	; (80029bc <HAL_TIM_Base_MspInit+0xc0>)
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	6413      	str	r3, [r2, #64]	; 0x40
 8002966:	4b15      	ldr	r3, [pc, #84]	; (80029bc <HAL_TIM_Base_MspInit+0xc0>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	4b11      	ldr	r3, [pc, #68]	; (80029bc <HAL_TIM_Base_MspInit+0xc0>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	4a10      	ldr	r2, [pc, #64]	; (80029bc <HAL_TIM_Base_MspInit+0xc0>)
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	6313      	str	r3, [r2, #48]	; 0x30
 8002982:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <HAL_TIM_Base_MspInit+0xc0>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	60bb      	str	r3, [r7, #8]
 800298c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ECHO_Pin;
 800298e:	2301      	movs	r3, #1
 8002990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002992:	2302      	movs	r3, #2
 8002994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002996:	2300      	movs	r3, #0
 8002998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299a:	2300      	movs	r3, #0
 800299c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800299e:	2301      	movs	r3, #1
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 80029a2:	f107 0314 	add.w	r3, r7, #20
 80029a6:	4619      	mov	r1, r3
 80029a8:	4805      	ldr	r0, [pc, #20]	; (80029c0 <HAL_TIM_Base_MspInit+0xc4>)
 80029aa:	f001 f817 	bl	80039dc <HAL_GPIO_Init>
}
 80029ae:	bf00      	nop
 80029b0:	3728      	adds	r7, #40	; 0x28
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40010000 	.word	0x40010000
 80029bc:	40023800 	.word	0x40023800
 80029c0:	40020000 	.word	0x40020000

080029c4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b088      	sub	sp, #32
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029cc:	f107 030c 	add.w	r3, r7, #12
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	60da      	str	r2, [r3, #12]
 80029da:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e4:	d11e      	bne.n	8002a24 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	60bb      	str	r3, [r7, #8]
 80029ea:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <HAL_TIM_MspPostInit+0x68>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	4a0f      	ldr	r2, [pc, #60]	; (8002a2c <HAL_TIM_MspPostInit+0x68>)
 80029f0:	f043 0302 	orr.w	r3, r3, #2
 80029f4:	6313      	str	r3, [r2, #48]	; 0x30
 80029f6:	4b0d      	ldr	r3, [pc, #52]	; (8002a2c <HAL_TIM_MspPostInit+0x68>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	60bb      	str	r3, [r7, #8]
 8002a00:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = TRIG_Pin;
 8002a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a06:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a10:	2300      	movs	r3, #0
 8002a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a14:	2301      	movs	r3, #1
 8002a16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8002a18:	f107 030c 	add.w	r3, r7, #12
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4804      	ldr	r0, [pc, #16]	; (8002a30 <HAL_TIM_MspPostInit+0x6c>)
 8002a20:	f000 ffdc 	bl	80039dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002a24:	bf00      	nop
 8002a26:	3720      	adds	r7, #32
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	40020400 	.word	0x40020400

08002a34 <__io_putchar>:
extern uint8_t readyToRead;
// flag controlling the sending of data from the sensor
extern uint8_t readyToSend;

int __io_putchar(int ch)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b0a      	cmp	r3, #10
 8002a40:	d109      	bne.n	8002a56 <__io_putchar+0x22>
	{
		uint8_t ch2 = '\r';
 8002a42:	230d      	movs	r3, #13
 8002a44:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 8002a46:	f107 010f 	add.w	r1, r7, #15
 8002a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a4e:	2201      	movs	r2, #1
 8002a50:	4807      	ldr	r0, [pc, #28]	; (8002a70 <__io_putchar+0x3c>)
 8002a52:	f003 ffa0 	bl	8006996 <HAL_UART_Transmit>
	}

	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002a56:	1d39      	adds	r1, r7, #4
 8002a58:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	4804      	ldr	r0, [pc, #16]	; (8002a70 <__io_putchar+0x3c>)
 8002a60:	f003 ff99 	bl	8006996 <HAL_UART_Transmit>
	return 1;
 8002a64:	2301      	movs	r3, #1
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000fa8 	.word	0x20000fa8

08002a74 <UART_GetChar>:
{
	return UART_WriteData(string, strlen(string) + 2);
}

bool UART_GetChar(char *c)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
	bool temp = RingBuffer_GetChar(&UART_RingBuffer_Rx, c);
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	4805      	ldr	r0, [pc, #20]	; (8002a94 <UART_GetChar+0x20>)
 8002a80:	f7ff fcaa 	bl	80023d8 <RingBuffer_GetChar>
 8002a84:	4603      	mov	r3, r0
 8002a86:	73fb      	strb	r3, [r7, #15]
	return temp;
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	200006e0 	.word	0x200006e0

08002a98 <UART_ReadData>:

size_t UART_ReadData(char *data, size_t maxSize)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]

	size_t i = 0;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60fb      	str	r3, [r7, #12]

	while (maxSize > i)
 8002aa6:	e010      	b.n	8002aca <UART_ReadData+0x32>
	{

		if (!UART_GetChar(data + i))
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4413      	add	r3, r2
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff ffe0 	bl	8002a74 <UART_GetChar>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	f083 0301 	eor.w	r3, r3, #1
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <UART_ReadData+0x2c>
		{
			return i;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	e007      	b.n	8002ad4 <UART_ReadData+0x3c>
		}
		i++;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	60fb      	str	r3, [r7, #12]
	while (maxSize > i)
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d8ea      	bhi.n	8002aa8 <UART_ReadData+0x10>
	}
	return i;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <char_append>:

void char_append(uint8_t value)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	71fb      	strb	r3, [r7, #7]
	if (value == '\r' || value == '\n')
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	2b0d      	cmp	r3, #13
 8002aea:	d002      	beq.n	8002af2 <char_append+0x16>
 8002aec:	79fb      	ldrb	r3, [r7, #7]
 8002aee:	2b0a      	cmp	r3, #10
 8002af0:	d103      	bne.n	8002afa <char_append+0x1e>
	{ // end of line
		readyToRead = 1;
 8002af2:	4b07      	ldr	r3, [pc, #28]	; (8002b10 <char_append+0x34>)
 8002af4:	2201      	movs	r2, #1
 8002af6:	701a      	strb	r2, [r3, #0]
 8002af8:	e006      	b.n	8002b08 <char_append+0x2c>
	}
	else
	{
		RingBuffer_PutChar(&UART_RingBuffer_Rx, uart_rx_buffer);
 8002afa:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <char_append+0x38>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	4619      	mov	r1, r3
 8002b00:	4805      	ldr	r0, [pc, #20]	; (8002b18 <char_append+0x3c>)
 8002b02:	f7ff fc29 	bl	8002358 <RingBuffer_PutChar>
	}
}
 8002b06:	bf00      	nop
 8002b08:	bf00      	nop
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	20000ef5 	.word	0x20000ef5
 8002b14:	20000ef4 	.word	0x20000ef4
 8002b18:	200006e0 	.word	0x200006e0

08002b1c <UART_ReadResponse>:

void UART_ReadResponse()
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0

	if (!RingBuffer_IsEmpty(&UART_RingBuffer_Rx))
 8002b22:	482e      	ldr	r0, [pc, #184]	; (8002bdc <UART_ReadResponse+0xc0>)
 8002b24:	f7ff fbfa 	bl	800231c <RingBuffer_IsEmpty>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	f083 0301 	eor.w	r3, r3, #1
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d04e      	beq.n	8002bd2 <UART_ReadResponse+0xb6>
	{
		size_t responseSize = UART_ReadData(&Response_Rx, 10);
 8002b34:	210a      	movs	r1, #10
 8002b36:	482a      	ldr	r0, [pc, #168]	; (8002be0 <UART_ReadResponse+0xc4>)
 8002b38:	f7ff ffae 	bl	8002a98 <UART_ReadData>
 8002b3c:	6078      	str	r0, [r7, #4]
		Response_Rx[responseSize] = '\0';
 8002b3e:	4a28      	ldr	r2, [pc, #160]	; (8002be0 <UART_ReadResponse+0xc4>)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4413      	add	r3, r2
 8002b44:	2200      	movs	r2, #0
 8002b46:	701a      	strb	r2, [r3, #0]

		if (strcmp(Response_Rx, "repair") == 0)
 8002b48:	4926      	ldr	r1, [pc, #152]	; (8002be4 <UART_ReadResponse+0xc8>)
 8002b4a:	4825      	ldr	r0, [pc, #148]	; (8002be0 <UART_ReadResponse+0xc4>)
 8002b4c:	f7fd fb60 	bl	8000210 <strcmp>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d103      	bne.n	8002b5e <UART_ReadResponse+0x42>
		{
			readyToSend = 1;
 8002b56:	4b24      	ldr	r3, [pc, #144]	; (8002be8 <UART_ReadResponse+0xcc>)
 8002b58:	2201      	movs	r2, #1
 8002b5a:	701a      	strb	r2, [r3, #0]
		}
	}
	else
	{
	}
}
 8002b5c:	e039      	b.n	8002bd2 <UART_ReadResponse+0xb6>
		else if (strcmp(Response_Rx, "key") == 0)
 8002b5e:	4923      	ldr	r1, [pc, #140]	; (8002bec <UART_ReadResponse+0xd0>)
 8002b60:	481f      	ldr	r0, [pc, #124]	; (8002be0 <UART_ReadResponse+0xc4>)
 8002b62:	f7fd fb55 	bl	8000210 <strcmp>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d103      	bne.n	8002b74 <UART_ReadResponse+0x58>
			readyToSend = 2;
 8002b6c:	4b1e      	ldr	r3, [pc, #120]	; (8002be8 <UART_ReadResponse+0xcc>)
 8002b6e:	2202      	movs	r2, #2
 8002b70:	701a      	strb	r2, [r3, #0]
}
 8002b72:	e02e      	b.n	8002bd2 <UART_ReadResponse+0xb6>
		else if (strcmp(Response_Rx, "diode") == 0)
 8002b74:	491e      	ldr	r1, [pc, #120]	; (8002bf0 <UART_ReadResponse+0xd4>)
 8002b76:	481a      	ldr	r0, [pc, #104]	; (8002be0 <UART_ReadResponse+0xc4>)
 8002b78:	f7fd fb4a 	bl	8000210 <strcmp>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d103      	bne.n	8002b8a <UART_ReadResponse+0x6e>
			readyToSend = 3;
 8002b82:	4b19      	ldr	r3, [pc, #100]	; (8002be8 <UART_ReadResponse+0xcc>)
 8002b84:	2203      	movs	r2, #3
 8002b86:	701a      	strb	r2, [r3, #0]
}
 8002b88:	e023      	b.n	8002bd2 <UART_ReadResponse+0xb6>
		else if (strcmp(Response_Rx, "lcd") == 0)
 8002b8a:	491a      	ldr	r1, [pc, #104]	; (8002bf4 <UART_ReadResponse+0xd8>)
 8002b8c:	4814      	ldr	r0, [pc, #80]	; (8002be0 <UART_ReadResponse+0xc4>)
 8002b8e:	f7fd fb3f 	bl	8000210 <strcmp>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d103      	bne.n	8002ba0 <UART_ReadResponse+0x84>
			readyToSend = 4;
 8002b98:	4b13      	ldr	r3, [pc, #76]	; (8002be8 <UART_ReadResponse+0xcc>)
 8002b9a:	2204      	movs	r2, #4
 8002b9c:	701a      	strb	r2, [r3, #0]
}
 8002b9e:	e018      	b.n	8002bd2 <UART_ReadResponse+0xb6>
		else if (strcmp(Response_Rx, "off") == 0)
 8002ba0:	4915      	ldr	r1, [pc, #84]	; (8002bf8 <UART_ReadResponse+0xdc>)
 8002ba2:	480f      	ldr	r0, [pc, #60]	; (8002be0 <UART_ReadResponse+0xc4>)
 8002ba4:	f7fd fb34 	bl	8000210 <strcmp>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d103      	bne.n	8002bb6 <UART_ReadResponse+0x9a>
			readyToSend = 5;
 8002bae:	4b0e      	ldr	r3, [pc, #56]	; (8002be8 <UART_ReadResponse+0xcc>)
 8002bb0:	2205      	movs	r2, #5
 8002bb2:	701a      	strb	r2, [r3, #0]
}
 8002bb4:	e00d      	b.n	8002bd2 <UART_ReadResponse+0xb6>
		else if (strcmp(Response_Rx, "volume") == 0)
 8002bb6:	4911      	ldr	r1, [pc, #68]	; (8002bfc <UART_ReadResponse+0xe0>)
 8002bb8:	4809      	ldr	r0, [pc, #36]	; (8002be0 <UART_ReadResponse+0xc4>)
 8002bba:	f7fd fb29 	bl	8000210 <strcmp>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d103      	bne.n	8002bcc <UART_ReadResponse+0xb0>
			readyToSend = 6;
 8002bc4:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <UART_ReadResponse+0xcc>)
 8002bc6:	2206      	movs	r2, #6
 8002bc8:	701a      	strb	r2, [r3, #0]
}
 8002bca:	e002      	b.n	8002bd2 <UART_ReadResponse+0xb6>
			readyToSend = 7;
 8002bcc:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <UART_ReadResponse+0xcc>)
 8002bce:	2207      	movs	r2, #7
 8002bd0:	701a      	strb	r2, [r3, #0]
}
 8002bd2:	bf00      	nop
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	200006e0 	.word	0x200006e0
 8002be0:	20000af4 	.word	0x20000af4
 8002be4:	0800a978 	.word	0x0800a978
 8002be8:	20000ef6 	.word	0x20000ef6
 8002bec:	0800a980 	.word	0x0800a980
 8002bf0:	0800a984 	.word	0x0800a984
 8002bf4:	0800a98c 	.word	0x0800a98c
 8002bf8:	0800a990 	.word	0x0800a990
 8002bfc:	0800a994 	.word	0x0800a994

08002c00 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c04:	4b11      	ldr	r3, [pc, #68]	; (8002c4c <MX_USART2_UART_Init+0x4c>)
 8002c06:	4a12      	ldr	r2, [pc, #72]	; (8002c50 <MX_USART2_UART_Init+0x50>)
 8002c08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c0a:	4b10      	ldr	r3, [pc, #64]	; (8002c4c <MX_USART2_UART_Init+0x4c>)
 8002c0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c12:	4b0e      	ldr	r3, [pc, #56]	; (8002c4c <MX_USART2_UART_Init+0x4c>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c18:	4b0c      	ldr	r3, [pc, #48]	; (8002c4c <MX_USART2_UART_Init+0x4c>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c1e:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <MX_USART2_UART_Init+0x4c>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c24:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <MX_USART2_UART_Init+0x4c>)
 8002c26:	220c      	movs	r2, #12
 8002c28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c2a:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <MX_USART2_UART_Init+0x4c>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c30:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <MX_USART2_UART_Init+0x4c>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c36:	4805      	ldr	r0, [pc, #20]	; (8002c4c <MX_USART2_UART_Init+0x4c>)
 8002c38:	f003 fe60 	bl	80068fc <HAL_UART_Init>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002c42:	f7ff fb1b 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000fa8 	.word	0x20000fa8
 8002c50:	40004400 	.word	0x40004400

08002c54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08a      	sub	sp, #40	; 0x28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c5c:	f107 0314 	add.w	r3, r7, #20
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	605a      	str	r2, [r3, #4]
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	60da      	str	r2, [r3, #12]
 8002c6a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a1d      	ldr	r2, [pc, #116]	; (8002ce8 <HAL_UART_MspInit+0x94>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d133      	bne.n	8002cde <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	613b      	str	r3, [r7, #16]
 8002c7a:	4b1c      	ldr	r3, [pc, #112]	; (8002cec <HAL_UART_MspInit+0x98>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	4a1b      	ldr	r2, [pc, #108]	; (8002cec <HAL_UART_MspInit+0x98>)
 8002c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c84:	6413      	str	r3, [r2, #64]	; 0x40
 8002c86:	4b19      	ldr	r3, [pc, #100]	; (8002cec <HAL_UART_MspInit+0x98>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	4b15      	ldr	r3, [pc, #84]	; (8002cec <HAL_UART_MspInit+0x98>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	4a14      	ldr	r2, [pc, #80]	; (8002cec <HAL_UART_MspInit+0x98>)
 8002c9c:	f043 0301 	orr.w	r3, r3, #1
 8002ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca2:	4b12      	ldr	r3, [pc, #72]	; (8002cec <HAL_UART_MspInit+0x98>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002cae:	230c      	movs	r3, #12
 8002cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002cbe:	2307      	movs	r3, #7
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc2:	f107 0314 	add.w	r3, r7, #20
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4809      	ldr	r0, [pc, #36]	; (8002cf0 <HAL_UART_MspInit+0x9c>)
 8002cca:	f000 fe87 	bl	80039dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	2026      	movs	r0, #38	; 0x26
 8002cd4:	f000 fdb9 	bl	800384a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002cd8:	2026      	movs	r0, #38	; 0x26
 8002cda:	f000 fdd2 	bl	8003882 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002cde:	bf00      	nop
 8002ce0:	3728      	adds	r7, #40	; 0x28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40004400 	.word	0x40004400
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	40020000 	.word	0x40020000

08002cf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002cf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cf8:	480d      	ldr	r0, [pc, #52]	; (8002d30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002cfa:	490e      	ldr	r1, [pc, #56]	; (8002d34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002cfc:	4a0e      	ldr	r2, [pc, #56]	; (8002d38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d00:	e002      	b.n	8002d08 <LoopCopyDataInit>

08002d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d06:	3304      	adds	r3, #4

08002d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d0c:	d3f9      	bcc.n	8002d02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d0e:	4a0b      	ldr	r2, [pc, #44]	; (8002d3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d10:	4c0b      	ldr	r4, [pc, #44]	; (8002d40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d14:	e001      	b.n	8002d1a <LoopFillZerobss>

08002d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d18:	3204      	adds	r2, #4

08002d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d1c:	d3fb      	bcc.n	8002d16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d1e:	f7ff fcdf 	bl	80026e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d22:	f004 fe8f 	bl	8007a44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d26:	f7fe ff31 	bl	8001b8c <main>
  bx  lr    
 8002d2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d34:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8002d38:	0800adf0 	.word	0x0800adf0
  ldr r2, =_sbss
 8002d3c:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8002d40:	20001000 	.word	0x20001000

08002d44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d44:	e7fe      	b.n	8002d44 <ADC_IRQHandler>
	...

08002d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d4c:	4b0e      	ldr	r3, [pc, #56]	; (8002d88 <HAL_Init+0x40>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a0d      	ldr	r2, [pc, #52]	; (8002d88 <HAL_Init+0x40>)
 8002d52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d58:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <HAL_Init+0x40>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a0a      	ldr	r2, [pc, #40]	; (8002d88 <HAL_Init+0x40>)
 8002d5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d64:	4b08      	ldr	r3, [pc, #32]	; (8002d88 <HAL_Init+0x40>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a07      	ldr	r2, [pc, #28]	; (8002d88 <HAL_Init+0x40>)
 8002d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d70:	2003      	movs	r0, #3
 8002d72:	f000 fd5f 	bl	8003834 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d76:	2000      	movs	r0, #0
 8002d78:	f000 f808 	bl	8002d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d7c:	f7ff fb7c 	bl	8002478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40023c00 	.word	0x40023c00

08002d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d94:	4b12      	ldr	r3, [pc, #72]	; (8002de0 <HAL_InitTick+0x54>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	4b12      	ldr	r3, [pc, #72]	; (8002de4 <HAL_InitTick+0x58>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 fd77 	bl	800389e <HAL_SYSTICK_Config>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e00e      	b.n	8002dd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b0f      	cmp	r3, #15
 8002dbe:	d80a      	bhi.n	8002dd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc8:	f000 fd3f 	bl	800384a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dcc:	4a06      	ldr	r2, [pc, #24]	; (8002de8 <HAL_InitTick+0x5c>)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	e000      	b.n	8002dd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	20000024 	.word	0x20000024
 8002de4:	2000002c 	.word	0x2000002c
 8002de8:	20000028 	.word	0x20000028

08002dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002df0:	4b06      	ldr	r3, [pc, #24]	; (8002e0c <HAL_IncTick+0x20>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	461a      	mov	r2, r3
 8002df6:	4b06      	ldr	r3, [pc, #24]	; (8002e10 <HAL_IncTick+0x24>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	4a04      	ldr	r2, [pc, #16]	; (8002e10 <HAL_IncTick+0x24>)
 8002dfe:	6013      	str	r3, [r2, #0]
}
 8002e00:	bf00      	nop
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	2000002c 	.word	0x2000002c
 8002e10:	20000fec 	.word	0x20000fec

08002e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  return uwTick;
 8002e18:	4b03      	ldr	r3, [pc, #12]	; (8002e28 <HAL_GetTick+0x14>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	20000fec 	.word	0x20000fec

08002e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e34:	f7ff ffee 	bl	8002e14 <HAL_GetTick>
 8002e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e44:	d005      	beq.n	8002e52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e46:	4b0a      	ldr	r3, [pc, #40]	; (8002e70 <HAL_Delay+0x44>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	4413      	add	r3, r2
 8002e50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e52:	bf00      	nop
 8002e54:	f7ff ffde 	bl	8002e14 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d8f7      	bhi.n	8002e54 <HAL_Delay+0x28>
  {
  }
}
 8002e64:	bf00      	nop
 8002e66:	bf00      	nop
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	2000002c 	.word	0x2000002c

08002e74 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e033      	b.n	8002ef2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d109      	bne.n	8002ea6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7fe f88c 	bl	8000fb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	f003 0310 	and.w	r3, r3, #16
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d118      	bne.n	8002ee4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002eba:	f023 0302 	bic.w	r3, r3, #2
 8002ebe:	f043 0202 	orr.w	r2, r3, #2
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 fae8 	bl	800349c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	f023 0303 	bic.w	r3, r3, #3
 8002eda:	f043 0201 	orr.w	r2, r3, #1
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	641a      	str	r2, [r3, #64]	; 0x40
 8002ee2:	e001      	b.n	8002ee8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
	...

08002efc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d101      	bne.n	8002f16 <HAL_ADC_Start+0x1a>
 8002f12:	2302      	movs	r3, #2
 8002f14:	e0b2      	b.n	800307c <HAL_ADC_Start+0x180>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d018      	beq.n	8002f5e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0201 	orr.w	r2, r2, #1
 8002f3a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f3c:	4b52      	ldr	r3, [pc, #328]	; (8003088 <HAL_ADC_Start+0x18c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a52      	ldr	r2, [pc, #328]	; (800308c <HAL_ADC_Start+0x190>)
 8002f42:	fba2 2303 	umull	r2, r3, r2, r3
 8002f46:	0c9a      	lsrs	r2, r3, #18
 8002f48:	4613      	mov	r3, r2
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	4413      	add	r3, r2
 8002f4e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002f50:	e002      	b.n	8002f58 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	3b01      	subs	r3, #1
 8002f56:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1f9      	bne.n	8002f52 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d17a      	bne.n	8003062 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f74:	f023 0301 	bic.w	r3, r3, #1
 8002f78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d007      	beq.n	8002f9e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f96:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002faa:	d106      	bne.n	8002fba <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb0:	f023 0206 	bic.w	r2, r3, #6
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	645a      	str	r2, [r3, #68]	; 0x44
 8002fb8:	e002      	b.n	8002fc0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fc8:	4b31      	ldr	r3, [pc, #196]	; (8003090 <HAL_ADC_Start+0x194>)
 8002fca:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002fd4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f003 031f 	and.w	r3, r3, #31
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d12a      	bne.n	8003038 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a2b      	ldr	r2, [pc, #172]	; (8003094 <HAL_ADC_Start+0x198>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d015      	beq.n	8003018 <HAL_ADC_Start+0x11c>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a29      	ldr	r2, [pc, #164]	; (8003098 <HAL_ADC_Start+0x19c>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d105      	bne.n	8003002 <HAL_ADC_Start+0x106>
 8002ff6:	4b26      	ldr	r3, [pc, #152]	; (8003090 <HAL_ADC_Start+0x194>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f003 031f 	and.w	r3, r3, #31
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00a      	beq.n	8003018 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a25      	ldr	r2, [pc, #148]	; (800309c <HAL_ADC_Start+0x1a0>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d136      	bne.n	800307a <HAL_ADC_Start+0x17e>
 800300c:	4b20      	ldr	r3, [pc, #128]	; (8003090 <HAL_ADC_Start+0x194>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 0310 	and.w	r3, r3, #16
 8003014:	2b00      	cmp	r3, #0
 8003016:	d130      	bne.n	800307a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d129      	bne.n	800307a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003034:	609a      	str	r2, [r3, #8]
 8003036:	e020      	b.n	800307a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a15      	ldr	r2, [pc, #84]	; (8003094 <HAL_ADC_Start+0x198>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d11b      	bne.n	800307a <HAL_ADC_Start+0x17e>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d114      	bne.n	800307a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800305e:	609a      	str	r2, [r3, #8]
 8003060:	e00b      	b.n	800307a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	f043 0210 	orr.w	r2, r3, #16
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003072:	f043 0201 	orr.w	r2, r3, #1
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr
 8003088:	20000024 	.word	0x20000024
 800308c:	431bde83 	.word	0x431bde83
 8003090:	40012300 	.word	0x40012300
 8003094:	40012000 	.word	0x40012000
 8003098:	40012100 	.word	0x40012100
 800309c:	40012200 	.word	0x40012200

080030a0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d101      	bne.n	80030b6 <HAL_ADC_Stop+0x16>
 80030b2:	2302      	movs	r3, #2
 80030b4:	e021      	b.n	80030fa <HAL_ADC_Stop+0x5a>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0201 	bic.w	r2, r2, #1
 80030cc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d109      	bne.n	80030f0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030e4:	f023 0301 	bic.w	r3, r3, #1
 80030e8:	f043 0201 	orr.w	r2, r3, #1
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b084      	sub	sp, #16
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
 800310e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800311e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003122:	d113      	bne.n	800314c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800312e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003132:	d10b      	bne.n	800314c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003138:	f043 0220 	orr.w	r2, r3, #32
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e063      	b.n	8003214 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800314c:	f7ff fe62 	bl	8002e14 <HAL_GetTick>
 8003150:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003152:	e021      	b.n	8003198 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315a:	d01d      	beq.n	8003198 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d007      	beq.n	8003172 <HAL_ADC_PollForConversion+0x6c>
 8003162:	f7ff fe57 	bl	8002e14 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d212      	bcs.n	8003198 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b02      	cmp	r3, #2
 800317e:	d00b      	beq.n	8003198 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	f043 0204 	orr.w	r2, r3, #4
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e03d      	b.n	8003214 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d1d6      	bne.n	8003154 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f06f 0212 	mvn.w	r2, #18
 80031ae:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d123      	bne.n	8003212 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d11f      	bne.n	8003212 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d006      	beq.n	80031ee <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d111      	bne.n	8003212 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d105      	bne.n	8003212 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	f043 0201 	orr.w	r2, r3, #1
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800322a:	4618      	mov	r0, r3
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
	...

08003238 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003242:	2300      	movs	r3, #0
 8003244:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x1c>
 8003250:	2302      	movs	r3, #2
 8003252:	e113      	b.n	800347c <HAL_ADC_ConfigChannel+0x244>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b09      	cmp	r3, #9
 8003262:	d925      	bls.n	80032b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68d9      	ldr	r1, [r3, #12]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	b29b      	uxth	r3, r3
 8003270:	461a      	mov	r2, r3
 8003272:	4613      	mov	r3, r2
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	4413      	add	r3, r2
 8003278:	3b1e      	subs	r3, #30
 800327a:	2207      	movs	r2, #7
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	43da      	mvns	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	400a      	ands	r2, r1
 8003288:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68d9      	ldr	r1, [r3, #12]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	b29b      	uxth	r3, r3
 800329a:	4618      	mov	r0, r3
 800329c:	4603      	mov	r3, r0
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	4403      	add	r3, r0
 80032a2:	3b1e      	subs	r3, #30
 80032a4:	409a      	lsls	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	60da      	str	r2, [r3, #12]
 80032ae:	e022      	b.n	80032f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6919      	ldr	r1, [r3, #16]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	461a      	mov	r2, r3
 80032be:	4613      	mov	r3, r2
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	4413      	add	r3, r2
 80032c4:	2207      	movs	r2, #7
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	43da      	mvns	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	400a      	ands	r2, r1
 80032d2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6919      	ldr	r1, [r3, #16]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	689a      	ldr	r2, [r3, #8]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	4618      	mov	r0, r3
 80032e6:	4603      	mov	r3, r0
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	4403      	add	r3, r0
 80032ec:	409a      	lsls	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2b06      	cmp	r3, #6
 80032fc:	d824      	bhi.n	8003348 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	3b05      	subs	r3, #5
 8003310:	221f      	movs	r2, #31
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43da      	mvns	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	400a      	ands	r2, r1
 800331e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	b29b      	uxth	r3, r3
 800332c:	4618      	mov	r0, r3
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	3b05      	subs	r3, #5
 800333a:	fa00 f203 	lsl.w	r2, r0, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	635a      	str	r2, [r3, #52]	; 0x34
 8003346:	e04c      	b.n	80033e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2b0c      	cmp	r3, #12
 800334e:	d824      	bhi.n	800339a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	4613      	mov	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4413      	add	r3, r2
 8003360:	3b23      	subs	r3, #35	; 0x23
 8003362:	221f      	movs	r2, #31
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	43da      	mvns	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	400a      	ands	r2, r1
 8003370:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	b29b      	uxth	r3, r3
 800337e:	4618      	mov	r0, r3
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	3b23      	subs	r3, #35	; 0x23
 800338c:	fa00 f203 	lsl.w	r2, r0, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	631a      	str	r2, [r3, #48]	; 0x30
 8003398:	e023      	b.n	80033e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	4613      	mov	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	3b41      	subs	r3, #65	; 0x41
 80033ac:	221f      	movs	r2, #31
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43da      	mvns	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	400a      	ands	r2, r1
 80033ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	4618      	mov	r0, r3
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	3b41      	subs	r3, #65	; 0x41
 80033d6:	fa00 f203 	lsl.w	r2, r0, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033e2:	4b29      	ldr	r3, [pc, #164]	; (8003488 <HAL_ADC_ConfigChannel+0x250>)
 80033e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a28      	ldr	r2, [pc, #160]	; (800348c <HAL_ADC_ConfigChannel+0x254>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d10f      	bne.n	8003410 <HAL_ADC_ConfigChannel+0x1d8>
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2b12      	cmp	r3, #18
 80033f6:	d10b      	bne.n	8003410 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a1d      	ldr	r2, [pc, #116]	; (800348c <HAL_ADC_ConfigChannel+0x254>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d12b      	bne.n	8003472 <HAL_ADC_ConfigChannel+0x23a>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a1c      	ldr	r2, [pc, #112]	; (8003490 <HAL_ADC_ConfigChannel+0x258>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d003      	beq.n	800342c <HAL_ADC_ConfigChannel+0x1f4>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b11      	cmp	r3, #17
 800342a:	d122      	bne.n	8003472 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a11      	ldr	r2, [pc, #68]	; (8003490 <HAL_ADC_ConfigChannel+0x258>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d111      	bne.n	8003472 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800344e:	4b11      	ldr	r3, [pc, #68]	; (8003494 <HAL_ADC_ConfigChannel+0x25c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a11      	ldr	r2, [pc, #68]	; (8003498 <HAL_ADC_ConfigChannel+0x260>)
 8003454:	fba2 2303 	umull	r2, r3, r2, r3
 8003458:	0c9a      	lsrs	r2, r3, #18
 800345a:	4613      	mov	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003464:	e002      	b.n	800346c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	3b01      	subs	r3, #1
 800346a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f9      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3714      	adds	r7, #20
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	40012300 	.word	0x40012300
 800348c:	40012000 	.word	0x40012000
 8003490:	10000012 	.word	0x10000012
 8003494:	20000024 	.word	0x20000024
 8003498:	431bde83 	.word	0x431bde83

0800349c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034a4:	4b79      	ldr	r3, [pc, #484]	; (800368c <ADC_Init+0x1f0>)
 80034a6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	431a      	orrs	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6859      	ldr	r1, [r3, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	021a      	lsls	r2, r3, #8
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80034f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6859      	ldr	r1, [r3, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689a      	ldr	r2, [r3, #8]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003516:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6899      	ldr	r1, [r3, #8]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68da      	ldr	r2, [r3, #12]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352e:	4a58      	ldr	r2, [pc, #352]	; (8003690 <ADC_Init+0x1f4>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d022      	beq.n	800357a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003542:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6899      	ldr	r1, [r3, #8]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003564:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6899      	ldr	r1, [r3, #8]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	609a      	str	r2, [r3, #8]
 8003578:	e00f      	b.n	800359a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003588:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003598:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0202 	bic.w	r2, r2, #2
 80035a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6899      	ldr	r1, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	7e1b      	ldrb	r3, [r3, #24]
 80035b4:	005a      	lsls	r2, r3, #1
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d01b      	beq.n	8003600 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80035e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6859      	ldr	r1, [r3, #4]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	3b01      	subs	r3, #1
 80035f4:	035a      	lsls	r2, r3, #13
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	605a      	str	r2, [r3, #4]
 80035fe:	e007      	b.n	8003610 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800360e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800361e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	3b01      	subs	r3, #1
 800362c:	051a      	lsls	r2, r3, #20
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003644:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6899      	ldr	r1, [r3, #8]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003652:	025a      	lsls	r2, r3, #9
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689a      	ldr	r2, [r3, #8]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800366a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6899      	ldr	r1, [r3, #8]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	029a      	lsls	r2, r3, #10
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	430a      	orrs	r2, r1
 800367e:	609a      	str	r2, [r3, #8]
}
 8003680:	bf00      	nop
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	40012300 	.word	0x40012300
 8003690:	0f000001 	.word	0x0f000001

08003694 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036a4:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <__NVIC_SetPriorityGrouping+0x44>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036b0:	4013      	ands	r3, r2
 80036b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036c6:	4a04      	ldr	r2, [pc, #16]	; (80036d8 <__NVIC_SetPriorityGrouping+0x44>)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	60d3      	str	r3, [r2, #12]
}
 80036cc:	bf00      	nop
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	e000ed00 	.word	0xe000ed00

080036dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036e0:	4b04      	ldr	r3, [pc, #16]	; (80036f4 <__NVIC_GetPriorityGrouping+0x18>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	0a1b      	lsrs	r3, r3, #8
 80036e6:	f003 0307 	and.w	r3, r3, #7
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	e000ed00 	.word	0xe000ed00

080036f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	4603      	mov	r3, r0
 8003700:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003706:	2b00      	cmp	r3, #0
 8003708:	db0b      	blt.n	8003722 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800370a:	79fb      	ldrb	r3, [r7, #7]
 800370c:	f003 021f 	and.w	r2, r3, #31
 8003710:	4907      	ldr	r1, [pc, #28]	; (8003730 <__NVIC_EnableIRQ+0x38>)
 8003712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	2001      	movs	r0, #1
 800371a:	fa00 f202 	lsl.w	r2, r0, r2
 800371e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	e000e100 	.word	0xe000e100

08003734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	4603      	mov	r3, r0
 800373c:	6039      	str	r1, [r7, #0]
 800373e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003744:	2b00      	cmp	r3, #0
 8003746:	db0a      	blt.n	800375e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	b2da      	uxtb	r2, r3
 800374c:	490c      	ldr	r1, [pc, #48]	; (8003780 <__NVIC_SetPriority+0x4c>)
 800374e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003752:	0112      	lsls	r2, r2, #4
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	440b      	add	r3, r1
 8003758:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800375c:	e00a      	b.n	8003774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	b2da      	uxtb	r2, r3
 8003762:	4908      	ldr	r1, [pc, #32]	; (8003784 <__NVIC_SetPriority+0x50>)
 8003764:	79fb      	ldrb	r3, [r7, #7]
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	3b04      	subs	r3, #4
 800376c:	0112      	lsls	r2, r2, #4
 800376e:	b2d2      	uxtb	r2, r2
 8003770:	440b      	add	r3, r1
 8003772:	761a      	strb	r2, [r3, #24]
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	e000e100 	.word	0xe000e100
 8003784:	e000ed00 	.word	0xe000ed00

08003788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003788:	b480      	push	{r7}
 800378a:	b089      	sub	sp, #36	; 0x24
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	f1c3 0307 	rsb	r3, r3, #7
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	bf28      	it	cs
 80037a6:	2304      	movcs	r3, #4
 80037a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	3304      	adds	r3, #4
 80037ae:	2b06      	cmp	r3, #6
 80037b0:	d902      	bls.n	80037b8 <NVIC_EncodePriority+0x30>
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	3b03      	subs	r3, #3
 80037b6:	e000      	b.n	80037ba <NVIC_EncodePriority+0x32>
 80037b8:	2300      	movs	r3, #0
 80037ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037bc:	f04f 32ff 	mov.w	r2, #4294967295
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
 80037c6:	43da      	mvns	r2, r3
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	401a      	ands	r2, r3
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037d0:	f04f 31ff 	mov.w	r1, #4294967295
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	fa01 f303 	lsl.w	r3, r1, r3
 80037da:	43d9      	mvns	r1, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037e0:	4313      	orrs	r3, r2
         );
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3724      	adds	r7, #36	; 0x24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
	...

080037f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3b01      	subs	r3, #1
 80037fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003800:	d301      	bcc.n	8003806 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003802:	2301      	movs	r3, #1
 8003804:	e00f      	b.n	8003826 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003806:	4a0a      	ldr	r2, [pc, #40]	; (8003830 <SysTick_Config+0x40>)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3b01      	subs	r3, #1
 800380c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800380e:	210f      	movs	r1, #15
 8003810:	f04f 30ff 	mov.w	r0, #4294967295
 8003814:	f7ff ff8e 	bl	8003734 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003818:	4b05      	ldr	r3, [pc, #20]	; (8003830 <SysTick_Config+0x40>)
 800381a:	2200      	movs	r2, #0
 800381c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800381e:	4b04      	ldr	r3, [pc, #16]	; (8003830 <SysTick_Config+0x40>)
 8003820:	2207      	movs	r2, #7
 8003822:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	e000e010 	.word	0xe000e010

08003834 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f7ff ff29 	bl	8003694 <__NVIC_SetPriorityGrouping>
}
 8003842:	bf00      	nop
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800384a:	b580      	push	{r7, lr}
 800384c:	b086      	sub	sp, #24
 800384e:	af00      	add	r7, sp, #0
 8003850:	4603      	mov	r3, r0
 8003852:	60b9      	str	r1, [r7, #8]
 8003854:	607a      	str	r2, [r7, #4]
 8003856:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003858:	2300      	movs	r3, #0
 800385a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800385c:	f7ff ff3e 	bl	80036dc <__NVIC_GetPriorityGrouping>
 8003860:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	68b9      	ldr	r1, [r7, #8]
 8003866:	6978      	ldr	r0, [r7, #20]
 8003868:	f7ff ff8e 	bl	8003788 <NVIC_EncodePriority>
 800386c:	4602      	mov	r2, r0
 800386e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003872:	4611      	mov	r1, r2
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff ff5d 	bl	8003734 <__NVIC_SetPriority>
}
 800387a:	bf00      	nop
 800387c:	3718      	adds	r7, #24
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b082      	sub	sp, #8
 8003886:	af00      	add	r7, sp, #0
 8003888:	4603      	mov	r3, r0
 800388a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800388c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff ff31 	bl	80036f8 <__NVIC_EnableIRQ>
}
 8003896:	bf00      	nop
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b082      	sub	sp, #8
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7ff ffa2 	bl	80037f0 <SysTick_Config>
 80038ac:	4603      	mov	r3, r0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b084      	sub	sp, #16
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80038c4:	f7ff faa6 	bl	8002e14 <HAL_GetTick>
 80038c8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d008      	beq.n	80038e8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2280      	movs	r2, #128	; 0x80
 80038da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e052      	b.n	800398e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0216 	bic.w	r2, r2, #22
 80038f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695a      	ldr	r2, [r3, #20]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003906:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	2b00      	cmp	r3, #0
 800390e:	d103      	bne.n	8003918 <HAL_DMA_Abort+0x62>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003914:	2b00      	cmp	r3, #0
 8003916:	d007      	beq.n	8003928 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0208 	bic.w	r2, r2, #8
 8003926:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0201 	bic.w	r2, r2, #1
 8003936:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003938:	e013      	b.n	8003962 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800393a:	f7ff fa6b 	bl	8002e14 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b05      	cmp	r3, #5
 8003946:	d90c      	bls.n	8003962 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2220      	movs	r2, #32
 800394c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2203      	movs	r2, #3
 8003952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e015      	b.n	800398e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1e4      	bne.n	800393a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003974:	223f      	movs	r2, #63	; 0x3f
 8003976:	409a      	lsls	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003996:	b480      	push	{r7}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d004      	beq.n	80039b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2280      	movs	r2, #128	; 0x80
 80039ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e00c      	b.n	80039ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2205      	movs	r2, #5
 80039b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0201 	bic.w	r2, r2, #1
 80039ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
	...

080039dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039dc:	b480      	push	{r7}
 80039de:	b089      	sub	sp, #36	; 0x24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039f2:	2300      	movs	r3, #0
 80039f4:	61fb      	str	r3, [r7, #28]
 80039f6:	e165      	b.n	8003cc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039f8:	2201      	movs	r2, #1
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	f040 8154 	bne.w	8003cbe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d005      	beq.n	8003a2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d130      	bne.n	8003a90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	2203      	movs	r2, #3
 8003a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3e:	43db      	mvns	r3, r3
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	4013      	ands	r3, r2
 8003a44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	68da      	ldr	r2, [r3, #12]
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a64:	2201      	movs	r2, #1
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	43db      	mvns	r3, r3
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	4013      	ands	r3, r2
 8003a72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	091b      	lsrs	r3, r3, #4
 8003a7a:	f003 0201 	and.w	r2, r3, #1
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f003 0303 	and.w	r3, r3, #3
 8003a98:	2b03      	cmp	r3, #3
 8003a9a:	d017      	beq.n	8003acc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	2203      	movs	r2, #3
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	43db      	mvns	r3, r3
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f003 0303 	and.w	r3, r3, #3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d123      	bne.n	8003b20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	08da      	lsrs	r2, r3, #3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3208      	adds	r2, #8
 8003ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	220f      	movs	r2, #15
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	43db      	mvns	r3, r3
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	4013      	ands	r3, r2
 8003afa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	691a      	ldr	r2, [r3, #16]
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	08da      	lsrs	r2, r3, #3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	3208      	adds	r2, #8
 8003b1a:	69b9      	ldr	r1, [r7, #24]
 8003b1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	2203      	movs	r2, #3
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	43db      	mvns	r3, r3
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	4013      	ands	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f003 0203 	and.w	r2, r3, #3
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 80ae 	beq.w	8003cbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b62:	2300      	movs	r3, #0
 8003b64:	60fb      	str	r3, [r7, #12]
 8003b66:	4b5d      	ldr	r3, [pc, #372]	; (8003cdc <HAL_GPIO_Init+0x300>)
 8003b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6a:	4a5c      	ldr	r2, [pc, #368]	; (8003cdc <HAL_GPIO_Init+0x300>)
 8003b6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b70:	6453      	str	r3, [r2, #68]	; 0x44
 8003b72:	4b5a      	ldr	r3, [pc, #360]	; (8003cdc <HAL_GPIO_Init+0x300>)
 8003b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b7a:	60fb      	str	r3, [r7, #12]
 8003b7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b7e:	4a58      	ldr	r2, [pc, #352]	; (8003ce0 <HAL_GPIO_Init+0x304>)
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	089b      	lsrs	r3, r3, #2
 8003b84:	3302      	adds	r3, #2
 8003b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	220f      	movs	r2, #15
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	43db      	mvns	r3, r3
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a4f      	ldr	r2, [pc, #316]	; (8003ce4 <HAL_GPIO_Init+0x308>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d025      	beq.n	8003bf6 <HAL_GPIO_Init+0x21a>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a4e      	ldr	r2, [pc, #312]	; (8003ce8 <HAL_GPIO_Init+0x30c>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d01f      	beq.n	8003bf2 <HAL_GPIO_Init+0x216>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a4d      	ldr	r2, [pc, #308]	; (8003cec <HAL_GPIO_Init+0x310>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d019      	beq.n	8003bee <HAL_GPIO_Init+0x212>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a4c      	ldr	r2, [pc, #304]	; (8003cf0 <HAL_GPIO_Init+0x314>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d013      	beq.n	8003bea <HAL_GPIO_Init+0x20e>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a4b      	ldr	r2, [pc, #300]	; (8003cf4 <HAL_GPIO_Init+0x318>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d00d      	beq.n	8003be6 <HAL_GPIO_Init+0x20a>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a4a      	ldr	r2, [pc, #296]	; (8003cf8 <HAL_GPIO_Init+0x31c>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d007      	beq.n	8003be2 <HAL_GPIO_Init+0x206>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a49      	ldr	r2, [pc, #292]	; (8003cfc <HAL_GPIO_Init+0x320>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d101      	bne.n	8003bde <HAL_GPIO_Init+0x202>
 8003bda:	2306      	movs	r3, #6
 8003bdc:	e00c      	b.n	8003bf8 <HAL_GPIO_Init+0x21c>
 8003bde:	2307      	movs	r3, #7
 8003be0:	e00a      	b.n	8003bf8 <HAL_GPIO_Init+0x21c>
 8003be2:	2305      	movs	r3, #5
 8003be4:	e008      	b.n	8003bf8 <HAL_GPIO_Init+0x21c>
 8003be6:	2304      	movs	r3, #4
 8003be8:	e006      	b.n	8003bf8 <HAL_GPIO_Init+0x21c>
 8003bea:	2303      	movs	r3, #3
 8003bec:	e004      	b.n	8003bf8 <HAL_GPIO_Init+0x21c>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e002      	b.n	8003bf8 <HAL_GPIO_Init+0x21c>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e000      	b.n	8003bf8 <HAL_GPIO_Init+0x21c>
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	69fa      	ldr	r2, [r7, #28]
 8003bfa:	f002 0203 	and.w	r2, r2, #3
 8003bfe:	0092      	lsls	r2, r2, #2
 8003c00:	4093      	lsls	r3, r2
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c08:	4935      	ldr	r1, [pc, #212]	; (8003ce0 <HAL_GPIO_Init+0x304>)
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	089b      	lsrs	r3, r3, #2
 8003c0e:	3302      	adds	r3, #2
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c16:	4b3a      	ldr	r3, [pc, #232]	; (8003d00 <HAL_GPIO_Init+0x324>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	43db      	mvns	r3, r3
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	4013      	ands	r3, r2
 8003c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c3a:	4a31      	ldr	r2, [pc, #196]	; (8003d00 <HAL_GPIO_Init+0x324>)
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c40:	4b2f      	ldr	r3, [pc, #188]	; (8003d00 <HAL_GPIO_Init+0x324>)
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	43db      	mvns	r3, r3
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c64:	4a26      	ldr	r2, [pc, #152]	; (8003d00 <HAL_GPIO_Init+0x324>)
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c6a:	4b25      	ldr	r3, [pc, #148]	; (8003d00 <HAL_GPIO_Init+0x324>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	43db      	mvns	r3, r3
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	4013      	ands	r3, r2
 8003c78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c8e:	4a1c      	ldr	r2, [pc, #112]	; (8003d00 <HAL_GPIO_Init+0x324>)
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c94:	4b1a      	ldr	r3, [pc, #104]	; (8003d00 <HAL_GPIO_Init+0x324>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cb8:	4a11      	ldr	r2, [pc, #68]	; (8003d00 <HAL_GPIO_Init+0x324>)
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	61fb      	str	r3, [r7, #28]
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	2b0f      	cmp	r3, #15
 8003cc8:	f67f ae96 	bls.w	80039f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ccc:	bf00      	nop
 8003cce:	bf00      	nop
 8003cd0:	3724      	adds	r7, #36	; 0x24
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	40023800 	.word	0x40023800
 8003ce0:	40013800 	.word	0x40013800
 8003ce4:	40020000 	.word	0x40020000
 8003ce8:	40020400 	.word	0x40020400
 8003cec:	40020800 	.word	0x40020800
 8003cf0:	40020c00 	.word	0x40020c00
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	40021400 	.word	0x40021400
 8003cfc:	40021800 	.word	0x40021800
 8003d00:	40013c00 	.word	0x40013c00

08003d04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	691a      	ldr	r2, [r3, #16]
 8003d14:	887b      	ldrh	r3, [r7, #2]
 8003d16:	4013      	ands	r3, r2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	73fb      	strb	r3, [r7, #15]
 8003d20:	e001      	b.n	8003d26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d22:	2300      	movs	r3, #0
 8003d24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	807b      	strh	r3, [r7, #2]
 8003d40:	4613      	mov	r3, r2
 8003d42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d44:	787b      	ldrb	r3, [r7, #1]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d4a:	887a      	ldrh	r2, [r7, #2]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d50:	e003      	b.n	8003d5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d52:	887b      	ldrh	r3, [r7, #2]
 8003d54:	041a      	lsls	r2, r3, #16
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	619a      	str	r2, [r3, #24]
}
 8003d5a:	bf00      	nop
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
	...

08003d68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d72:	4b08      	ldr	r3, [pc, #32]	; (8003d94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d74:	695a      	ldr	r2, [r3, #20]
 8003d76:	88fb      	ldrh	r3, [r7, #6]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d006      	beq.n	8003d8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d7e:	4a05      	ldr	r2, [pc, #20]	; (8003d94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d80:	88fb      	ldrh	r3, [r7, #6]
 8003d82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d84:	88fb      	ldrh	r3, [r7, #6]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 f806 	bl	8003d98 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d8c:	bf00      	nop
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40013c00 	.word	0x40013c00

08003d98 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	4603      	mov	r3, r0
 8003da0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
	...

08003db0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e12b      	b.n	800401a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d106      	bne.n	8003ddc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7fd fa16 	bl	8001208 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2224      	movs	r2, #36	; 0x24
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0201 	bic.w	r2, r2, #1
 8003df2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e14:	f000 fd0a 	bl	800482c <HAL_RCC_GetPCLK1Freq>
 8003e18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	4a81      	ldr	r2, [pc, #516]	; (8004024 <HAL_I2C_Init+0x274>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d807      	bhi.n	8003e34 <HAL_I2C_Init+0x84>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4a80      	ldr	r2, [pc, #512]	; (8004028 <HAL_I2C_Init+0x278>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	bf94      	ite	ls
 8003e2c:	2301      	movls	r3, #1
 8003e2e:	2300      	movhi	r3, #0
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	e006      	b.n	8003e42 <HAL_I2C_Init+0x92>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	4a7d      	ldr	r2, [pc, #500]	; (800402c <HAL_I2C_Init+0x27c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	bf94      	ite	ls
 8003e3c:	2301      	movls	r3, #1
 8003e3e:	2300      	movhi	r3, #0
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e0e7      	b.n	800401a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	4a78      	ldr	r2, [pc, #480]	; (8004030 <HAL_I2C_Init+0x280>)
 8003e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e52:	0c9b      	lsrs	r3, r3, #18
 8003e54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	4a6a      	ldr	r2, [pc, #424]	; (8004024 <HAL_I2C_Init+0x274>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d802      	bhi.n	8003e84 <HAL_I2C_Init+0xd4>
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	3301      	adds	r3, #1
 8003e82:	e009      	b.n	8003e98 <HAL_I2C_Init+0xe8>
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e8a:	fb02 f303 	mul.w	r3, r2, r3
 8003e8e:	4a69      	ldr	r2, [pc, #420]	; (8004034 <HAL_I2C_Init+0x284>)
 8003e90:	fba2 2303 	umull	r2, r3, r2, r3
 8003e94:	099b      	lsrs	r3, r3, #6
 8003e96:	3301      	adds	r3, #1
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6812      	ldr	r2, [r2, #0]
 8003e9c:	430b      	orrs	r3, r1
 8003e9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003eaa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	495c      	ldr	r1, [pc, #368]	; (8004024 <HAL_I2C_Init+0x274>)
 8003eb4:	428b      	cmp	r3, r1
 8003eb6:	d819      	bhi.n	8003eec <HAL_I2C_Init+0x13c>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	1e59      	subs	r1, r3, #1
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ec6:	1c59      	adds	r1, r3, #1
 8003ec8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ecc:	400b      	ands	r3, r1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <HAL_I2C_Init+0x138>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	1e59      	subs	r1, r3, #1
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ee6:	e051      	b.n	8003f8c <HAL_I2C_Init+0x1dc>
 8003ee8:	2304      	movs	r3, #4
 8003eea:	e04f      	b.n	8003f8c <HAL_I2C_Init+0x1dc>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d111      	bne.n	8003f18 <HAL_I2C_Init+0x168>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	1e58      	subs	r0, r3, #1
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6859      	ldr	r1, [r3, #4]
 8003efc:	460b      	mov	r3, r1
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	440b      	add	r3, r1
 8003f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f06:	3301      	adds	r3, #1
 8003f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	bf0c      	ite	eq
 8003f10:	2301      	moveq	r3, #1
 8003f12:	2300      	movne	r3, #0
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	e012      	b.n	8003f3e <HAL_I2C_Init+0x18e>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	1e58      	subs	r0, r3, #1
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6859      	ldr	r1, [r3, #4]
 8003f20:	460b      	mov	r3, r1
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	440b      	add	r3, r1
 8003f26:	0099      	lsls	r1, r3, #2
 8003f28:	440b      	add	r3, r1
 8003f2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f2e:	3301      	adds	r3, #1
 8003f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	bf0c      	ite	eq
 8003f38:	2301      	moveq	r3, #1
 8003f3a:	2300      	movne	r3, #0
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <HAL_I2C_Init+0x196>
 8003f42:	2301      	movs	r3, #1
 8003f44:	e022      	b.n	8003f8c <HAL_I2C_Init+0x1dc>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10e      	bne.n	8003f6c <HAL_I2C_Init+0x1bc>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	1e58      	subs	r0, r3, #1
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6859      	ldr	r1, [r3, #4]
 8003f56:	460b      	mov	r3, r1
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	440b      	add	r3, r1
 8003f5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f60:	3301      	adds	r3, #1
 8003f62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f6a:	e00f      	b.n	8003f8c <HAL_I2C_Init+0x1dc>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	1e58      	subs	r0, r3, #1
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6859      	ldr	r1, [r3, #4]
 8003f74:	460b      	mov	r3, r1
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	440b      	add	r3, r1
 8003f7a:	0099      	lsls	r1, r3, #2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f82:	3301      	adds	r3, #1
 8003f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f8c:	6879      	ldr	r1, [r7, #4]
 8003f8e:	6809      	ldr	r1, [r1, #0]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	69da      	ldr	r2, [r3, #28]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003fba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6911      	ldr	r1, [r2, #16]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	68d2      	ldr	r2, [r2, #12]
 8003fc6:	4311      	orrs	r1, r2
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6812      	ldr	r2, [r2, #0]
 8003fcc:	430b      	orrs	r3, r1
 8003fce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	695a      	ldr	r2, [r3, #20]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 0201 	orr.w	r2, r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2220      	movs	r2, #32
 8004006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	000186a0 	.word	0x000186a0
 8004028:	001e847f 	.word	0x001e847f
 800402c:	003d08ff 	.word	0x003d08ff
 8004030:	431bde83 	.word	0x431bde83
 8004034:	10624dd3 	.word	0x10624dd3

08004038 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b088      	sub	sp, #32
 800403c:	af02      	add	r7, sp, #8
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	607a      	str	r2, [r7, #4]
 8004042:	461a      	mov	r2, r3
 8004044:	460b      	mov	r3, r1
 8004046:	817b      	strh	r3, [r7, #10]
 8004048:	4613      	mov	r3, r2
 800404a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800404c:	f7fe fee2 	bl	8002e14 <HAL_GetTick>
 8004050:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b20      	cmp	r3, #32
 800405c:	f040 80e0 	bne.w	8004220 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	2319      	movs	r3, #25
 8004066:	2201      	movs	r2, #1
 8004068:	4970      	ldr	r1, [pc, #448]	; (800422c <HAL_I2C_Master_Transmit+0x1f4>)
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f000 f964 	bl	8004338 <I2C_WaitOnFlagUntilTimeout>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004076:	2302      	movs	r3, #2
 8004078:	e0d3      	b.n	8004222 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004080:	2b01      	cmp	r3, #1
 8004082:	d101      	bne.n	8004088 <HAL_I2C_Master_Transmit+0x50>
 8004084:	2302      	movs	r3, #2
 8004086:	e0cc      	b.n	8004222 <HAL_I2C_Master_Transmit+0x1ea>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b01      	cmp	r3, #1
 800409c:	d007      	beq.n	80040ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f042 0201 	orr.w	r2, r2, #1
 80040ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2221      	movs	r2, #33	; 0x21
 80040c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2210      	movs	r2, #16
 80040ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	893a      	ldrh	r2, [r7, #8]
 80040de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	4a50      	ldr	r2, [pc, #320]	; (8004230 <HAL_I2C_Master_Transmit+0x1f8>)
 80040ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040f0:	8979      	ldrh	r1, [r7, #10]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	6a3a      	ldr	r2, [r7, #32]
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 f89c 	bl	8004234 <I2C_MasterRequestWrite>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e08d      	b.n	8004222 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004106:	2300      	movs	r3, #0
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	613b      	str	r3, [r7, #16]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	613b      	str	r3, [r7, #16]
 800411a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800411c:	e066      	b.n	80041ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	6a39      	ldr	r1, [r7, #32]
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 f9de 	bl	80044e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00d      	beq.n	800414a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	2b04      	cmp	r3, #4
 8004134:	d107      	bne.n	8004146 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004144:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e06b      	b.n	8004222 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	781a      	ldrb	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	1c5a      	adds	r2, r3, #1
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004164:	b29b      	uxth	r3, r3
 8004166:	3b01      	subs	r3, #1
 8004168:	b29a      	uxth	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004172:	3b01      	subs	r3, #1
 8004174:	b29a      	uxth	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b04      	cmp	r3, #4
 8004186:	d11b      	bne.n	80041c0 <HAL_I2C_Master_Transmit+0x188>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800418c:	2b00      	cmp	r3, #0
 800418e:	d017      	beq.n	80041c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	781a      	ldrb	r2, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	6a39      	ldr	r1, [r7, #32]
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 f9ce 	bl	8004566 <I2C_WaitOnBTFFlagUntilTimeout>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00d      	beq.n	80041ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d4:	2b04      	cmp	r3, #4
 80041d6:	d107      	bne.n	80041e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e01a      	b.n	8004222 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d194      	bne.n	800411e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004202:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2220      	movs	r2, #32
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800421c:	2300      	movs	r3, #0
 800421e:	e000      	b.n	8004222 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004220:	2302      	movs	r3, #2
  }
}
 8004222:	4618      	mov	r0, r3
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	00100002 	.word	0x00100002
 8004230:	ffff0000 	.word	0xffff0000

08004234 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b088      	sub	sp, #32
 8004238:	af02      	add	r7, sp, #8
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	607a      	str	r2, [r7, #4]
 800423e:	603b      	str	r3, [r7, #0]
 8004240:	460b      	mov	r3, r1
 8004242:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004248:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	2b08      	cmp	r3, #8
 800424e:	d006      	beq.n	800425e <I2C_MasterRequestWrite+0x2a>
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d003      	beq.n	800425e <I2C_MasterRequestWrite+0x2a>
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800425c:	d108      	bne.n	8004270 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	e00b      	b.n	8004288 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004274:	2b12      	cmp	r3, #18
 8004276:	d107      	bne.n	8004288 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004286:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 f84f 	bl	8004338 <I2C_WaitOnFlagUntilTimeout>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00d      	beq.n	80042bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ae:	d103      	bne.n	80042b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e035      	b.n	8004328 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042c4:	d108      	bne.n	80042d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042c6:	897b      	ldrh	r3, [r7, #10]
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	461a      	mov	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042d4:	611a      	str	r2, [r3, #16]
 80042d6:	e01b      	b.n	8004310 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80042d8:	897b      	ldrh	r3, [r7, #10]
 80042da:	11db      	asrs	r3, r3, #7
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	f003 0306 	and.w	r3, r3, #6
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	f063 030f 	orn	r3, r3, #15
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	490e      	ldr	r1, [pc, #56]	; (8004330 <I2C_MasterRequestWrite+0xfc>)
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 f875 	bl	80043e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e010      	b.n	8004328 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004306:	897b      	ldrh	r3, [r7, #10]
 8004308:	b2da      	uxtb	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	4907      	ldr	r1, [pc, #28]	; (8004334 <I2C_MasterRequestWrite+0x100>)
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 f865 	bl	80043e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e000      	b.n	8004328 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	00010008 	.word	0x00010008
 8004334:	00010002 	.word	0x00010002

08004338 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	603b      	str	r3, [r7, #0]
 8004344:	4613      	mov	r3, r2
 8004346:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004348:	e025      	b.n	8004396 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004350:	d021      	beq.n	8004396 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004352:	f7fe fd5f 	bl	8002e14 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	429a      	cmp	r2, r3
 8004360:	d302      	bcc.n	8004368 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d116      	bne.n	8004396 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2220      	movs	r2, #32
 8004372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	f043 0220 	orr.w	r2, r3, #32
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e023      	b.n	80043de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	0c1b      	lsrs	r3, r3, #16
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b01      	cmp	r3, #1
 800439e:	d10d      	bne.n	80043bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	43da      	mvns	r2, r3
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	4013      	ands	r3, r2
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	bf0c      	ite	eq
 80043b2:	2301      	moveq	r3, #1
 80043b4:	2300      	movne	r3, #0
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	461a      	mov	r2, r3
 80043ba:	e00c      	b.n	80043d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	43da      	mvns	r2, r3
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	4013      	ands	r3, r2
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	bf0c      	ite	eq
 80043ce:	2301      	moveq	r3, #1
 80043d0:	2300      	movne	r3, #0
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	461a      	mov	r2, r3
 80043d6:	79fb      	ldrb	r3, [r7, #7]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d0b6      	beq.n	800434a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b084      	sub	sp, #16
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	60f8      	str	r0, [r7, #12]
 80043ee:	60b9      	str	r1, [r7, #8]
 80043f0:	607a      	str	r2, [r7, #4]
 80043f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043f4:	e051      	b.n	800449a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004404:	d123      	bne.n	800444e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004414:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800441e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2220      	movs	r2, #32
 800442a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	f043 0204 	orr.w	r2, r3, #4
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e046      	b.n	80044dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004454:	d021      	beq.n	800449a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004456:	f7fe fcdd 	bl	8002e14 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	429a      	cmp	r2, r3
 8004464:	d302      	bcc.n	800446c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d116      	bne.n	800449a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2220      	movs	r2, #32
 8004476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004486:	f043 0220 	orr.w	r2, r3, #32
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e020      	b.n	80044dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	0c1b      	lsrs	r3, r3, #16
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d10c      	bne.n	80044be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	43da      	mvns	r2, r3
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	4013      	ands	r3, r2
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	bf14      	ite	ne
 80044b6:	2301      	movne	r3, #1
 80044b8:	2300      	moveq	r3, #0
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	e00b      	b.n	80044d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	43da      	mvns	r2, r3
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	4013      	ands	r3, r2
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	bf14      	ite	ne
 80044d0:	2301      	movne	r3, #1
 80044d2:	2300      	moveq	r3, #0
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d18d      	bne.n	80043f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044f0:	e02d      	b.n	800454e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 f878 	bl	80045e8 <I2C_IsAcknowledgeFailed>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e02d      	b.n	800455e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004508:	d021      	beq.n	800454e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800450a:	f7fe fc83 	bl	8002e14 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	429a      	cmp	r2, r3
 8004518:	d302      	bcc.n	8004520 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d116      	bne.n	800454e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2220      	movs	r2, #32
 800452a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	f043 0220 	orr.w	r2, r3, #32
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e007      	b.n	800455e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004558:	2b80      	cmp	r3, #128	; 0x80
 800455a:	d1ca      	bne.n	80044f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b084      	sub	sp, #16
 800456a:	af00      	add	r7, sp, #0
 800456c:	60f8      	str	r0, [r7, #12]
 800456e:	60b9      	str	r1, [r7, #8]
 8004570:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004572:	e02d      	b.n	80045d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 f837 	bl	80045e8 <I2C_IsAcknowledgeFailed>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e02d      	b.n	80045e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800458a:	d021      	beq.n	80045d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800458c:	f7fe fc42 	bl	8002e14 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	429a      	cmp	r2, r3
 800459a:	d302      	bcc.n	80045a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d116      	bne.n	80045d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	f043 0220 	orr.w	r2, r3, #32
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e007      	b.n	80045e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	f003 0304 	and.w	r3, r3, #4
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d1ca      	bne.n	8004574 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045fe:	d11b      	bne.n	8004638 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004608:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2220      	movs	r2, #32
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004624:	f043 0204 	orr.w	r2, r3, #4
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e000      	b.n	800463a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
	...

08004648 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e0cc      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800465c:	4b68      	ldr	r3, [pc, #416]	; (8004800 <HAL_RCC_ClockConfig+0x1b8>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 030f 	and.w	r3, r3, #15
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	429a      	cmp	r2, r3
 8004668:	d90c      	bls.n	8004684 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800466a:	4b65      	ldr	r3, [pc, #404]	; (8004800 <HAL_RCC_ClockConfig+0x1b8>)
 800466c:	683a      	ldr	r2, [r7, #0]
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004672:	4b63      	ldr	r3, [pc, #396]	; (8004800 <HAL_RCC_ClockConfig+0x1b8>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 030f 	and.w	r3, r3, #15
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	429a      	cmp	r2, r3
 800467e:	d001      	beq.n	8004684 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e0b8      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d020      	beq.n	80046d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0304 	and.w	r3, r3, #4
 8004698:	2b00      	cmp	r3, #0
 800469a:	d005      	beq.n	80046a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800469c:	4b59      	ldr	r3, [pc, #356]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	4a58      	ldr	r2, [pc, #352]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80046a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0308 	and.w	r3, r3, #8
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d005      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046b4:	4b53      	ldr	r3, [pc, #332]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	4a52      	ldr	r2, [pc, #328]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80046ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046c0:	4b50      	ldr	r3, [pc, #320]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	494d      	ldr	r1, [pc, #308]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d044      	beq.n	8004768 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d107      	bne.n	80046f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046e6:	4b47      	ldr	r3, [pc, #284]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d119      	bne.n	8004726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e07f      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d003      	beq.n	8004706 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004702:	2b03      	cmp	r3, #3
 8004704:	d107      	bne.n	8004716 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004706:	4b3f      	ldr	r3, [pc, #252]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d109      	bne.n	8004726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e06f      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004716:	4b3b      	ldr	r3, [pc, #236]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e067      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004726:	4b37      	ldr	r3, [pc, #220]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f023 0203 	bic.w	r2, r3, #3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	4934      	ldr	r1, [pc, #208]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 8004734:	4313      	orrs	r3, r2
 8004736:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004738:	f7fe fb6c 	bl	8002e14 <HAL_GetTick>
 800473c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800473e:	e00a      	b.n	8004756 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004740:	f7fe fb68 	bl	8002e14 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	f241 3288 	movw	r2, #5000	; 0x1388
 800474e:	4293      	cmp	r3, r2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e04f      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004756:	4b2b      	ldr	r3, [pc, #172]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 020c 	and.w	r2, r3, #12
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	429a      	cmp	r2, r3
 8004766:	d1eb      	bne.n	8004740 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004768:	4b25      	ldr	r3, [pc, #148]	; (8004800 <HAL_RCC_ClockConfig+0x1b8>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 030f 	and.w	r3, r3, #15
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	429a      	cmp	r2, r3
 8004774:	d20c      	bcs.n	8004790 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004776:	4b22      	ldr	r3, [pc, #136]	; (8004800 <HAL_RCC_ClockConfig+0x1b8>)
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	b2d2      	uxtb	r2, r2
 800477c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800477e:	4b20      	ldr	r3, [pc, #128]	; (8004800 <HAL_RCC_ClockConfig+0x1b8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	429a      	cmp	r2, r3
 800478a:	d001      	beq.n	8004790 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e032      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	d008      	beq.n	80047ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800479c:	4b19      	ldr	r3, [pc, #100]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	4916      	ldr	r1, [pc, #88]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d009      	beq.n	80047ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047ba:	4b12      	ldr	r3, [pc, #72]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	00db      	lsls	r3, r3, #3
 80047c8:	490e      	ldr	r1, [pc, #56]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047ce:	f000 f855 	bl	800487c <HAL_RCC_GetSysClockFreq>
 80047d2:	4602      	mov	r2, r0
 80047d4:	4b0b      	ldr	r3, [pc, #44]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	091b      	lsrs	r3, r3, #4
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	490a      	ldr	r1, [pc, #40]	; (8004808 <HAL_RCC_ClockConfig+0x1c0>)
 80047e0:	5ccb      	ldrb	r3, [r1, r3]
 80047e2:	fa22 f303 	lsr.w	r3, r2, r3
 80047e6:	4a09      	ldr	r2, [pc, #36]	; (800480c <HAL_RCC_ClockConfig+0x1c4>)
 80047e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047ea:	4b09      	ldr	r3, [pc, #36]	; (8004810 <HAL_RCC_ClockConfig+0x1c8>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fe facc 	bl	8002d8c <HAL_InitTick>

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	40023c00 	.word	0x40023c00
 8004804:	40023800 	.word	0x40023800
 8004808:	0800a9e8 	.word	0x0800a9e8
 800480c:	20000024 	.word	0x20000024
 8004810:	20000028 	.word	0x20000028

08004814 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004818:	4b03      	ldr	r3, [pc, #12]	; (8004828 <HAL_RCC_GetHCLKFreq+0x14>)
 800481a:	681b      	ldr	r3, [r3, #0]
}
 800481c:	4618      	mov	r0, r3
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	20000024 	.word	0x20000024

0800482c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004830:	f7ff fff0 	bl	8004814 <HAL_RCC_GetHCLKFreq>
 8004834:	4602      	mov	r2, r0
 8004836:	4b05      	ldr	r3, [pc, #20]	; (800484c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	0a9b      	lsrs	r3, r3, #10
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	4903      	ldr	r1, [pc, #12]	; (8004850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004842:	5ccb      	ldrb	r3, [r1, r3]
 8004844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004848:	4618      	mov	r0, r3
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40023800 	.word	0x40023800
 8004850:	0800a9f8 	.word	0x0800a9f8

08004854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004858:	f7ff ffdc 	bl	8004814 <HAL_RCC_GetHCLKFreq>
 800485c:	4602      	mov	r2, r0
 800485e:	4b05      	ldr	r3, [pc, #20]	; (8004874 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	0b5b      	lsrs	r3, r3, #13
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	4903      	ldr	r1, [pc, #12]	; (8004878 <HAL_RCC_GetPCLK2Freq+0x24>)
 800486a:	5ccb      	ldrb	r3, [r1, r3]
 800486c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004870:	4618      	mov	r0, r3
 8004872:	bd80      	pop	{r7, pc}
 8004874:	40023800 	.word	0x40023800
 8004878:	0800a9f8 	.word	0x0800a9f8

0800487c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800487c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004880:	b0ae      	sub	sp, #184	; 0xb8
 8004882:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800488a:	2300      	movs	r3, #0
 800488c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004890:	2300      	movs	r3, #0
 8004892:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004896:	2300      	movs	r3, #0
 8004898:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048a2:	4bcb      	ldr	r3, [pc, #812]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x354>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 030c 	and.w	r3, r3, #12
 80048aa:	2b0c      	cmp	r3, #12
 80048ac:	f200 8206 	bhi.w	8004cbc <HAL_RCC_GetSysClockFreq+0x440>
 80048b0:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80048b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b6:	bf00      	nop
 80048b8:	080048ed 	.word	0x080048ed
 80048bc:	08004cbd 	.word	0x08004cbd
 80048c0:	08004cbd 	.word	0x08004cbd
 80048c4:	08004cbd 	.word	0x08004cbd
 80048c8:	080048f5 	.word	0x080048f5
 80048cc:	08004cbd 	.word	0x08004cbd
 80048d0:	08004cbd 	.word	0x08004cbd
 80048d4:	08004cbd 	.word	0x08004cbd
 80048d8:	080048fd 	.word	0x080048fd
 80048dc:	08004cbd 	.word	0x08004cbd
 80048e0:	08004cbd 	.word	0x08004cbd
 80048e4:	08004cbd 	.word	0x08004cbd
 80048e8:	08004aed 	.word	0x08004aed
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048ec:	4bb9      	ldr	r3, [pc, #740]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x358>)
 80048ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80048f2:	e1e7      	b.n	8004cc4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048f4:	4bb8      	ldr	r3, [pc, #736]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80048f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80048fa:	e1e3      	b.n	8004cc4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048fc:	4bb4      	ldr	r3, [pc, #720]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x354>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004904:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004908:	4bb1      	ldr	r3, [pc, #708]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x354>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d071      	beq.n	80049f8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004914:	4bae      	ldr	r3, [pc, #696]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	099b      	lsrs	r3, r3, #6
 800491a:	2200      	movs	r2, #0
 800491c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004920:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004924:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800492c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004930:	2300      	movs	r3, #0
 8004932:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004936:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800493a:	4622      	mov	r2, r4
 800493c:	462b      	mov	r3, r5
 800493e:	f04f 0000 	mov.w	r0, #0
 8004942:	f04f 0100 	mov.w	r1, #0
 8004946:	0159      	lsls	r1, r3, #5
 8004948:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800494c:	0150      	lsls	r0, r2, #5
 800494e:	4602      	mov	r2, r0
 8004950:	460b      	mov	r3, r1
 8004952:	4621      	mov	r1, r4
 8004954:	1a51      	subs	r1, r2, r1
 8004956:	6439      	str	r1, [r7, #64]	; 0x40
 8004958:	4629      	mov	r1, r5
 800495a:	eb63 0301 	sbc.w	r3, r3, r1
 800495e:	647b      	str	r3, [r7, #68]	; 0x44
 8004960:	f04f 0200 	mov.w	r2, #0
 8004964:	f04f 0300 	mov.w	r3, #0
 8004968:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800496c:	4649      	mov	r1, r9
 800496e:	018b      	lsls	r3, r1, #6
 8004970:	4641      	mov	r1, r8
 8004972:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004976:	4641      	mov	r1, r8
 8004978:	018a      	lsls	r2, r1, #6
 800497a:	4641      	mov	r1, r8
 800497c:	1a51      	subs	r1, r2, r1
 800497e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004980:	4649      	mov	r1, r9
 8004982:	eb63 0301 	sbc.w	r3, r3, r1
 8004986:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004988:	f04f 0200 	mov.w	r2, #0
 800498c:	f04f 0300 	mov.w	r3, #0
 8004990:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004994:	4649      	mov	r1, r9
 8004996:	00cb      	lsls	r3, r1, #3
 8004998:	4641      	mov	r1, r8
 800499a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800499e:	4641      	mov	r1, r8
 80049a0:	00ca      	lsls	r2, r1, #3
 80049a2:	4610      	mov	r0, r2
 80049a4:	4619      	mov	r1, r3
 80049a6:	4603      	mov	r3, r0
 80049a8:	4622      	mov	r2, r4
 80049aa:	189b      	adds	r3, r3, r2
 80049ac:	633b      	str	r3, [r7, #48]	; 0x30
 80049ae:	462b      	mov	r3, r5
 80049b0:	460a      	mov	r2, r1
 80049b2:	eb42 0303 	adc.w	r3, r2, r3
 80049b6:	637b      	str	r3, [r7, #52]	; 0x34
 80049b8:	f04f 0200 	mov.w	r2, #0
 80049bc:	f04f 0300 	mov.w	r3, #0
 80049c0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80049c4:	4629      	mov	r1, r5
 80049c6:	024b      	lsls	r3, r1, #9
 80049c8:	4621      	mov	r1, r4
 80049ca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80049ce:	4621      	mov	r1, r4
 80049d0:	024a      	lsls	r2, r1, #9
 80049d2:	4610      	mov	r0, r2
 80049d4:	4619      	mov	r1, r3
 80049d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049da:	2200      	movs	r2, #0
 80049dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80049e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80049e4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80049e8:	f7fc f90e 	bl	8000c08 <__aeabi_uldivmod>
 80049ec:	4602      	mov	r2, r0
 80049ee:	460b      	mov	r3, r1
 80049f0:	4613      	mov	r3, r2
 80049f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049f6:	e067      	b.n	8004ac8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049f8:	4b75      	ldr	r3, [pc, #468]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x354>)
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	099b      	lsrs	r3, r3, #6
 80049fe:	2200      	movs	r2, #0
 8004a00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a04:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004a08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a10:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a12:	2300      	movs	r3, #0
 8004a14:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a16:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004a1a:	4622      	mov	r2, r4
 8004a1c:	462b      	mov	r3, r5
 8004a1e:	f04f 0000 	mov.w	r0, #0
 8004a22:	f04f 0100 	mov.w	r1, #0
 8004a26:	0159      	lsls	r1, r3, #5
 8004a28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a2c:	0150      	lsls	r0, r2, #5
 8004a2e:	4602      	mov	r2, r0
 8004a30:	460b      	mov	r3, r1
 8004a32:	4621      	mov	r1, r4
 8004a34:	1a51      	subs	r1, r2, r1
 8004a36:	62b9      	str	r1, [r7, #40]	; 0x28
 8004a38:	4629      	mov	r1, r5
 8004a3a:	eb63 0301 	sbc.w	r3, r3, r1
 8004a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a40:	f04f 0200 	mov.w	r2, #0
 8004a44:	f04f 0300 	mov.w	r3, #0
 8004a48:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004a4c:	4649      	mov	r1, r9
 8004a4e:	018b      	lsls	r3, r1, #6
 8004a50:	4641      	mov	r1, r8
 8004a52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a56:	4641      	mov	r1, r8
 8004a58:	018a      	lsls	r2, r1, #6
 8004a5a:	4641      	mov	r1, r8
 8004a5c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a60:	4649      	mov	r1, r9
 8004a62:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a66:	f04f 0200 	mov.w	r2, #0
 8004a6a:	f04f 0300 	mov.w	r3, #0
 8004a6e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a72:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a7a:	4692      	mov	sl, r2
 8004a7c:	469b      	mov	fp, r3
 8004a7e:	4623      	mov	r3, r4
 8004a80:	eb1a 0303 	adds.w	r3, sl, r3
 8004a84:	623b      	str	r3, [r7, #32]
 8004a86:	462b      	mov	r3, r5
 8004a88:	eb4b 0303 	adc.w	r3, fp, r3
 8004a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a8e:	f04f 0200 	mov.w	r2, #0
 8004a92:	f04f 0300 	mov.w	r3, #0
 8004a96:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004a9a:	4629      	mov	r1, r5
 8004a9c:	028b      	lsls	r3, r1, #10
 8004a9e:	4621      	mov	r1, r4
 8004aa0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004aa4:	4621      	mov	r1, r4
 8004aa6:	028a      	lsls	r2, r1, #10
 8004aa8:	4610      	mov	r0, r2
 8004aaa:	4619      	mov	r1, r3
 8004aac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	673b      	str	r3, [r7, #112]	; 0x70
 8004ab4:	677a      	str	r2, [r7, #116]	; 0x74
 8004ab6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004aba:	f7fc f8a5 	bl	8000c08 <__aeabi_uldivmod>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ac8:	4b41      	ldr	r3, [pc, #260]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	0c1b      	lsrs	r3, r3, #16
 8004ace:	f003 0303 	and.w	r3, r3, #3
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004ada:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ade:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004aea:	e0eb      	b.n	8004cc4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004aec:	4b38      	ldr	r3, [pc, #224]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004af4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004af8:	4b35      	ldr	r3, [pc, #212]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d06b      	beq.n	8004bdc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b04:	4b32      	ldr	r3, [pc, #200]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	099b      	lsrs	r3, r3, #6
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b16:	663b      	str	r3, [r7, #96]	; 0x60
 8004b18:	2300      	movs	r3, #0
 8004b1a:	667b      	str	r3, [r7, #100]	; 0x64
 8004b1c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004b20:	4622      	mov	r2, r4
 8004b22:	462b      	mov	r3, r5
 8004b24:	f04f 0000 	mov.w	r0, #0
 8004b28:	f04f 0100 	mov.w	r1, #0
 8004b2c:	0159      	lsls	r1, r3, #5
 8004b2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b32:	0150      	lsls	r0, r2, #5
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	4621      	mov	r1, r4
 8004b3a:	1a51      	subs	r1, r2, r1
 8004b3c:	61b9      	str	r1, [r7, #24]
 8004b3e:	4629      	mov	r1, r5
 8004b40:	eb63 0301 	sbc.w	r3, r3, r1
 8004b44:	61fb      	str	r3, [r7, #28]
 8004b46:	f04f 0200 	mov.w	r2, #0
 8004b4a:	f04f 0300 	mov.w	r3, #0
 8004b4e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004b52:	4659      	mov	r1, fp
 8004b54:	018b      	lsls	r3, r1, #6
 8004b56:	4651      	mov	r1, sl
 8004b58:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b5c:	4651      	mov	r1, sl
 8004b5e:	018a      	lsls	r2, r1, #6
 8004b60:	4651      	mov	r1, sl
 8004b62:	ebb2 0801 	subs.w	r8, r2, r1
 8004b66:	4659      	mov	r1, fp
 8004b68:	eb63 0901 	sbc.w	r9, r3, r1
 8004b6c:	f04f 0200 	mov.w	r2, #0
 8004b70:	f04f 0300 	mov.w	r3, #0
 8004b74:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b78:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b7c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b80:	4690      	mov	r8, r2
 8004b82:	4699      	mov	r9, r3
 8004b84:	4623      	mov	r3, r4
 8004b86:	eb18 0303 	adds.w	r3, r8, r3
 8004b8a:	613b      	str	r3, [r7, #16]
 8004b8c:	462b      	mov	r3, r5
 8004b8e:	eb49 0303 	adc.w	r3, r9, r3
 8004b92:	617b      	str	r3, [r7, #20]
 8004b94:	f04f 0200 	mov.w	r2, #0
 8004b98:	f04f 0300 	mov.w	r3, #0
 8004b9c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004ba0:	4629      	mov	r1, r5
 8004ba2:	024b      	lsls	r3, r1, #9
 8004ba4:	4621      	mov	r1, r4
 8004ba6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004baa:	4621      	mov	r1, r4
 8004bac:	024a      	lsls	r2, r1, #9
 8004bae:	4610      	mov	r0, r2
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004bba:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004bbc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004bc0:	f7fc f822 	bl	8000c08 <__aeabi_uldivmod>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	4613      	mov	r3, r2
 8004bca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bce:	e065      	b.n	8004c9c <HAL_RCC_GetSysClockFreq+0x420>
 8004bd0:	40023800 	.word	0x40023800
 8004bd4:	00f42400 	.word	0x00f42400
 8004bd8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bdc:	4b3d      	ldr	r3, [pc, #244]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0x458>)
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	099b      	lsrs	r3, r3, #6
 8004be2:	2200      	movs	r2, #0
 8004be4:	4618      	mov	r0, r3
 8004be6:	4611      	mov	r1, r2
 8004be8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004bec:	653b      	str	r3, [r7, #80]	; 0x50
 8004bee:	2300      	movs	r3, #0
 8004bf0:	657b      	str	r3, [r7, #84]	; 0x54
 8004bf2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004bf6:	4642      	mov	r2, r8
 8004bf8:	464b      	mov	r3, r9
 8004bfa:	f04f 0000 	mov.w	r0, #0
 8004bfe:	f04f 0100 	mov.w	r1, #0
 8004c02:	0159      	lsls	r1, r3, #5
 8004c04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c08:	0150      	lsls	r0, r2, #5
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	4641      	mov	r1, r8
 8004c10:	1a51      	subs	r1, r2, r1
 8004c12:	60b9      	str	r1, [r7, #8]
 8004c14:	4649      	mov	r1, r9
 8004c16:	eb63 0301 	sbc.w	r3, r3, r1
 8004c1a:	60fb      	str	r3, [r7, #12]
 8004c1c:	f04f 0200 	mov.w	r2, #0
 8004c20:	f04f 0300 	mov.w	r3, #0
 8004c24:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004c28:	4659      	mov	r1, fp
 8004c2a:	018b      	lsls	r3, r1, #6
 8004c2c:	4651      	mov	r1, sl
 8004c2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c32:	4651      	mov	r1, sl
 8004c34:	018a      	lsls	r2, r1, #6
 8004c36:	4651      	mov	r1, sl
 8004c38:	1a54      	subs	r4, r2, r1
 8004c3a:	4659      	mov	r1, fp
 8004c3c:	eb63 0501 	sbc.w	r5, r3, r1
 8004c40:	f04f 0200 	mov.w	r2, #0
 8004c44:	f04f 0300 	mov.w	r3, #0
 8004c48:	00eb      	lsls	r3, r5, #3
 8004c4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c4e:	00e2      	lsls	r2, r4, #3
 8004c50:	4614      	mov	r4, r2
 8004c52:	461d      	mov	r5, r3
 8004c54:	4643      	mov	r3, r8
 8004c56:	18e3      	adds	r3, r4, r3
 8004c58:	603b      	str	r3, [r7, #0]
 8004c5a:	464b      	mov	r3, r9
 8004c5c:	eb45 0303 	adc.w	r3, r5, r3
 8004c60:	607b      	str	r3, [r7, #4]
 8004c62:	f04f 0200 	mov.w	r2, #0
 8004c66:	f04f 0300 	mov.w	r3, #0
 8004c6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c6e:	4629      	mov	r1, r5
 8004c70:	028b      	lsls	r3, r1, #10
 8004c72:	4621      	mov	r1, r4
 8004c74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c78:	4621      	mov	r1, r4
 8004c7a:	028a      	lsls	r2, r1, #10
 8004c7c:	4610      	mov	r0, r2
 8004c7e:	4619      	mov	r1, r3
 8004c80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c84:	2200      	movs	r2, #0
 8004c86:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c88:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004c8a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c8e:	f7fb ffbb 	bl	8000c08 <__aeabi_uldivmod>
 8004c92:	4602      	mov	r2, r0
 8004c94:	460b      	mov	r3, r1
 8004c96:	4613      	mov	r3, r2
 8004c98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004c9c:	4b0d      	ldr	r3, [pc, #52]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0x458>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	0f1b      	lsrs	r3, r3, #28
 8004ca2:	f003 0307 	and.w	r3, r3, #7
 8004ca6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004caa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004cae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004cba:	e003      	b.n	8004cc4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cbc:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004cbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004cc2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	37b8      	adds	r7, #184	; 0xb8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cd2:	bf00      	nop
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	00f42400 	.word	0x00f42400

08004cdc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e28d      	b.n	800520a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f000 8083 	beq.w	8004e02 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004cfc:	4b94      	ldr	r3, [pc, #592]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f003 030c 	and.w	r3, r3, #12
 8004d04:	2b04      	cmp	r3, #4
 8004d06:	d019      	beq.n	8004d3c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004d08:	4b91      	ldr	r3, [pc, #580]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d106      	bne.n	8004d22 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004d14:	4b8e      	ldr	r3, [pc, #568]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d20:	d00c      	beq.n	8004d3c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d22:	4b8b      	ldr	r3, [pc, #556]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004d2a:	2b0c      	cmp	r3, #12
 8004d2c:	d112      	bne.n	8004d54 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d2e:	4b88      	ldr	r3, [pc, #544]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d3a:	d10b      	bne.n	8004d54 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d3c:	4b84      	ldr	r3, [pc, #528]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d05b      	beq.n	8004e00 <HAL_RCC_OscConfig+0x124>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d157      	bne.n	8004e00 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e25a      	b.n	800520a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d5c:	d106      	bne.n	8004d6c <HAL_RCC_OscConfig+0x90>
 8004d5e:	4b7c      	ldr	r3, [pc, #496]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a7b      	ldr	r2, [pc, #492]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	e01d      	b.n	8004da8 <HAL_RCC_OscConfig+0xcc>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d74:	d10c      	bne.n	8004d90 <HAL_RCC_OscConfig+0xb4>
 8004d76:	4b76      	ldr	r3, [pc, #472]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a75      	ldr	r2, [pc, #468]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d80:	6013      	str	r3, [r2, #0]
 8004d82:	4b73      	ldr	r3, [pc, #460]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a72      	ldr	r2, [pc, #456]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d8c:	6013      	str	r3, [r2, #0]
 8004d8e:	e00b      	b.n	8004da8 <HAL_RCC_OscConfig+0xcc>
 8004d90:	4b6f      	ldr	r3, [pc, #444]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a6e      	ldr	r2, [pc, #440]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d9a:	6013      	str	r3, [r2, #0]
 8004d9c:	4b6c      	ldr	r3, [pc, #432]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a6b      	ldr	r2, [pc, #428]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004da6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d013      	beq.n	8004dd8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db0:	f7fe f830 	bl	8002e14 <HAL_GetTick>
 8004db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004db8:	f7fe f82c 	bl	8002e14 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b64      	cmp	r3, #100	; 0x64
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e21f      	b.n	800520a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dca:	4b61      	ldr	r3, [pc, #388]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d0f0      	beq.n	8004db8 <HAL_RCC_OscConfig+0xdc>
 8004dd6:	e014      	b.n	8004e02 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd8:	f7fe f81c 	bl	8002e14 <HAL_GetTick>
 8004ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dde:	e008      	b.n	8004df2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004de0:	f7fe f818 	bl	8002e14 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b64      	cmp	r3, #100	; 0x64
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e20b      	b.n	800520a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004df2:	4b57      	ldr	r3, [pc, #348]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1f0      	bne.n	8004de0 <HAL_RCC_OscConfig+0x104>
 8004dfe:	e000      	b.n	8004e02 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d06f      	beq.n	8004eee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004e0e:	4b50      	ldr	r3, [pc, #320]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 030c 	and.w	r3, r3, #12
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d017      	beq.n	8004e4a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004e1a:	4b4d      	ldr	r3, [pc, #308]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004e22:	2b08      	cmp	r3, #8
 8004e24:	d105      	bne.n	8004e32 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004e26:	4b4a      	ldr	r3, [pc, #296]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00b      	beq.n	8004e4a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e32:	4b47      	ldr	r3, [pc, #284]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004e3a:	2b0c      	cmp	r3, #12
 8004e3c:	d11c      	bne.n	8004e78 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e3e:	4b44      	ldr	r3, [pc, #272]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d116      	bne.n	8004e78 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e4a:	4b41      	ldr	r3, [pc, #260]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d005      	beq.n	8004e62 <HAL_RCC_OscConfig+0x186>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d001      	beq.n	8004e62 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e1d3      	b.n	800520a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e62:	4b3b      	ldr	r3, [pc, #236]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	4937      	ldr	r1, [pc, #220]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e76:	e03a      	b.n	8004eee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d020      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e80:	4b34      	ldr	r3, [pc, #208]	; (8004f54 <HAL_RCC_OscConfig+0x278>)
 8004e82:	2201      	movs	r2, #1
 8004e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e86:	f7fd ffc5 	bl	8002e14 <HAL_GetTick>
 8004e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e8c:	e008      	b.n	8004ea0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e8e:	f7fd ffc1 	bl	8002e14 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e1b4      	b.n	800520a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ea0:	4b2b      	ldr	r3, [pc, #172]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0f0      	beq.n	8004e8e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eac:	4b28      	ldr	r3, [pc, #160]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	4925      	ldr	r1, [pc, #148]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	600b      	str	r3, [r1, #0]
 8004ec0:	e015      	b.n	8004eee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ec2:	4b24      	ldr	r3, [pc, #144]	; (8004f54 <HAL_RCC_OscConfig+0x278>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec8:	f7fd ffa4 	bl	8002e14 <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ed0:	f7fd ffa0 	bl	8002e14 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e193      	b.n	800520a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ee2:	4b1b      	ldr	r3, [pc, #108]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1f0      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d036      	beq.n	8004f68 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d016      	beq.n	8004f30 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f02:	4b15      	ldr	r3, [pc, #84]	; (8004f58 <HAL_RCC_OscConfig+0x27c>)
 8004f04:	2201      	movs	r2, #1
 8004f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f08:	f7fd ff84 	bl	8002e14 <HAL_GetTick>
 8004f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f10:	f7fd ff80 	bl	8002e14 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e173      	b.n	800520a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f22:	4b0b      	ldr	r3, [pc, #44]	; (8004f50 <HAL_RCC_OscConfig+0x274>)
 8004f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d0f0      	beq.n	8004f10 <HAL_RCC_OscConfig+0x234>
 8004f2e:	e01b      	b.n	8004f68 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f30:	4b09      	ldr	r3, [pc, #36]	; (8004f58 <HAL_RCC_OscConfig+0x27c>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f36:	f7fd ff6d 	bl	8002e14 <HAL_GetTick>
 8004f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f3c:	e00e      	b.n	8004f5c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f3e:	f7fd ff69 	bl	8002e14 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d907      	bls.n	8004f5c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e15c      	b.n	800520a <HAL_RCC_OscConfig+0x52e>
 8004f50:	40023800 	.word	0x40023800
 8004f54:	42470000 	.word	0x42470000
 8004f58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f5c:	4b8a      	ldr	r3, [pc, #552]	; (8005188 <HAL_RCC_OscConfig+0x4ac>)
 8004f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1ea      	bne.n	8004f3e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0304 	and.w	r3, r3, #4
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 8097 	beq.w	80050a4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f76:	2300      	movs	r3, #0
 8004f78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f7a:	4b83      	ldr	r3, [pc, #524]	; (8005188 <HAL_RCC_OscConfig+0x4ac>)
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10f      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f86:	2300      	movs	r3, #0
 8004f88:	60bb      	str	r3, [r7, #8]
 8004f8a:	4b7f      	ldr	r3, [pc, #508]	; (8005188 <HAL_RCC_OscConfig+0x4ac>)
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8e:	4a7e      	ldr	r2, [pc, #504]	; (8005188 <HAL_RCC_OscConfig+0x4ac>)
 8004f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f94:	6413      	str	r3, [r2, #64]	; 0x40
 8004f96:	4b7c      	ldr	r3, [pc, #496]	; (8005188 <HAL_RCC_OscConfig+0x4ac>)
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f9e:	60bb      	str	r3, [r7, #8]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fa6:	4b79      	ldr	r3, [pc, #484]	; (800518c <HAL_RCC_OscConfig+0x4b0>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d118      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fb2:	4b76      	ldr	r3, [pc, #472]	; (800518c <HAL_RCC_OscConfig+0x4b0>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a75      	ldr	r2, [pc, #468]	; (800518c <HAL_RCC_OscConfig+0x4b0>)
 8004fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fbe:	f7fd ff29 	bl	8002e14 <HAL_GetTick>
 8004fc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fc4:	e008      	b.n	8004fd8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fc6:	f7fd ff25 	bl	8002e14 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d901      	bls.n	8004fd8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e118      	b.n	800520a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fd8:	4b6c      	ldr	r3, [pc, #432]	; (800518c <HAL_RCC_OscConfig+0x4b0>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0f0      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d106      	bne.n	8004ffa <HAL_RCC_OscConfig+0x31e>
 8004fec:	4b66      	ldr	r3, [pc, #408]	; (8005188 <HAL_RCC_OscConfig+0x4ac>)
 8004fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff0:	4a65      	ldr	r2, [pc, #404]	; (8005188 <HAL_RCC_OscConfig+0x4ac>)
 8004ff2:	f043 0301 	orr.w	r3, r3, #1
 8004ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ff8:	e01c      	b.n	8005034 <HAL_RCC_OscConfig+0x358>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	2b05      	cmp	r3, #5
 8005000:	d10c      	bne.n	800501c <HAL_RCC_OscConfig+0x340>
 8005002:	4b61      	ldr	r3, [pc, #388]	; (8005188 <HAL_RCC_OscConfig+0x4ac>)
 8005004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005006:	4a60      	ldr	r2, [pc, #384]	; (8005188 <HAL_RCC_OscConfig+0x4ac>)
 8005008:	f043 0304 	orr.w	r3, r3, #4
 800500c:	6713      	str	r3, [r2, #112]	; 0x70
 800500e:	4b5e      	ldr	r3, [pc, #376]	; (8005188 <HAL_RCC_OscConfig+0x4ac>)
 8005010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005012:	4a5d      	ldr	r2, [pc, #372]	; (8005188 <HAL_RCC_OscConfig+0x4ac>)
 8005014:	f043 0301 	orr.w	r3, r3, #1
 8005018:	6713      	str	r3, [r2, #112]	; 0x70
 800501a:	e00b      	b.n	8005034 <HAL_RCC_OscConfig+0x358>
 800501c:	4b5a      	ldr	r3, [pc, #360]	; (8005188 <HAL_RCC_OscConfig+0x4ac>)
 800501e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005020:	4a59      	ldr	r2, [pc, #356]	; (8005188 <HAL_RCC_OscConfig+0x4ac>)
 8005022:	f023 0301 	bic.w	r3, r3, #1
 8005026:	6713      	str	r3, [r2, #112]	; 0x70
 8005028:	4b57      	ldr	r3, [pc, #348]	; (8005188 <HAL_RCC_OscConfig+0x4ac>)
 800502a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502c:	4a56      	ldr	r2, [pc, #344]	; (8005188 <HAL_RCC_OscConfig+0x4ac>)
 800502e:	f023 0304 	bic.w	r3, r3, #4
 8005032:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d015      	beq.n	8005068 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800503c:	f7fd feea 	bl	8002e14 <HAL_GetTick>
 8005040:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005042:	e00a      	b.n	800505a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005044:	f7fd fee6 	bl	8002e14 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005052:	4293      	cmp	r3, r2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e0d7      	b.n	800520a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800505a:	4b4b      	ldr	r3, [pc, #300]	; (8005188 <HAL_RCC_OscConfig+0x4ac>)
 800505c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0ee      	beq.n	8005044 <HAL_RCC_OscConfig+0x368>
 8005066:	e014      	b.n	8005092 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005068:	f7fd fed4 	bl	8002e14 <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800506e:	e00a      	b.n	8005086 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005070:	f7fd fed0 	bl	8002e14 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	f241 3288 	movw	r2, #5000	; 0x1388
 800507e:	4293      	cmp	r3, r2
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e0c1      	b.n	800520a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005086:	4b40      	ldr	r3, [pc, #256]	; (8005188 <HAL_RCC_OscConfig+0x4ac>)
 8005088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1ee      	bne.n	8005070 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005092:	7dfb      	ldrb	r3, [r7, #23]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d105      	bne.n	80050a4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005098:	4b3b      	ldr	r3, [pc, #236]	; (8005188 <HAL_RCC_OscConfig+0x4ac>)
 800509a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509c:	4a3a      	ldr	r2, [pc, #232]	; (8005188 <HAL_RCC_OscConfig+0x4ac>)
 800509e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 80ad 	beq.w	8005208 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050ae:	4b36      	ldr	r3, [pc, #216]	; (8005188 <HAL_RCC_OscConfig+0x4ac>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 030c 	and.w	r3, r3, #12
 80050b6:	2b08      	cmp	r3, #8
 80050b8:	d060      	beq.n	800517c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d145      	bne.n	800514e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050c2:	4b33      	ldr	r3, [pc, #204]	; (8005190 <HAL_RCC_OscConfig+0x4b4>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c8:	f7fd fea4 	bl	8002e14 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050d0:	f7fd fea0 	bl	8002e14 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e093      	b.n	800520a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050e2:	4b29      	ldr	r3, [pc, #164]	; (8005188 <HAL_RCC_OscConfig+0x4ac>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1f0      	bne.n	80050d0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	69da      	ldr	r2, [r3, #28]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	431a      	orrs	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	019b      	lsls	r3, r3, #6
 80050fe:	431a      	orrs	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005104:	085b      	lsrs	r3, r3, #1
 8005106:	3b01      	subs	r3, #1
 8005108:	041b      	lsls	r3, r3, #16
 800510a:	431a      	orrs	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005110:	061b      	lsls	r3, r3, #24
 8005112:	431a      	orrs	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005118:	071b      	lsls	r3, r3, #28
 800511a:	491b      	ldr	r1, [pc, #108]	; (8005188 <HAL_RCC_OscConfig+0x4ac>)
 800511c:	4313      	orrs	r3, r2
 800511e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005120:	4b1b      	ldr	r3, [pc, #108]	; (8005190 <HAL_RCC_OscConfig+0x4b4>)
 8005122:	2201      	movs	r2, #1
 8005124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005126:	f7fd fe75 	bl	8002e14 <HAL_GetTick>
 800512a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800512c:	e008      	b.n	8005140 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800512e:	f7fd fe71 	bl	8002e14 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	2b02      	cmp	r3, #2
 800513a:	d901      	bls.n	8005140 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e064      	b.n	800520a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005140:	4b11      	ldr	r3, [pc, #68]	; (8005188 <HAL_RCC_OscConfig+0x4ac>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d0f0      	beq.n	800512e <HAL_RCC_OscConfig+0x452>
 800514c:	e05c      	b.n	8005208 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800514e:	4b10      	ldr	r3, [pc, #64]	; (8005190 <HAL_RCC_OscConfig+0x4b4>)
 8005150:	2200      	movs	r2, #0
 8005152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005154:	f7fd fe5e 	bl	8002e14 <HAL_GetTick>
 8005158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800515a:	e008      	b.n	800516e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800515c:	f7fd fe5a 	bl	8002e14 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b02      	cmp	r3, #2
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e04d      	b.n	800520a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800516e:	4b06      	ldr	r3, [pc, #24]	; (8005188 <HAL_RCC_OscConfig+0x4ac>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1f0      	bne.n	800515c <HAL_RCC_OscConfig+0x480>
 800517a:	e045      	b.n	8005208 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d107      	bne.n	8005194 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e040      	b.n	800520a <HAL_RCC_OscConfig+0x52e>
 8005188:	40023800 	.word	0x40023800
 800518c:	40007000 	.word	0x40007000
 8005190:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005194:	4b1f      	ldr	r3, [pc, #124]	; (8005214 <HAL_RCC_OscConfig+0x538>)
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d030      	beq.n	8005204 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d129      	bne.n	8005204 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d122      	bne.n	8005204 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80051c4:	4013      	ands	r3, r2
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d119      	bne.n	8005204 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051da:	085b      	lsrs	r3, r3, #1
 80051dc:	3b01      	subs	r3, #1
 80051de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d10f      	bne.n	8005204 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d107      	bne.n	8005204 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005200:	429a      	cmp	r2, r3
 8005202:	d001      	beq.n	8005208 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e000      	b.n	800520a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3718      	adds	r7, #24
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	40023800 	.word	0x40023800

08005218 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e041      	b.n	80052ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d106      	bne.n	8005244 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7fd fb5c 	bl	80028fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2202      	movs	r2, #2
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	3304      	adds	r3, #4
 8005254:	4619      	mov	r1, r3
 8005256:	4610      	mov	r0, r2
 8005258:	f000 fe86 	bl	8005f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3708      	adds	r7, #8
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
	...

080052b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d001      	beq.n	80052d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e04e      	b.n	800536e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68da      	ldr	r2, [r3, #12]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f042 0201 	orr.w	r2, r2, #1
 80052e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a23      	ldr	r2, [pc, #140]	; (800537c <HAL_TIM_Base_Start_IT+0xc4>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d022      	beq.n	8005338 <HAL_TIM_Base_Start_IT+0x80>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052fa:	d01d      	beq.n	8005338 <HAL_TIM_Base_Start_IT+0x80>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a1f      	ldr	r2, [pc, #124]	; (8005380 <HAL_TIM_Base_Start_IT+0xc8>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d018      	beq.n	8005338 <HAL_TIM_Base_Start_IT+0x80>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a1e      	ldr	r2, [pc, #120]	; (8005384 <HAL_TIM_Base_Start_IT+0xcc>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d013      	beq.n	8005338 <HAL_TIM_Base_Start_IT+0x80>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a1c      	ldr	r2, [pc, #112]	; (8005388 <HAL_TIM_Base_Start_IT+0xd0>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d00e      	beq.n	8005338 <HAL_TIM_Base_Start_IT+0x80>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a1b      	ldr	r2, [pc, #108]	; (800538c <HAL_TIM_Base_Start_IT+0xd4>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d009      	beq.n	8005338 <HAL_TIM_Base_Start_IT+0x80>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a19      	ldr	r2, [pc, #100]	; (8005390 <HAL_TIM_Base_Start_IT+0xd8>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d004      	beq.n	8005338 <HAL_TIM_Base_Start_IT+0x80>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a18      	ldr	r2, [pc, #96]	; (8005394 <HAL_TIM_Base_Start_IT+0xdc>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d111      	bne.n	800535c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f003 0307 	and.w	r3, r3, #7
 8005342:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2b06      	cmp	r3, #6
 8005348:	d010      	beq.n	800536c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f042 0201 	orr.w	r2, r2, #1
 8005358:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800535a:	e007      	b.n	800536c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f042 0201 	orr.w	r2, r2, #1
 800536a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3714      	adds	r7, #20
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	40010000 	.word	0x40010000
 8005380:	40000400 	.word	0x40000400
 8005384:	40000800 	.word	0x40000800
 8005388:	40000c00 	.word	0x40000c00
 800538c:	40010400 	.word	0x40010400
 8005390:	40014000 	.word	0x40014000
 8005394:	40001800 	.word	0x40001800

08005398 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e041      	b.n	800542e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d106      	bne.n	80053c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f839 	bl	8005436 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2202      	movs	r2, #2
 80053c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	3304      	adds	r3, #4
 80053d4:	4619      	mov	r1, r3
 80053d6:	4610      	mov	r0, r2
 80053d8:	f000 fdc6 	bl	8005f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005436:	b480      	push	{r7}
 8005438:	b083      	sub	sp, #12
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800543e:	bf00      	nop
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
	...

0800544c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d109      	bne.n	8005470 <HAL_TIM_PWM_Start+0x24>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b01      	cmp	r3, #1
 8005466:	bf14      	ite	ne
 8005468:	2301      	movne	r3, #1
 800546a:	2300      	moveq	r3, #0
 800546c:	b2db      	uxtb	r3, r3
 800546e:	e022      	b.n	80054b6 <HAL_TIM_PWM_Start+0x6a>
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	2b04      	cmp	r3, #4
 8005474:	d109      	bne.n	800548a <HAL_TIM_PWM_Start+0x3e>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b01      	cmp	r3, #1
 8005480:	bf14      	ite	ne
 8005482:	2301      	movne	r3, #1
 8005484:	2300      	moveq	r3, #0
 8005486:	b2db      	uxtb	r3, r3
 8005488:	e015      	b.n	80054b6 <HAL_TIM_PWM_Start+0x6a>
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2b08      	cmp	r3, #8
 800548e:	d109      	bne.n	80054a4 <HAL_TIM_PWM_Start+0x58>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b01      	cmp	r3, #1
 800549a:	bf14      	ite	ne
 800549c:	2301      	movne	r3, #1
 800549e:	2300      	moveq	r3, #0
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	e008      	b.n	80054b6 <HAL_TIM_PWM_Start+0x6a>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	bf14      	ite	ne
 80054b0:	2301      	movne	r3, #1
 80054b2:	2300      	moveq	r3, #0
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e07c      	b.n	80055b8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d104      	bne.n	80054ce <HAL_TIM_PWM_Start+0x82>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2202      	movs	r2, #2
 80054c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054cc:	e013      	b.n	80054f6 <HAL_TIM_PWM_Start+0xaa>
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	2b04      	cmp	r3, #4
 80054d2:	d104      	bne.n	80054de <HAL_TIM_PWM_Start+0x92>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2202      	movs	r2, #2
 80054d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054dc:	e00b      	b.n	80054f6 <HAL_TIM_PWM_Start+0xaa>
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	2b08      	cmp	r3, #8
 80054e2:	d104      	bne.n	80054ee <HAL_TIM_PWM_Start+0xa2>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2202      	movs	r2, #2
 80054e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054ec:	e003      	b.n	80054f6 <HAL_TIM_PWM_Start+0xaa>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2202      	movs	r2, #2
 80054f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2201      	movs	r2, #1
 80054fc:	6839      	ldr	r1, [r7, #0]
 80054fe:	4618      	mov	r0, r3
 8005500:	f001 f946 	bl	8006790 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a2d      	ldr	r2, [pc, #180]	; (80055c0 <HAL_TIM_PWM_Start+0x174>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d004      	beq.n	8005518 <HAL_TIM_PWM_Start+0xcc>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a2c      	ldr	r2, [pc, #176]	; (80055c4 <HAL_TIM_PWM_Start+0x178>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d101      	bne.n	800551c <HAL_TIM_PWM_Start+0xd0>
 8005518:	2301      	movs	r3, #1
 800551a:	e000      	b.n	800551e <HAL_TIM_PWM_Start+0xd2>
 800551c:	2300      	movs	r3, #0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d007      	beq.n	8005532 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005530:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a22      	ldr	r2, [pc, #136]	; (80055c0 <HAL_TIM_PWM_Start+0x174>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d022      	beq.n	8005582 <HAL_TIM_PWM_Start+0x136>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005544:	d01d      	beq.n	8005582 <HAL_TIM_PWM_Start+0x136>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a1f      	ldr	r2, [pc, #124]	; (80055c8 <HAL_TIM_PWM_Start+0x17c>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d018      	beq.n	8005582 <HAL_TIM_PWM_Start+0x136>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a1d      	ldr	r2, [pc, #116]	; (80055cc <HAL_TIM_PWM_Start+0x180>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d013      	beq.n	8005582 <HAL_TIM_PWM_Start+0x136>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a1c      	ldr	r2, [pc, #112]	; (80055d0 <HAL_TIM_PWM_Start+0x184>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d00e      	beq.n	8005582 <HAL_TIM_PWM_Start+0x136>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a16      	ldr	r2, [pc, #88]	; (80055c4 <HAL_TIM_PWM_Start+0x178>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d009      	beq.n	8005582 <HAL_TIM_PWM_Start+0x136>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a18      	ldr	r2, [pc, #96]	; (80055d4 <HAL_TIM_PWM_Start+0x188>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d004      	beq.n	8005582 <HAL_TIM_PWM_Start+0x136>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a16      	ldr	r2, [pc, #88]	; (80055d8 <HAL_TIM_PWM_Start+0x18c>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d111      	bne.n	80055a6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f003 0307 	and.w	r3, r3, #7
 800558c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2b06      	cmp	r3, #6
 8005592:	d010      	beq.n	80055b6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f042 0201 	orr.w	r2, r2, #1
 80055a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a4:	e007      	b.n	80055b6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f042 0201 	orr.w	r2, r2, #1
 80055b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3710      	adds	r7, #16
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	40010000 	.word	0x40010000
 80055c4:	40010400 	.word	0x40010400
 80055c8:	40000400 	.word	0x40000400
 80055cc:	40000800 	.word	0x40000800
 80055d0:	40000c00 	.word	0x40000c00
 80055d4:	40014000 	.word	0x40014000
 80055d8:	40001800 	.word	0x40001800

080055dc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e041      	b.n	8005672 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d106      	bne.n	8005608 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f839 	bl	800567a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2202      	movs	r2, #2
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	3304      	adds	r3, #4
 8005618:	4619      	mov	r1, r3
 800561a:	4610      	mov	r0, r2
 800561c:	f000 fca4 	bl	8005f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800567a:	b480      	push	{r7}
 800567c:	b083      	sub	sp, #12
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005682:	bf00      	nop
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
	...

08005690 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d104      	bne.n	80056aa <HAL_TIM_IC_Start+0x1a>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	e013      	b.n	80056d2 <HAL_TIM_IC_Start+0x42>
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	2b04      	cmp	r3, #4
 80056ae:	d104      	bne.n	80056ba <HAL_TIM_IC_Start+0x2a>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	e00b      	b.n	80056d2 <HAL_TIM_IC_Start+0x42>
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	2b08      	cmp	r3, #8
 80056be:	d104      	bne.n	80056ca <HAL_TIM_IC_Start+0x3a>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	e003      	b.n	80056d2 <HAL_TIM_IC_Start+0x42>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d104      	bne.n	80056e4 <HAL_TIM_IC_Start+0x54>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	e013      	b.n	800570c <HAL_TIM_IC_Start+0x7c>
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	2b04      	cmp	r3, #4
 80056e8:	d104      	bne.n	80056f4 <HAL_TIM_IC_Start+0x64>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	e00b      	b.n	800570c <HAL_TIM_IC_Start+0x7c>
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	2b08      	cmp	r3, #8
 80056f8:	d104      	bne.n	8005704 <HAL_TIM_IC_Start+0x74>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005700:	b2db      	uxtb	r3, r3
 8005702:	e003      	b.n	800570c <HAL_TIM_IC_Start+0x7c>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800570a:	b2db      	uxtb	r3, r3
 800570c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800570e:	7bfb      	ldrb	r3, [r7, #15]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d102      	bne.n	800571a <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005714:	7bbb      	ldrb	r3, [r7, #14]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d001      	beq.n	800571e <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e081      	b.n	8005822 <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d104      	bne.n	800572e <HAL_TIM_IC_Start+0x9e>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2202      	movs	r2, #2
 8005728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800572c:	e013      	b.n	8005756 <HAL_TIM_IC_Start+0xc6>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2b04      	cmp	r3, #4
 8005732:	d104      	bne.n	800573e <HAL_TIM_IC_Start+0xae>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2202      	movs	r2, #2
 8005738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800573c:	e00b      	b.n	8005756 <HAL_TIM_IC_Start+0xc6>
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b08      	cmp	r3, #8
 8005742:	d104      	bne.n	800574e <HAL_TIM_IC_Start+0xbe>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2202      	movs	r2, #2
 8005748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800574c:	e003      	b.n	8005756 <HAL_TIM_IC_Start+0xc6>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2202      	movs	r2, #2
 8005752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d104      	bne.n	8005766 <HAL_TIM_IC_Start+0xd6>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2202      	movs	r2, #2
 8005760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005764:	e013      	b.n	800578e <HAL_TIM_IC_Start+0xfe>
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	2b04      	cmp	r3, #4
 800576a:	d104      	bne.n	8005776 <HAL_TIM_IC_Start+0xe6>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2202      	movs	r2, #2
 8005770:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005774:	e00b      	b.n	800578e <HAL_TIM_IC_Start+0xfe>
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b08      	cmp	r3, #8
 800577a:	d104      	bne.n	8005786 <HAL_TIM_IC_Start+0xf6>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2202      	movs	r2, #2
 8005780:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005784:	e003      	b.n	800578e <HAL_TIM_IC_Start+0xfe>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2202      	movs	r2, #2
 800578a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2201      	movs	r2, #1
 8005794:	6839      	ldr	r1, [r7, #0]
 8005796:	4618      	mov	r0, r3
 8005798:	f000 fffa 	bl	8006790 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a22      	ldr	r2, [pc, #136]	; (800582c <HAL_TIM_IC_Start+0x19c>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d022      	beq.n	80057ec <HAL_TIM_IC_Start+0x15c>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ae:	d01d      	beq.n	80057ec <HAL_TIM_IC_Start+0x15c>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a1e      	ldr	r2, [pc, #120]	; (8005830 <HAL_TIM_IC_Start+0x1a0>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d018      	beq.n	80057ec <HAL_TIM_IC_Start+0x15c>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a1d      	ldr	r2, [pc, #116]	; (8005834 <HAL_TIM_IC_Start+0x1a4>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d013      	beq.n	80057ec <HAL_TIM_IC_Start+0x15c>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a1b      	ldr	r2, [pc, #108]	; (8005838 <HAL_TIM_IC_Start+0x1a8>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d00e      	beq.n	80057ec <HAL_TIM_IC_Start+0x15c>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a1a      	ldr	r2, [pc, #104]	; (800583c <HAL_TIM_IC_Start+0x1ac>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d009      	beq.n	80057ec <HAL_TIM_IC_Start+0x15c>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a18      	ldr	r2, [pc, #96]	; (8005840 <HAL_TIM_IC_Start+0x1b0>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d004      	beq.n	80057ec <HAL_TIM_IC_Start+0x15c>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a17      	ldr	r2, [pc, #92]	; (8005844 <HAL_TIM_IC_Start+0x1b4>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d111      	bne.n	8005810 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f003 0307 	and.w	r3, r3, #7
 80057f6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	2b06      	cmp	r3, #6
 80057fc:	d010      	beq.n	8005820 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f042 0201 	orr.w	r2, r2, #1
 800580c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800580e:	e007      	b.n	8005820 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f042 0201 	orr.w	r2, r2, #1
 800581e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	40010000 	.word	0x40010000
 8005830:	40000400 	.word	0x40000400
 8005834:	40000800 	.word	0x40000800
 8005838:	40000c00 	.word	0x40000c00
 800583c:	40010400 	.word	0x40010400
 8005840:	40014000 	.word	0x40014000
 8005844:	40001800 	.word	0x40001800

08005848 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	2b02      	cmp	r3, #2
 800585c:	d122      	bne.n	80058a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f003 0302 	and.w	r3, r3, #2
 8005868:	2b02      	cmp	r3, #2
 800586a:	d11b      	bne.n	80058a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f06f 0202 	mvn.w	r2, #2
 8005874:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	f003 0303 	and.w	r3, r3, #3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d003      	beq.n	8005892 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7fc fccc 	bl	8002228 <HAL_TIM_IC_CaptureCallback>
 8005890:	e005      	b.n	800589e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 fb4a 	bl	8005f2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 fb51 	bl	8005f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	f003 0304 	and.w	r3, r3, #4
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	d122      	bne.n	80058f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f003 0304 	and.w	r3, r3, #4
 80058bc:	2b04      	cmp	r3, #4
 80058be:	d11b      	bne.n	80058f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f06f 0204 	mvn.w	r2, #4
 80058c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2202      	movs	r2, #2
 80058ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7fc fca2 	bl	8002228 <HAL_TIM_IC_CaptureCallback>
 80058e4:	e005      	b.n	80058f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 fb20 	bl	8005f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 fb27 	bl	8005f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	f003 0308 	and.w	r3, r3, #8
 8005902:	2b08      	cmp	r3, #8
 8005904:	d122      	bne.n	800594c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	f003 0308 	and.w	r3, r3, #8
 8005910:	2b08      	cmp	r3, #8
 8005912:	d11b      	bne.n	800594c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f06f 0208 	mvn.w	r2, #8
 800591c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2204      	movs	r2, #4
 8005922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	69db      	ldr	r3, [r3, #28]
 800592a:	f003 0303 	and.w	r3, r3, #3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f7fc fc78 	bl	8002228 <HAL_TIM_IC_CaptureCallback>
 8005938:	e005      	b.n	8005946 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 faf6 	bl	8005f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 fafd 	bl	8005f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	f003 0310 	and.w	r3, r3, #16
 8005956:	2b10      	cmp	r3, #16
 8005958:	d122      	bne.n	80059a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	f003 0310 	and.w	r3, r3, #16
 8005964:	2b10      	cmp	r3, #16
 8005966:	d11b      	bne.n	80059a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f06f 0210 	mvn.w	r2, #16
 8005970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2208      	movs	r2, #8
 8005976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f7fc fc4e 	bl	8002228 <HAL_TIM_IC_CaptureCallback>
 800598c:	e005      	b.n	800599a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 facc 	bl	8005f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 fad3 	bl	8005f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d10e      	bne.n	80059cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d107      	bne.n	80059cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f06f 0201 	mvn.w	r2, #1
 80059c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f7fc f8d6 	bl	8001b78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d6:	2b80      	cmp	r3, #128	; 0x80
 80059d8:	d10e      	bne.n	80059f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e4:	2b80      	cmp	r3, #128	; 0x80
 80059e6:	d107      	bne.n	80059f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 ff78 	bl	80068e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a02:	2b40      	cmp	r3, #64	; 0x40
 8005a04:	d10e      	bne.n	8005a24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a10:	2b40      	cmp	r3, #64	; 0x40
 8005a12:	d107      	bne.n	8005a24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fa98 	bl	8005f54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	f003 0320 	and.w	r3, r3, #32
 8005a2e:	2b20      	cmp	r3, #32
 8005a30:	d10e      	bne.n	8005a50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f003 0320 	and.w	r3, r3, #32
 8005a3c:	2b20      	cmp	r3, #32
 8005a3e:	d107      	bne.n	8005a50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f06f 0220 	mvn.w	r2, #32
 8005a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 ff42 	bl	80068d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a50:	bf00      	nop
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b086      	sub	sp, #24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a64:	2300      	movs	r3, #0
 8005a66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d101      	bne.n	8005a76 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005a72:	2302      	movs	r3, #2
 8005a74:	e088      	b.n	8005b88 <HAL_TIM_IC_ConfigChannel+0x130>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d11b      	bne.n	8005abc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6818      	ldr	r0, [r3, #0]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	6819      	ldr	r1, [r3, #0]
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	685a      	ldr	r2, [r3, #4]
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	f000 fcb8 	bl	8006408 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	699a      	ldr	r2, [r3, #24]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f022 020c 	bic.w	r2, r2, #12
 8005aa6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6999      	ldr	r1, [r3, #24]
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	689a      	ldr	r2, [r3, #8]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	619a      	str	r2, [r3, #24]
 8005aba:	e060      	b.n	8005b7e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b04      	cmp	r3, #4
 8005ac0:	d11c      	bne.n	8005afc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6818      	ldr	r0, [r3, #0]
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	6819      	ldr	r1, [r3, #0]
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f000 fd3c 	bl	800654e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	699a      	ldr	r2, [r3, #24]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005ae4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	6999      	ldr	r1, [r3, #24]
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	021a      	lsls	r2, r3, #8
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	430a      	orrs	r2, r1
 8005af8:	619a      	str	r2, [r3, #24]
 8005afa:	e040      	b.n	8005b7e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b08      	cmp	r3, #8
 8005b00:	d11b      	bne.n	8005b3a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6818      	ldr	r0, [r3, #0]
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	6819      	ldr	r1, [r3, #0]
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	685a      	ldr	r2, [r3, #4]
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	f000 fd89 	bl	8006628 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	69da      	ldr	r2, [r3, #28]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f022 020c 	bic.w	r2, r2, #12
 8005b24:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69d9      	ldr	r1, [r3, #28]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	689a      	ldr	r2, [r3, #8]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	430a      	orrs	r2, r1
 8005b36:	61da      	str	r2, [r3, #28]
 8005b38:	e021      	b.n	8005b7e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2b0c      	cmp	r3, #12
 8005b3e:	d11c      	bne.n	8005b7a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6818      	ldr	r0, [r3, #0]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	6819      	ldr	r1, [r3, #0]
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	685a      	ldr	r2, [r3, #4]
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	f000 fda6 	bl	80066a0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	69da      	ldr	r2, [r3, #28]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005b62:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	69d9      	ldr	r1, [r3, #28]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	021a      	lsls	r2, r3, #8
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	61da      	str	r2, [r3, #28]
 8005b78:	e001      	b.n	8005b7e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3718      	adds	r7, #24
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d101      	bne.n	8005bae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005baa:	2302      	movs	r3, #2
 8005bac:	e0ae      	b.n	8005d0c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2b0c      	cmp	r3, #12
 8005bba:	f200 809f 	bhi.w	8005cfc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005bbe:	a201      	add	r2, pc, #4	; (adr r2, 8005bc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc4:	08005bf9 	.word	0x08005bf9
 8005bc8:	08005cfd 	.word	0x08005cfd
 8005bcc:	08005cfd 	.word	0x08005cfd
 8005bd0:	08005cfd 	.word	0x08005cfd
 8005bd4:	08005c39 	.word	0x08005c39
 8005bd8:	08005cfd 	.word	0x08005cfd
 8005bdc:	08005cfd 	.word	0x08005cfd
 8005be0:	08005cfd 	.word	0x08005cfd
 8005be4:	08005c7b 	.word	0x08005c7b
 8005be8:	08005cfd 	.word	0x08005cfd
 8005bec:	08005cfd 	.word	0x08005cfd
 8005bf0:	08005cfd 	.word	0x08005cfd
 8005bf4:	08005cbb 	.word	0x08005cbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68b9      	ldr	r1, [r7, #8]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 fa52 	bl	80060a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	699a      	ldr	r2, [r3, #24]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f042 0208 	orr.w	r2, r2, #8
 8005c12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	699a      	ldr	r2, [r3, #24]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f022 0204 	bic.w	r2, r2, #4
 8005c22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6999      	ldr	r1, [r3, #24]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	691a      	ldr	r2, [r3, #16]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	619a      	str	r2, [r3, #24]
      break;
 8005c36:	e064      	b.n	8005d02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68b9      	ldr	r1, [r7, #8]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 faa2 	bl	8006188 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	699a      	ldr	r2, [r3, #24]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	699a      	ldr	r2, [r3, #24]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6999      	ldr	r1, [r3, #24]
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	021a      	lsls	r2, r3, #8
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	430a      	orrs	r2, r1
 8005c76:	619a      	str	r2, [r3, #24]
      break;
 8005c78:	e043      	b.n	8005d02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68b9      	ldr	r1, [r7, #8]
 8005c80:	4618      	mov	r0, r3
 8005c82:	f000 faf7 	bl	8006274 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	69da      	ldr	r2, [r3, #28]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f042 0208 	orr.w	r2, r2, #8
 8005c94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	69da      	ldr	r2, [r3, #28]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f022 0204 	bic.w	r2, r2, #4
 8005ca4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	69d9      	ldr	r1, [r3, #28]
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	691a      	ldr	r2, [r3, #16]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	61da      	str	r2, [r3, #28]
      break;
 8005cb8:	e023      	b.n	8005d02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68b9      	ldr	r1, [r7, #8]
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f000 fb4b 	bl	800635c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	69da      	ldr	r2, [r3, #28]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	69da      	ldr	r2, [r3, #28]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69d9      	ldr	r1, [r3, #28]
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	021a      	lsls	r2, r3, #8
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	61da      	str	r2, [r3, #28]
      break;
 8005cfa:	e002      	b.n	8005d02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	75fb      	strb	r3, [r7, #23]
      break;
 8005d00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3718      	adds	r7, #24
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d101      	bne.n	8005d30 <HAL_TIM_ConfigClockSource+0x1c>
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	e0b4      	b.n	8005e9a <HAL_TIM_ConfigClockSource+0x186>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d68:	d03e      	beq.n	8005de8 <HAL_TIM_ConfigClockSource+0xd4>
 8005d6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d6e:	f200 8087 	bhi.w	8005e80 <HAL_TIM_ConfigClockSource+0x16c>
 8005d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d76:	f000 8086 	beq.w	8005e86 <HAL_TIM_ConfigClockSource+0x172>
 8005d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d7e:	d87f      	bhi.n	8005e80 <HAL_TIM_ConfigClockSource+0x16c>
 8005d80:	2b70      	cmp	r3, #112	; 0x70
 8005d82:	d01a      	beq.n	8005dba <HAL_TIM_ConfigClockSource+0xa6>
 8005d84:	2b70      	cmp	r3, #112	; 0x70
 8005d86:	d87b      	bhi.n	8005e80 <HAL_TIM_ConfigClockSource+0x16c>
 8005d88:	2b60      	cmp	r3, #96	; 0x60
 8005d8a:	d050      	beq.n	8005e2e <HAL_TIM_ConfigClockSource+0x11a>
 8005d8c:	2b60      	cmp	r3, #96	; 0x60
 8005d8e:	d877      	bhi.n	8005e80 <HAL_TIM_ConfigClockSource+0x16c>
 8005d90:	2b50      	cmp	r3, #80	; 0x50
 8005d92:	d03c      	beq.n	8005e0e <HAL_TIM_ConfigClockSource+0xfa>
 8005d94:	2b50      	cmp	r3, #80	; 0x50
 8005d96:	d873      	bhi.n	8005e80 <HAL_TIM_ConfigClockSource+0x16c>
 8005d98:	2b40      	cmp	r3, #64	; 0x40
 8005d9a:	d058      	beq.n	8005e4e <HAL_TIM_ConfigClockSource+0x13a>
 8005d9c:	2b40      	cmp	r3, #64	; 0x40
 8005d9e:	d86f      	bhi.n	8005e80 <HAL_TIM_ConfigClockSource+0x16c>
 8005da0:	2b30      	cmp	r3, #48	; 0x30
 8005da2:	d064      	beq.n	8005e6e <HAL_TIM_ConfigClockSource+0x15a>
 8005da4:	2b30      	cmp	r3, #48	; 0x30
 8005da6:	d86b      	bhi.n	8005e80 <HAL_TIM_ConfigClockSource+0x16c>
 8005da8:	2b20      	cmp	r3, #32
 8005daa:	d060      	beq.n	8005e6e <HAL_TIM_ConfigClockSource+0x15a>
 8005dac:	2b20      	cmp	r3, #32
 8005dae:	d867      	bhi.n	8005e80 <HAL_TIM_ConfigClockSource+0x16c>
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d05c      	beq.n	8005e6e <HAL_TIM_ConfigClockSource+0x15a>
 8005db4:	2b10      	cmp	r3, #16
 8005db6:	d05a      	beq.n	8005e6e <HAL_TIM_ConfigClockSource+0x15a>
 8005db8:	e062      	b.n	8005e80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6818      	ldr	r0, [r3, #0]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	6899      	ldr	r1, [r3, #8]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	f000 fcc1 	bl	8006750 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ddc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	609a      	str	r2, [r3, #8]
      break;
 8005de6:	e04f      	b.n	8005e88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6818      	ldr	r0, [r3, #0]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	6899      	ldr	r1, [r3, #8]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	f000 fcaa 	bl	8006750 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	689a      	ldr	r2, [r3, #8]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e0a:	609a      	str	r2, [r3, #8]
      break;
 8005e0c:	e03c      	b.n	8005e88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6818      	ldr	r0, [r3, #0]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	6859      	ldr	r1, [r3, #4]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	f000 fb68 	bl	80064f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2150      	movs	r1, #80	; 0x50
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 fc77 	bl	800671a <TIM_ITRx_SetConfig>
      break;
 8005e2c:	e02c      	b.n	8005e88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6818      	ldr	r0, [r3, #0]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	6859      	ldr	r1, [r3, #4]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	f000 fbc4 	bl	80065c8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2160      	movs	r1, #96	; 0x60
 8005e46:	4618      	mov	r0, r3
 8005e48:	f000 fc67 	bl	800671a <TIM_ITRx_SetConfig>
      break;
 8005e4c:	e01c      	b.n	8005e88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6818      	ldr	r0, [r3, #0]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	6859      	ldr	r1, [r3, #4]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	f000 fb48 	bl	80064f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2140      	movs	r1, #64	; 0x40
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 fc57 	bl	800671a <TIM_ITRx_SetConfig>
      break;
 8005e6c:	e00c      	b.n	8005e88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4619      	mov	r1, r3
 8005e78:	4610      	mov	r0, r2
 8005e7a:	f000 fc4e 	bl	800671a <TIM_ITRx_SetConfig>
      break;
 8005e7e:	e003      	b.n	8005e88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	73fb      	strb	r3, [r7, #15]
      break;
 8005e84:	e000      	b.n	8005e88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
	...

08005ea4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	2b0c      	cmp	r3, #12
 8005eb6:	d831      	bhi.n	8005f1c <HAL_TIM_ReadCapturedValue+0x78>
 8005eb8:	a201      	add	r2, pc, #4	; (adr r2, 8005ec0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ebe:	bf00      	nop
 8005ec0:	08005ef5 	.word	0x08005ef5
 8005ec4:	08005f1d 	.word	0x08005f1d
 8005ec8:	08005f1d 	.word	0x08005f1d
 8005ecc:	08005f1d 	.word	0x08005f1d
 8005ed0:	08005eff 	.word	0x08005eff
 8005ed4:	08005f1d 	.word	0x08005f1d
 8005ed8:	08005f1d 	.word	0x08005f1d
 8005edc:	08005f1d 	.word	0x08005f1d
 8005ee0:	08005f09 	.word	0x08005f09
 8005ee4:	08005f1d 	.word	0x08005f1d
 8005ee8:	08005f1d 	.word	0x08005f1d
 8005eec:	08005f1d 	.word	0x08005f1d
 8005ef0:	08005f13 	.word	0x08005f13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005efa:	60fb      	str	r3, [r7, #12]

      break;
 8005efc:	e00f      	b.n	8005f1e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f04:	60fb      	str	r3, [r7, #12]

      break;
 8005f06:	e00a      	b.n	8005f1e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f0e:	60fb      	str	r3, [r7, #12]

      break;
 8005f10:	e005      	b.n	8005f1e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f18:	60fb      	str	r3, [r7, #12]

      break;
 8005f1a:	e000      	b.n	8005f1e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005f1c:	bf00      	nop
  }

  return tmpreg;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3714      	adds	r7, #20
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a40      	ldr	r2, [pc, #256]	; (800607c <TIM_Base_SetConfig+0x114>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d013      	beq.n	8005fa8 <TIM_Base_SetConfig+0x40>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f86:	d00f      	beq.n	8005fa8 <TIM_Base_SetConfig+0x40>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a3d      	ldr	r2, [pc, #244]	; (8006080 <TIM_Base_SetConfig+0x118>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d00b      	beq.n	8005fa8 <TIM_Base_SetConfig+0x40>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a3c      	ldr	r2, [pc, #240]	; (8006084 <TIM_Base_SetConfig+0x11c>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d007      	beq.n	8005fa8 <TIM_Base_SetConfig+0x40>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a3b      	ldr	r2, [pc, #236]	; (8006088 <TIM_Base_SetConfig+0x120>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d003      	beq.n	8005fa8 <TIM_Base_SetConfig+0x40>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a3a      	ldr	r2, [pc, #232]	; (800608c <TIM_Base_SetConfig+0x124>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d108      	bne.n	8005fba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a2f      	ldr	r2, [pc, #188]	; (800607c <TIM_Base_SetConfig+0x114>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d02b      	beq.n	800601a <TIM_Base_SetConfig+0xb2>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fc8:	d027      	beq.n	800601a <TIM_Base_SetConfig+0xb2>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a2c      	ldr	r2, [pc, #176]	; (8006080 <TIM_Base_SetConfig+0x118>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d023      	beq.n	800601a <TIM_Base_SetConfig+0xb2>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a2b      	ldr	r2, [pc, #172]	; (8006084 <TIM_Base_SetConfig+0x11c>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d01f      	beq.n	800601a <TIM_Base_SetConfig+0xb2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a2a      	ldr	r2, [pc, #168]	; (8006088 <TIM_Base_SetConfig+0x120>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d01b      	beq.n	800601a <TIM_Base_SetConfig+0xb2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a29      	ldr	r2, [pc, #164]	; (800608c <TIM_Base_SetConfig+0x124>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d017      	beq.n	800601a <TIM_Base_SetConfig+0xb2>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a28      	ldr	r2, [pc, #160]	; (8006090 <TIM_Base_SetConfig+0x128>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d013      	beq.n	800601a <TIM_Base_SetConfig+0xb2>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a27      	ldr	r2, [pc, #156]	; (8006094 <TIM_Base_SetConfig+0x12c>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d00f      	beq.n	800601a <TIM_Base_SetConfig+0xb2>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a26      	ldr	r2, [pc, #152]	; (8006098 <TIM_Base_SetConfig+0x130>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d00b      	beq.n	800601a <TIM_Base_SetConfig+0xb2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a25      	ldr	r2, [pc, #148]	; (800609c <TIM_Base_SetConfig+0x134>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d007      	beq.n	800601a <TIM_Base_SetConfig+0xb2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a24      	ldr	r2, [pc, #144]	; (80060a0 <TIM_Base_SetConfig+0x138>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d003      	beq.n	800601a <TIM_Base_SetConfig+0xb2>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a23      	ldr	r2, [pc, #140]	; (80060a4 <TIM_Base_SetConfig+0x13c>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d108      	bne.n	800602c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	4313      	orrs	r3, r2
 800602a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	4313      	orrs	r3, r2
 8006038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	689a      	ldr	r2, [r3, #8]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a0a      	ldr	r2, [pc, #40]	; (800607c <TIM_Base_SetConfig+0x114>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d003      	beq.n	8006060 <TIM_Base_SetConfig+0xf8>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a0c      	ldr	r2, [pc, #48]	; (800608c <TIM_Base_SetConfig+0x124>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d103      	bne.n	8006068 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	691a      	ldr	r2, [r3, #16]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	615a      	str	r2, [r3, #20]
}
 800606e:	bf00      	nop
 8006070:	3714      	adds	r7, #20
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	40010000 	.word	0x40010000
 8006080:	40000400 	.word	0x40000400
 8006084:	40000800 	.word	0x40000800
 8006088:	40000c00 	.word	0x40000c00
 800608c:	40010400 	.word	0x40010400
 8006090:	40014000 	.word	0x40014000
 8006094:	40014400 	.word	0x40014400
 8006098:	40014800 	.word	0x40014800
 800609c:	40001800 	.word	0x40001800
 80060a0:	40001c00 	.word	0x40001c00
 80060a4:	40002000 	.word	0x40002000

080060a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b087      	sub	sp, #28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	f023 0201 	bic.w	r2, r3, #1
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f023 0303 	bic.w	r3, r3, #3
 80060de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	f023 0302 	bic.w	r3, r3, #2
 80060f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a20      	ldr	r2, [pc, #128]	; (8006180 <TIM_OC1_SetConfig+0xd8>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d003      	beq.n	800610c <TIM_OC1_SetConfig+0x64>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a1f      	ldr	r2, [pc, #124]	; (8006184 <TIM_OC1_SetConfig+0xdc>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d10c      	bne.n	8006126 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	f023 0308 	bic.w	r3, r3, #8
 8006112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	4313      	orrs	r3, r2
 800611c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f023 0304 	bic.w	r3, r3, #4
 8006124:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a15      	ldr	r2, [pc, #84]	; (8006180 <TIM_OC1_SetConfig+0xd8>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d003      	beq.n	8006136 <TIM_OC1_SetConfig+0x8e>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a14      	ldr	r2, [pc, #80]	; (8006184 <TIM_OC1_SetConfig+0xdc>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d111      	bne.n	800615a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800613c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	4313      	orrs	r3, r2
 800614e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	4313      	orrs	r3, r2
 8006158:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	685a      	ldr	r2, [r3, #4]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	621a      	str	r2, [r3, #32]
}
 8006174:	bf00      	nop
 8006176:	371c      	adds	r7, #28
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr
 8006180:	40010000 	.word	0x40010000
 8006184:	40010400 	.word	0x40010400

08006188 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006188:	b480      	push	{r7}
 800618a:	b087      	sub	sp, #28
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	f023 0210 	bic.w	r2, r3, #16
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	021b      	lsls	r3, r3, #8
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	f023 0320 	bic.w	r3, r3, #32
 80061d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	011b      	lsls	r3, r3, #4
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	4313      	orrs	r3, r2
 80061de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a22      	ldr	r2, [pc, #136]	; (800626c <TIM_OC2_SetConfig+0xe4>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d003      	beq.n	80061f0 <TIM_OC2_SetConfig+0x68>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a21      	ldr	r2, [pc, #132]	; (8006270 <TIM_OC2_SetConfig+0xe8>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d10d      	bne.n	800620c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	011b      	lsls	r3, r3, #4
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	4313      	orrs	r3, r2
 8006202:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800620a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a17      	ldr	r2, [pc, #92]	; (800626c <TIM_OC2_SetConfig+0xe4>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d003      	beq.n	800621c <TIM_OC2_SetConfig+0x94>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a16      	ldr	r2, [pc, #88]	; (8006270 <TIM_OC2_SetConfig+0xe8>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d113      	bne.n	8006244 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006222:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800622a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	695b      	ldr	r3, [r3, #20]
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	4313      	orrs	r3, r2
 8006236:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	4313      	orrs	r3, r2
 8006242:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	685a      	ldr	r2, [r3, #4]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	621a      	str	r2, [r3, #32]
}
 800625e:	bf00      	nop
 8006260:	371c      	adds	r7, #28
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	40010000 	.word	0x40010000
 8006270:	40010400 	.word	0x40010400

08006274 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006274:	b480      	push	{r7}
 8006276:	b087      	sub	sp, #28
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f023 0303 	bic.w	r3, r3, #3
 80062aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	021b      	lsls	r3, r3, #8
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a21      	ldr	r2, [pc, #132]	; (8006354 <TIM_OC3_SetConfig+0xe0>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d003      	beq.n	80062da <TIM_OC3_SetConfig+0x66>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a20      	ldr	r2, [pc, #128]	; (8006358 <TIM_OC3_SetConfig+0xe4>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d10d      	bne.n	80062f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	021b      	lsls	r3, r3, #8
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a16      	ldr	r2, [pc, #88]	; (8006354 <TIM_OC3_SetConfig+0xe0>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d003      	beq.n	8006306 <TIM_OC3_SetConfig+0x92>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a15      	ldr	r2, [pc, #84]	; (8006358 <TIM_OC3_SetConfig+0xe4>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d113      	bne.n	800632e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800630c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006314:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	011b      	lsls	r3, r3, #4
 800631c:	693a      	ldr	r2, [r7, #16]
 800631e:	4313      	orrs	r3, r2
 8006320:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	011b      	lsls	r3, r3, #4
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	4313      	orrs	r3, r2
 800632c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	621a      	str	r2, [r3, #32]
}
 8006348:	bf00      	nop
 800634a:	371c      	adds	r7, #28
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr
 8006354:	40010000 	.word	0x40010000
 8006358:	40010400 	.word	0x40010400

0800635c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800635c:	b480      	push	{r7}
 800635e:	b087      	sub	sp, #28
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	69db      	ldr	r3, [r3, #28]
 8006382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800638a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	021b      	lsls	r3, r3, #8
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	4313      	orrs	r3, r2
 800639e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	031b      	lsls	r3, r3, #12
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a12      	ldr	r2, [pc, #72]	; (8006400 <TIM_OC4_SetConfig+0xa4>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d003      	beq.n	80063c4 <TIM_OC4_SetConfig+0x68>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a11      	ldr	r2, [pc, #68]	; (8006404 <TIM_OC4_SetConfig+0xa8>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d109      	bne.n	80063d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	019b      	lsls	r3, r3, #6
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	685a      	ldr	r2, [r3, #4]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	621a      	str	r2, [r3, #32]
}
 80063f2:	bf00      	nop
 80063f4:	371c      	adds	r7, #28
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	40010000 	.word	0x40010000
 8006404:	40010400 	.word	0x40010400

08006408 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006408:	b480      	push	{r7}
 800640a:	b087      	sub	sp, #28
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
 8006414:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	f023 0201 	bic.w	r2, r3, #1
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6a1b      	ldr	r3, [r3, #32]
 800642c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	4a28      	ldr	r2, [pc, #160]	; (80064d4 <TIM_TI1_SetConfig+0xcc>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d01b      	beq.n	800646e <TIM_TI1_SetConfig+0x66>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800643c:	d017      	beq.n	800646e <TIM_TI1_SetConfig+0x66>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	4a25      	ldr	r2, [pc, #148]	; (80064d8 <TIM_TI1_SetConfig+0xd0>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d013      	beq.n	800646e <TIM_TI1_SetConfig+0x66>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	4a24      	ldr	r2, [pc, #144]	; (80064dc <TIM_TI1_SetConfig+0xd4>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d00f      	beq.n	800646e <TIM_TI1_SetConfig+0x66>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	4a23      	ldr	r2, [pc, #140]	; (80064e0 <TIM_TI1_SetConfig+0xd8>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d00b      	beq.n	800646e <TIM_TI1_SetConfig+0x66>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	4a22      	ldr	r2, [pc, #136]	; (80064e4 <TIM_TI1_SetConfig+0xdc>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d007      	beq.n	800646e <TIM_TI1_SetConfig+0x66>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	4a21      	ldr	r2, [pc, #132]	; (80064e8 <TIM_TI1_SetConfig+0xe0>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d003      	beq.n	800646e <TIM_TI1_SetConfig+0x66>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	4a20      	ldr	r2, [pc, #128]	; (80064ec <TIM_TI1_SetConfig+0xe4>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d101      	bne.n	8006472 <TIM_TI1_SetConfig+0x6a>
 800646e:	2301      	movs	r3, #1
 8006470:	e000      	b.n	8006474 <TIM_TI1_SetConfig+0x6c>
 8006472:	2300      	movs	r3, #0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d008      	beq.n	800648a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	f023 0303 	bic.w	r3, r3, #3
 800647e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4313      	orrs	r3, r2
 8006486:	617b      	str	r3, [r7, #20]
 8006488:	e003      	b.n	8006492 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	f043 0301 	orr.w	r3, r3, #1
 8006490:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006498:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	011b      	lsls	r3, r3, #4
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	f023 030a 	bic.w	r3, r3, #10
 80064ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	f003 030a 	and.w	r3, r3, #10
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	621a      	str	r2, [r3, #32]
}
 80064c6:	bf00      	nop
 80064c8:	371c      	adds	r7, #28
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	40010000 	.word	0x40010000
 80064d8:	40000400 	.word	0x40000400
 80064dc:	40000800 	.word	0x40000800
 80064e0:	40000c00 	.word	0x40000c00
 80064e4:	40010400 	.word	0x40010400
 80064e8:	40014000 	.word	0x40014000
 80064ec:	40001800 	.word	0x40001800

080064f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b087      	sub	sp, #28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6a1b      	ldr	r3, [r3, #32]
 8006500:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	f023 0201 	bic.w	r2, r3, #1
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800651a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	011b      	lsls	r3, r3, #4
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	4313      	orrs	r3, r2
 8006524:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	f023 030a 	bic.w	r3, r3, #10
 800652c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	4313      	orrs	r3, r2
 8006534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	621a      	str	r2, [r3, #32]
}
 8006542:	bf00      	nop
 8006544:	371c      	adds	r7, #28
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800654e:	b480      	push	{r7}
 8006550:	b087      	sub	sp, #28
 8006552:	af00      	add	r7, sp, #0
 8006554:	60f8      	str	r0, [r7, #12]
 8006556:	60b9      	str	r1, [r7, #8]
 8006558:	607a      	str	r2, [r7, #4]
 800655a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	f023 0210 	bic.w	r2, r3, #16
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800657a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	021b      	lsls	r3, r3, #8
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	4313      	orrs	r3, r2
 8006584:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800658c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	031b      	lsls	r3, r3, #12
 8006592:	b29b      	uxth	r3, r3
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	4313      	orrs	r3, r2
 8006598:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065a0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	011b      	lsls	r3, r3, #4
 80065a6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	621a      	str	r2, [r3, #32]
}
 80065bc:	bf00      	nop
 80065be:	371c      	adds	r7, #28
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	f023 0210 	bic.w	r2, r3, #16
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	031b      	lsls	r3, r3, #12
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006604:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	011b      	lsls	r3, r3, #4
 800660a:	693a      	ldr	r2, [r7, #16]
 800660c:	4313      	orrs	r3, r2
 800660e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	621a      	str	r2, [r3, #32]
}
 800661c:	bf00      	nop
 800661e:	371c      	adds	r7, #28
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006628:	b480      	push	{r7}
 800662a:	b087      	sub	sp, #28
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
 8006634:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	69db      	ldr	r3, [r3, #28]
 8006646:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6a1b      	ldr	r3, [r3, #32]
 800664c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	f023 0303 	bic.w	r3, r3, #3
 8006654:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4313      	orrs	r3, r2
 800665c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006664:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	011b      	lsls	r3, r3, #4
 800666a:	b2db      	uxtb	r3, r3
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	4313      	orrs	r3, r2
 8006670:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006678:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	021b      	lsls	r3, r3, #8
 800667e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	4313      	orrs	r3, r2
 8006686:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	621a      	str	r2, [r3, #32]
}
 8006694:	bf00      	nop
 8006696:	371c      	adds	r7, #28
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b087      	sub	sp, #28
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
 80066ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	69db      	ldr	r3, [r3, #28]
 80066be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6a1b      	ldr	r3, [r3, #32]
 80066c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	021b      	lsls	r3, r3, #8
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066de:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	031b      	lsls	r3, r3, #12
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80066f2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	031b      	lsls	r3, r3, #12
 80066f8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	4313      	orrs	r3, r2
 8006700:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	621a      	str	r2, [r3, #32]
}
 800670e:	bf00      	nop
 8006710:	371c      	adds	r7, #28
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800671a:	b480      	push	{r7}
 800671c:	b085      	sub	sp, #20
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006730:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006732:	683a      	ldr	r2, [r7, #0]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	4313      	orrs	r3, r2
 8006738:	f043 0307 	orr.w	r3, r3, #7
 800673c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	609a      	str	r2, [r3, #8]
}
 8006744:	bf00      	nop
 8006746:	3714      	adds	r7, #20
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006750:	b480      	push	{r7}
 8006752:	b087      	sub	sp, #28
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	607a      	str	r2, [r7, #4]
 800675c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800676a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	021a      	lsls	r2, r3, #8
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	431a      	orrs	r2, r3
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	4313      	orrs	r3, r2
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	4313      	orrs	r3, r2
 800677c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	697a      	ldr	r2, [r7, #20]
 8006782:	609a      	str	r2, [r3, #8]
}
 8006784:	bf00      	nop
 8006786:	371c      	adds	r7, #28
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006790:	b480      	push	{r7}
 8006792:	b087      	sub	sp, #28
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	f003 031f 	and.w	r3, r3, #31
 80067a2:	2201      	movs	r2, #1
 80067a4:	fa02 f303 	lsl.w	r3, r2, r3
 80067a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6a1a      	ldr	r2, [r3, #32]
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	43db      	mvns	r3, r3
 80067b2:	401a      	ands	r2, r3
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6a1a      	ldr	r2, [r3, #32]
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	f003 031f 	and.w	r3, r3, #31
 80067c2:	6879      	ldr	r1, [r7, #4]
 80067c4:	fa01 f303 	lsl.w	r3, r1, r3
 80067c8:	431a      	orrs	r2, r3
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	621a      	str	r2, [r3, #32]
}
 80067ce:	bf00      	nop
 80067d0:	371c      	adds	r7, #28
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
	...

080067dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d101      	bne.n	80067f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067f0:	2302      	movs	r3, #2
 80067f2:	e05a      	b.n	80068aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2202      	movs	r2, #2
 8006800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800681a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	4313      	orrs	r3, r2
 8006824:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a21      	ldr	r2, [pc, #132]	; (80068b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d022      	beq.n	800687e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006840:	d01d      	beq.n	800687e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a1d      	ldr	r2, [pc, #116]	; (80068bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d018      	beq.n	800687e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a1b      	ldr	r2, [pc, #108]	; (80068c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d013      	beq.n	800687e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a1a      	ldr	r2, [pc, #104]	; (80068c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d00e      	beq.n	800687e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a18      	ldr	r2, [pc, #96]	; (80068c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d009      	beq.n	800687e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a17      	ldr	r2, [pc, #92]	; (80068cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d004      	beq.n	800687e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a15      	ldr	r2, [pc, #84]	; (80068d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d10c      	bne.n	8006898 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006884:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	4313      	orrs	r3, r2
 800688e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3714      	adds	r7, #20
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	40010000 	.word	0x40010000
 80068bc:	40000400 	.word	0x40000400
 80068c0:	40000800 	.word	0x40000800
 80068c4:	40000c00 	.word	0x40000c00
 80068c8:	40010400 	.word	0x40010400
 80068cc:	40014000 	.word	0x40014000
 80068d0:	40001800 	.word	0x40001800

080068d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d101      	bne.n	800690e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e03f      	b.n	800698e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d106      	bne.n	8006928 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f7fc f996 	bl	8002c54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2224      	movs	r2, #36	; 0x24
 800692c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68da      	ldr	r2, [r3, #12]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800693e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 fdd5 	bl	80074f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	691a      	ldr	r2, [r3, #16]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006954:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	695a      	ldr	r2, [r3, #20]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006964:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68da      	ldr	r2, [r3, #12]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006974:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2220      	movs	r2, #32
 8006980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2220      	movs	r2, #32
 8006988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3708      	adds	r7, #8
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b08a      	sub	sp, #40	; 0x28
 800699a:	af02      	add	r7, sp, #8
 800699c:	60f8      	str	r0, [r7, #12]
 800699e:	60b9      	str	r1, [r7, #8]
 80069a0:	603b      	str	r3, [r7, #0]
 80069a2:	4613      	mov	r3, r2
 80069a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80069a6:	2300      	movs	r3, #0
 80069a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b20      	cmp	r3, #32
 80069b4:	d17c      	bne.n	8006ab0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d002      	beq.n	80069c2 <HAL_UART_Transmit+0x2c>
 80069bc:	88fb      	ldrh	r3, [r7, #6]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d101      	bne.n	80069c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e075      	b.n	8006ab2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d101      	bne.n	80069d4 <HAL_UART_Transmit+0x3e>
 80069d0:	2302      	movs	r3, #2
 80069d2:	e06e      	b.n	8006ab2 <HAL_UART_Transmit+0x11c>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2221      	movs	r2, #33	; 0x21
 80069e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069ea:	f7fc fa13 	bl	8002e14 <HAL_GetTick>
 80069ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	88fa      	ldrh	r2, [r7, #6]
 80069f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	88fa      	ldrh	r2, [r7, #6]
 80069fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a04:	d108      	bne.n	8006a18 <HAL_UART_Transmit+0x82>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d104      	bne.n	8006a18 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	61bb      	str	r3, [r7, #24]
 8006a16:	e003      	b.n	8006a20 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006a28:	e02a      	b.n	8006a80 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	2200      	movs	r2, #0
 8006a32:	2180      	movs	r1, #128	; 0x80
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f000 fb15 	bl	8007064 <UART_WaitOnFlagUntilTimeout>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d001      	beq.n	8006a44 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006a40:	2303      	movs	r3, #3
 8006a42:	e036      	b.n	8006ab2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10b      	bne.n	8006a62 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	881b      	ldrh	r3, [r3, #0]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	3302      	adds	r3, #2
 8006a5e:	61bb      	str	r3, [r7, #24]
 8006a60:	e007      	b.n	8006a72 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	781a      	ldrb	r2, [r3, #0]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1cf      	bne.n	8006a2a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	9300      	str	r3, [sp, #0]
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	2200      	movs	r2, #0
 8006a92:	2140      	movs	r1, #64	; 0x40
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f000 fae5 	bl	8007064 <UART_WaitOnFlagUntilTimeout>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	e006      	b.n	8006ab2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2220      	movs	r2, #32
 8006aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006aac:	2300      	movs	r3, #0
 8006aae:	e000      	b.n	8006ab2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006ab0:	2302      	movs	r3, #2
  }
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3720      	adds	r7, #32
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b084      	sub	sp, #16
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	60f8      	str	r0, [r7, #12]
 8006ac2:	60b9      	str	r1, [r7, #8]
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	2b20      	cmp	r3, #32
 8006ad2:	d11d      	bne.n	8006b10 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d002      	beq.n	8006ae0 <HAL_UART_Receive_IT+0x26>
 8006ada:	88fb      	ldrh	r3, [r7, #6]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d101      	bne.n	8006ae4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e016      	b.n	8006b12 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d101      	bne.n	8006af2 <HAL_UART_Receive_IT+0x38>
 8006aee:	2302      	movs	r3, #2
 8006af0:	e00f      	b.n	8006b12 <HAL_UART_Receive_IT+0x58>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006b00:	88fb      	ldrh	r3, [r7, #6]
 8006b02:	461a      	mov	r2, r3
 8006b04:	68b9      	ldr	r1, [r7, #8]
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f000 fb1a 	bl	8007140 <UART_Start_Receive_IT>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	e000      	b.n	8006b12 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006b10:	2302      	movs	r3, #2
  }
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
	...

08006b1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b0ba      	sub	sp, #232	; 0xe8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006b42:	2300      	movs	r3, #0
 8006b44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b52:	f003 030f 	and.w	r3, r3, #15
 8006b56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006b5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10f      	bne.n	8006b82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b66:	f003 0320 	and.w	r3, r3, #32
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d009      	beq.n	8006b82 <HAL_UART_IRQHandler+0x66>
 8006b6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b72:	f003 0320 	and.w	r3, r3, #32
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d003      	beq.n	8006b82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 fbfd 	bl	800737a <UART_Receive_IT>
      return;
 8006b80:	e256      	b.n	8007030 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006b82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	f000 80de 	beq.w	8006d48 <HAL_UART_IRQHandler+0x22c>
 8006b8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d106      	bne.n	8006ba6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b9c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 80d1 	beq.w	8006d48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006baa:	f003 0301 	and.w	r3, r3, #1
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00b      	beq.n	8006bca <HAL_UART_IRQHandler+0xae>
 8006bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d005      	beq.n	8006bca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc2:	f043 0201 	orr.w	r2, r3, #1
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bce:	f003 0304 	and.w	r3, r3, #4
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00b      	beq.n	8006bee <HAL_UART_IRQHandler+0xd2>
 8006bd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d005      	beq.n	8006bee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be6:	f043 0202 	orr.w	r2, r3, #2
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bf2:	f003 0302 	and.w	r3, r3, #2
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00b      	beq.n	8006c12 <HAL_UART_IRQHandler+0xf6>
 8006bfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d005      	beq.n	8006c12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0a:	f043 0204 	orr.w	r2, r3, #4
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c16:	f003 0308 	and.w	r3, r3, #8
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d011      	beq.n	8006c42 <HAL_UART_IRQHandler+0x126>
 8006c1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c22:	f003 0320 	and.w	r3, r3, #32
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d105      	bne.n	8006c36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006c2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d005      	beq.n	8006c42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3a:	f043 0208 	orr.w	r2, r3, #8
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f000 81ed 	beq.w	8007026 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c50:	f003 0320 	and.w	r3, r3, #32
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d008      	beq.n	8006c6a <HAL_UART_IRQHandler+0x14e>
 8006c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c5c:	f003 0320 	and.w	r3, r3, #32
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d002      	beq.n	8006c6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 fb88 	bl	800737a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	695b      	ldr	r3, [r3, #20]
 8006c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c74:	2b40      	cmp	r3, #64	; 0x40
 8006c76:	bf0c      	ite	eq
 8006c78:	2301      	moveq	r3, #1
 8006c7a:	2300      	movne	r3, #0
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c86:	f003 0308 	and.w	r3, r3, #8
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d103      	bne.n	8006c96 <HAL_UART_IRQHandler+0x17a>
 8006c8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d04f      	beq.n	8006d36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fa90 	bl	80071bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	695b      	ldr	r3, [r3, #20]
 8006ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca6:	2b40      	cmp	r3, #64	; 0x40
 8006ca8:	d141      	bne.n	8006d2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	3314      	adds	r3, #20
 8006cb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cb8:	e853 3f00 	ldrex	r3, [r3]
 8006cbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006cc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	3314      	adds	r3, #20
 8006cd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006cd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006cda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006ce2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006ce6:	e841 2300 	strex	r3, r2, [r1]
 8006cea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006cee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1d9      	bne.n	8006caa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d013      	beq.n	8006d26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d02:	4a7d      	ldr	r2, [pc, #500]	; (8006ef8 <HAL_UART_IRQHandler+0x3dc>)
 8006d04:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7fc fe43 	bl	8003996 <HAL_DMA_Abort_IT>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d016      	beq.n	8006d44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d20:	4610      	mov	r0, r2
 8006d22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d24:	e00e      	b.n	8006d44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f986 	bl	8007038 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d2c:	e00a      	b.n	8006d44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f982 	bl	8007038 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d34:	e006      	b.n	8006d44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f97e 	bl	8007038 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006d42:	e170      	b.n	8007026 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d44:	bf00      	nop
    return;
 8006d46:	e16e      	b.n	8007026 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	f040 814a 	bne.w	8006fe6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d56:	f003 0310 	and.w	r3, r3, #16
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f000 8143 	beq.w	8006fe6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d64:	f003 0310 	and.w	r3, r3, #16
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f000 813c 	beq.w	8006fe6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d6e:	2300      	movs	r3, #0
 8006d70:	60bb      	str	r3, [r7, #8]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	60bb      	str	r3, [r7, #8]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	60bb      	str	r3, [r7, #8]
 8006d82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	695b      	ldr	r3, [r3, #20]
 8006d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d8e:	2b40      	cmp	r3, #64	; 0x40
 8006d90:	f040 80b4 	bne.w	8006efc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006da0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f000 8140 	beq.w	800702a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006dae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006db2:	429a      	cmp	r2, r3
 8006db4:	f080 8139 	bcs.w	800702a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006dbe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc4:	69db      	ldr	r3, [r3, #28]
 8006dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dca:	f000 8088 	beq.w	8006ede <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	330c      	adds	r3, #12
 8006dd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ddc:	e853 3f00 	ldrex	r3, [r3]
 8006de0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006de4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006de8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	330c      	adds	r3, #12
 8006df6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006dfa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006dfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e0a:	e841 2300 	strex	r3, r2, [r1]
 8006e0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006e12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1d9      	bne.n	8006dce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	3314      	adds	r3, #20
 8006e20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e24:	e853 3f00 	ldrex	r3, [r3]
 8006e28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006e2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e2c:	f023 0301 	bic.w	r3, r3, #1
 8006e30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	3314      	adds	r3, #20
 8006e3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006e42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006e46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006e4a:	e841 2300 	strex	r3, r2, [r1]
 8006e4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006e50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1e1      	bne.n	8006e1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	3314      	adds	r3, #20
 8006e5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e60:	e853 3f00 	ldrex	r3, [r3]
 8006e64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006e66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	3314      	adds	r3, #20
 8006e76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006e7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006e80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e82:	e841 2300 	strex	r3, r2, [r1]
 8006e86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006e88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1e3      	bne.n	8006e56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2220      	movs	r2, #32
 8006e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	330c      	adds	r3, #12
 8006ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ea6:	e853 3f00 	ldrex	r3, [r3]
 8006eaa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006eae:	f023 0310 	bic.w	r3, r3, #16
 8006eb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	330c      	adds	r3, #12
 8006ebc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006ec0:	65ba      	str	r2, [r7, #88]	; 0x58
 8006ec2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ec6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ec8:	e841 2300 	strex	r3, r2, [r1]
 8006ecc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1e3      	bne.n	8006e9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7fc fcec 	bl	80038b6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	4619      	mov	r1, r3
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f8ac 	bl	800704c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ef4:	e099      	b.n	800702a <HAL_UART_IRQHandler+0x50e>
 8006ef6:	bf00      	nop
 8006ef8:	08007283 	.word	0x08007283
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	1ad3      	subs	r3, r2, r3
 8006f08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f000 808b 	beq.w	800702e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006f18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 8086 	beq.w	800702e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	330c      	adds	r3, #12
 8006f28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2c:	e853 3f00 	ldrex	r3, [r3]
 8006f30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	330c      	adds	r3, #12
 8006f42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006f46:	647a      	str	r2, [r7, #68]	; 0x44
 8006f48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f4e:	e841 2300 	strex	r3, r2, [r1]
 8006f52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1e3      	bne.n	8006f22 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	3314      	adds	r3, #20
 8006f60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f64:	e853 3f00 	ldrex	r3, [r3]
 8006f68:	623b      	str	r3, [r7, #32]
   return(result);
 8006f6a:	6a3b      	ldr	r3, [r7, #32]
 8006f6c:	f023 0301 	bic.w	r3, r3, #1
 8006f70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	3314      	adds	r3, #20
 8006f7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006f7e:	633a      	str	r2, [r7, #48]	; 0x30
 8006f80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f86:	e841 2300 	strex	r3, r2, [r1]
 8006f8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1e3      	bne.n	8006f5a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2220      	movs	r2, #32
 8006f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	330c      	adds	r3, #12
 8006fa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	e853 3f00 	ldrex	r3, [r3]
 8006fae:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f023 0310 	bic.w	r3, r3, #16
 8006fb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	330c      	adds	r3, #12
 8006fc0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006fc4:	61fa      	str	r2, [r7, #28]
 8006fc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc8:	69b9      	ldr	r1, [r7, #24]
 8006fca:	69fa      	ldr	r2, [r7, #28]
 8006fcc:	e841 2300 	strex	r3, r2, [r1]
 8006fd0:	617b      	str	r3, [r7, #20]
   return(result);
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d1e3      	bne.n	8006fa0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006fd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006fdc:	4619      	mov	r1, r3
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f834 	bl	800704c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006fe4:	e023      	b.n	800702e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d009      	beq.n	8007006 <HAL_UART_IRQHandler+0x4ea>
 8006ff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d003      	beq.n	8007006 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f953 	bl	80072aa <UART_Transmit_IT>
    return;
 8007004:	e014      	b.n	8007030 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800700a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00e      	beq.n	8007030 <HAL_UART_IRQHandler+0x514>
 8007012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800701a:	2b00      	cmp	r3, #0
 800701c:	d008      	beq.n	8007030 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 f993 	bl	800734a <UART_EndTransmit_IT>
    return;
 8007024:	e004      	b.n	8007030 <HAL_UART_IRQHandler+0x514>
    return;
 8007026:	bf00      	nop
 8007028:	e002      	b.n	8007030 <HAL_UART_IRQHandler+0x514>
      return;
 800702a:	bf00      	nop
 800702c:	e000      	b.n	8007030 <HAL_UART_IRQHandler+0x514>
      return;
 800702e:	bf00      	nop
  }
}
 8007030:	37e8      	adds	r7, #232	; 0xe8
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop

08007038 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007040:	bf00      	nop
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	460b      	mov	r3, r1
 8007056:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007058:	bf00      	nop
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b090      	sub	sp, #64	; 0x40
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	603b      	str	r3, [r7, #0]
 8007070:	4613      	mov	r3, r2
 8007072:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007074:	e050      	b.n	8007118 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800707c:	d04c      	beq.n	8007118 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800707e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007080:	2b00      	cmp	r3, #0
 8007082:	d007      	beq.n	8007094 <UART_WaitOnFlagUntilTimeout+0x30>
 8007084:	f7fb fec6 	bl	8002e14 <HAL_GetTick>
 8007088:	4602      	mov	r2, r0
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	1ad3      	subs	r3, r2, r3
 800708e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007090:	429a      	cmp	r2, r3
 8007092:	d241      	bcs.n	8007118 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	330c      	adds	r3, #12
 800709a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709e:	e853 3f00 	ldrex	r3, [r3]
 80070a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	330c      	adds	r3, #12
 80070b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80070b4:	637a      	str	r2, [r7, #52]	; 0x34
 80070b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070bc:	e841 2300 	strex	r3, r2, [r1]
 80070c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1e5      	bne.n	8007094 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	3314      	adds	r3, #20
 80070ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	e853 3f00 	ldrex	r3, [r3]
 80070d6:	613b      	str	r3, [r7, #16]
   return(result);
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	f023 0301 	bic.w	r3, r3, #1
 80070de:	63bb      	str	r3, [r7, #56]	; 0x38
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	3314      	adds	r3, #20
 80070e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070e8:	623a      	str	r2, [r7, #32]
 80070ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ec:	69f9      	ldr	r1, [r7, #28]
 80070ee:	6a3a      	ldr	r2, [r7, #32]
 80070f0:	e841 2300 	strex	r3, r2, [r1]
 80070f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1e5      	bne.n	80070c8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2220      	movs	r2, #32
 8007100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2220      	movs	r2, #32
 8007108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007114:	2303      	movs	r3, #3
 8007116:	e00f      	b.n	8007138 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	4013      	ands	r3, r2
 8007122:	68ba      	ldr	r2, [r7, #8]
 8007124:	429a      	cmp	r2, r3
 8007126:	bf0c      	ite	eq
 8007128:	2301      	moveq	r3, #1
 800712a:	2300      	movne	r3, #0
 800712c:	b2db      	uxtb	r3, r3
 800712e:	461a      	mov	r2, r3
 8007130:	79fb      	ldrb	r3, [r7, #7]
 8007132:	429a      	cmp	r2, r3
 8007134:	d09f      	beq.n	8007076 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3740      	adds	r7, #64	; 0x40
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007140:	b480      	push	{r7}
 8007142:	b085      	sub	sp, #20
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	4613      	mov	r3, r2
 800714c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	88fa      	ldrh	r2, [r7, #6]
 8007158:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	88fa      	ldrh	r2, [r7, #6]
 800715e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2222      	movs	r2, #34	; 0x22
 800716a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d007      	beq.n	800718e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68da      	ldr	r2, [r3, #12]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800718c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	695a      	ldr	r2, [r3, #20]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f042 0201 	orr.w	r2, r2, #1
 800719c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68da      	ldr	r2, [r3, #12]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f042 0220 	orr.w	r2, r2, #32
 80071ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3714      	adds	r7, #20
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071bc:	b480      	push	{r7}
 80071be:	b095      	sub	sp, #84	; 0x54
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	330c      	adds	r3, #12
 80071ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ce:	e853 3f00 	ldrex	r3, [r3]
 80071d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80071d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	330c      	adds	r3, #12
 80071e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80071e4:	643a      	str	r2, [r7, #64]	; 0x40
 80071e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80071ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071ec:	e841 2300 	strex	r3, r2, [r1]
 80071f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d1e5      	bne.n	80071c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	3314      	adds	r3, #20
 80071fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007200:	6a3b      	ldr	r3, [r7, #32]
 8007202:	e853 3f00 	ldrex	r3, [r3]
 8007206:	61fb      	str	r3, [r7, #28]
   return(result);
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	f023 0301 	bic.w	r3, r3, #1
 800720e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	3314      	adds	r3, #20
 8007216:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007218:	62fa      	str	r2, [r7, #44]	; 0x2c
 800721a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800721e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007220:	e841 2300 	strex	r3, r2, [r1]
 8007224:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1e5      	bne.n	80071f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007230:	2b01      	cmp	r3, #1
 8007232:	d119      	bne.n	8007268 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	330c      	adds	r3, #12
 800723a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	e853 3f00 	ldrex	r3, [r3]
 8007242:	60bb      	str	r3, [r7, #8]
   return(result);
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	f023 0310 	bic.w	r3, r3, #16
 800724a:	647b      	str	r3, [r7, #68]	; 0x44
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	330c      	adds	r3, #12
 8007252:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007254:	61ba      	str	r2, [r7, #24]
 8007256:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007258:	6979      	ldr	r1, [r7, #20]
 800725a:	69ba      	ldr	r2, [r7, #24]
 800725c:	e841 2300 	strex	r3, r2, [r1]
 8007260:	613b      	str	r3, [r7, #16]
   return(result);
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d1e5      	bne.n	8007234 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2220      	movs	r2, #32
 800726c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007276:	bf00      	nop
 8007278:	3754      	adds	r7, #84	; 0x54
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr

08007282 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	b084      	sub	sp, #16
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800728e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2200      	movs	r2, #0
 800729a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f7ff fecb 	bl	8007038 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072a2:	bf00      	nop
 80072a4:	3710      	adds	r7, #16
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80072aa:	b480      	push	{r7}
 80072ac:	b085      	sub	sp, #20
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	2b21      	cmp	r3, #33	; 0x21
 80072bc:	d13e      	bne.n	800733c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072c6:	d114      	bne.n	80072f2 <UART_Transmit_IT+0x48>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d110      	bne.n	80072f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a1b      	ldr	r3, [r3, #32]
 80072d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	881b      	ldrh	r3, [r3, #0]
 80072da:	461a      	mov	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a1b      	ldr	r3, [r3, #32]
 80072ea:	1c9a      	adds	r2, r3, #2
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	621a      	str	r2, [r3, #32]
 80072f0:	e008      	b.n	8007304 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a1b      	ldr	r3, [r3, #32]
 80072f6:	1c59      	adds	r1, r3, #1
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	6211      	str	r1, [r2, #32]
 80072fc:	781a      	ldrb	r2, [r3, #0]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007308:	b29b      	uxth	r3, r3
 800730a:	3b01      	subs	r3, #1
 800730c:	b29b      	uxth	r3, r3
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	4619      	mov	r1, r3
 8007312:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007314:	2b00      	cmp	r3, #0
 8007316:	d10f      	bne.n	8007338 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68da      	ldr	r2, [r3, #12]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007326:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68da      	ldr	r2, [r3, #12]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007336:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007338:	2300      	movs	r3, #0
 800733a:	e000      	b.n	800733e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800733c:	2302      	movs	r3, #2
  }
}
 800733e:	4618      	mov	r0, r3
 8007340:	3714      	adds	r7, #20
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr

0800734a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b082      	sub	sp, #8
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68da      	ldr	r2, [r3, #12]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007360:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2220      	movs	r2, #32
 8007366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7fa fbe0 	bl	8001b30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b08c      	sub	sp, #48	; 0x30
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b22      	cmp	r3, #34	; 0x22
 800738c:	f040 80ab 	bne.w	80074e6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007398:	d117      	bne.n	80073ca <UART_Receive_IT+0x50>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d113      	bne.n	80073ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80073a2:	2300      	movs	r3, #0
 80073a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073aa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c2:	1c9a      	adds	r2, r3, #2
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	629a      	str	r2, [r3, #40]	; 0x28
 80073c8:	e026      	b.n	8007418 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80073d0:	2300      	movs	r3, #0
 80073d2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073dc:	d007      	beq.n	80073ee <UART_Receive_IT+0x74>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d10a      	bne.n	80073fc <UART_Receive_IT+0x82>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d106      	bne.n	80073fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	b2da      	uxtb	r2, r3
 80073f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f8:	701a      	strb	r2, [r3, #0]
 80073fa:	e008      	b.n	800740e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	b2db      	uxtb	r3, r3
 8007404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007408:	b2da      	uxtb	r2, r3
 800740a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007412:	1c5a      	adds	r2, r3, #1
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800741c:	b29b      	uxth	r3, r3
 800741e:	3b01      	subs	r3, #1
 8007420:	b29b      	uxth	r3, r3
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	4619      	mov	r1, r3
 8007426:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007428:	2b00      	cmp	r3, #0
 800742a:	d15a      	bne.n	80074e2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	68da      	ldr	r2, [r3, #12]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f022 0220 	bic.w	r2, r2, #32
 800743a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68da      	ldr	r2, [r3, #12]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800744a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	695a      	ldr	r2, [r3, #20]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f022 0201 	bic.w	r2, r2, #1
 800745a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2220      	movs	r2, #32
 8007460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007468:	2b01      	cmp	r3, #1
 800746a:	d135      	bne.n	80074d8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	330c      	adds	r3, #12
 8007478:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	e853 3f00 	ldrex	r3, [r3]
 8007480:	613b      	str	r3, [r7, #16]
   return(result);
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	f023 0310 	bic.w	r3, r3, #16
 8007488:	627b      	str	r3, [r7, #36]	; 0x24
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	330c      	adds	r3, #12
 8007490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007492:	623a      	str	r2, [r7, #32]
 8007494:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007496:	69f9      	ldr	r1, [r7, #28]
 8007498:	6a3a      	ldr	r2, [r7, #32]
 800749a:	e841 2300 	strex	r3, r2, [r1]
 800749e:	61bb      	str	r3, [r7, #24]
   return(result);
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1e5      	bne.n	8007472 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 0310 	and.w	r3, r3, #16
 80074b0:	2b10      	cmp	r3, #16
 80074b2:	d10a      	bne.n	80074ca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80074b4:	2300      	movs	r3, #0
 80074b6:	60fb      	str	r3, [r7, #12]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	60fb      	str	r3, [r7, #12]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	60fb      	str	r3, [r7, #12]
 80074c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80074ce:	4619      	mov	r1, r3
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f7ff fdbb 	bl	800704c <HAL_UARTEx_RxEventCallback>
 80074d6:	e002      	b.n	80074de <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f7fa fb33 	bl	8001b44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80074de:	2300      	movs	r3, #0
 80074e0:	e002      	b.n	80074e8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80074e2:	2300      	movs	r3, #0
 80074e4:	e000      	b.n	80074e8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80074e6:	2302      	movs	r3, #2
  }
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3730      	adds	r7, #48	; 0x30
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074f4:	b0c0      	sub	sp, #256	; 0x100
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800750c:	68d9      	ldr	r1, [r3, #12]
 800750e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	ea40 0301 	orr.w	r3, r0, r1
 8007518:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800751a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800751e:	689a      	ldr	r2, [r3, #8]
 8007520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	431a      	orrs	r2, r3
 8007528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800752c:	695b      	ldr	r3, [r3, #20]
 800752e:	431a      	orrs	r2, r3
 8007530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007534:	69db      	ldr	r3, [r3, #28]
 8007536:	4313      	orrs	r3, r2
 8007538:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800753c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007548:	f021 010c 	bic.w	r1, r1, #12
 800754c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007556:	430b      	orrs	r3, r1
 8007558:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800755a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	695b      	ldr	r3, [r3, #20]
 8007562:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800756a:	6999      	ldr	r1, [r3, #24]
 800756c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	ea40 0301 	orr.w	r3, r0, r1
 8007576:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	4b8f      	ldr	r3, [pc, #572]	; (80077bc <UART_SetConfig+0x2cc>)
 8007580:	429a      	cmp	r2, r3
 8007582:	d005      	beq.n	8007590 <UART_SetConfig+0xa0>
 8007584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	4b8d      	ldr	r3, [pc, #564]	; (80077c0 <UART_SetConfig+0x2d0>)
 800758c:	429a      	cmp	r2, r3
 800758e:	d104      	bne.n	800759a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007590:	f7fd f960 	bl	8004854 <HAL_RCC_GetPCLK2Freq>
 8007594:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007598:	e003      	b.n	80075a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800759a:	f7fd f947 	bl	800482c <HAL_RCC_GetPCLK1Freq>
 800759e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075a6:	69db      	ldr	r3, [r3, #28]
 80075a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075ac:	f040 810c 	bne.w	80077c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80075b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075b4:	2200      	movs	r2, #0
 80075b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80075ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80075be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80075c2:	4622      	mov	r2, r4
 80075c4:	462b      	mov	r3, r5
 80075c6:	1891      	adds	r1, r2, r2
 80075c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80075ca:	415b      	adcs	r3, r3
 80075cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80075d2:	4621      	mov	r1, r4
 80075d4:	eb12 0801 	adds.w	r8, r2, r1
 80075d8:	4629      	mov	r1, r5
 80075da:	eb43 0901 	adc.w	r9, r3, r1
 80075de:	f04f 0200 	mov.w	r2, #0
 80075e2:	f04f 0300 	mov.w	r3, #0
 80075e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80075ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80075ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80075f2:	4690      	mov	r8, r2
 80075f4:	4699      	mov	r9, r3
 80075f6:	4623      	mov	r3, r4
 80075f8:	eb18 0303 	adds.w	r3, r8, r3
 80075fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007600:	462b      	mov	r3, r5
 8007602:	eb49 0303 	adc.w	r3, r9, r3
 8007606:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800760a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007616:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800761a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800761e:	460b      	mov	r3, r1
 8007620:	18db      	adds	r3, r3, r3
 8007622:	653b      	str	r3, [r7, #80]	; 0x50
 8007624:	4613      	mov	r3, r2
 8007626:	eb42 0303 	adc.w	r3, r2, r3
 800762a:	657b      	str	r3, [r7, #84]	; 0x54
 800762c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007630:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007634:	f7f9 fae8 	bl	8000c08 <__aeabi_uldivmod>
 8007638:	4602      	mov	r2, r0
 800763a:	460b      	mov	r3, r1
 800763c:	4b61      	ldr	r3, [pc, #388]	; (80077c4 <UART_SetConfig+0x2d4>)
 800763e:	fba3 2302 	umull	r2, r3, r3, r2
 8007642:	095b      	lsrs	r3, r3, #5
 8007644:	011c      	lsls	r4, r3, #4
 8007646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800764a:	2200      	movs	r2, #0
 800764c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007650:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007654:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007658:	4642      	mov	r2, r8
 800765a:	464b      	mov	r3, r9
 800765c:	1891      	adds	r1, r2, r2
 800765e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007660:	415b      	adcs	r3, r3
 8007662:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007664:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007668:	4641      	mov	r1, r8
 800766a:	eb12 0a01 	adds.w	sl, r2, r1
 800766e:	4649      	mov	r1, r9
 8007670:	eb43 0b01 	adc.w	fp, r3, r1
 8007674:	f04f 0200 	mov.w	r2, #0
 8007678:	f04f 0300 	mov.w	r3, #0
 800767c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007680:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007684:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007688:	4692      	mov	sl, r2
 800768a:	469b      	mov	fp, r3
 800768c:	4643      	mov	r3, r8
 800768e:	eb1a 0303 	adds.w	r3, sl, r3
 8007692:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007696:	464b      	mov	r3, r9
 8007698:	eb4b 0303 	adc.w	r3, fp, r3
 800769c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80076a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80076b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80076b4:	460b      	mov	r3, r1
 80076b6:	18db      	adds	r3, r3, r3
 80076b8:	643b      	str	r3, [r7, #64]	; 0x40
 80076ba:	4613      	mov	r3, r2
 80076bc:	eb42 0303 	adc.w	r3, r2, r3
 80076c0:	647b      	str	r3, [r7, #68]	; 0x44
 80076c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80076c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80076ca:	f7f9 fa9d 	bl	8000c08 <__aeabi_uldivmod>
 80076ce:	4602      	mov	r2, r0
 80076d0:	460b      	mov	r3, r1
 80076d2:	4611      	mov	r1, r2
 80076d4:	4b3b      	ldr	r3, [pc, #236]	; (80077c4 <UART_SetConfig+0x2d4>)
 80076d6:	fba3 2301 	umull	r2, r3, r3, r1
 80076da:	095b      	lsrs	r3, r3, #5
 80076dc:	2264      	movs	r2, #100	; 0x64
 80076de:	fb02 f303 	mul.w	r3, r2, r3
 80076e2:	1acb      	subs	r3, r1, r3
 80076e4:	00db      	lsls	r3, r3, #3
 80076e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80076ea:	4b36      	ldr	r3, [pc, #216]	; (80077c4 <UART_SetConfig+0x2d4>)
 80076ec:	fba3 2302 	umull	r2, r3, r3, r2
 80076f0:	095b      	lsrs	r3, r3, #5
 80076f2:	005b      	lsls	r3, r3, #1
 80076f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80076f8:	441c      	add	r4, r3
 80076fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076fe:	2200      	movs	r2, #0
 8007700:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007704:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007708:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800770c:	4642      	mov	r2, r8
 800770e:	464b      	mov	r3, r9
 8007710:	1891      	adds	r1, r2, r2
 8007712:	63b9      	str	r1, [r7, #56]	; 0x38
 8007714:	415b      	adcs	r3, r3
 8007716:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007718:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800771c:	4641      	mov	r1, r8
 800771e:	1851      	adds	r1, r2, r1
 8007720:	6339      	str	r1, [r7, #48]	; 0x30
 8007722:	4649      	mov	r1, r9
 8007724:	414b      	adcs	r3, r1
 8007726:	637b      	str	r3, [r7, #52]	; 0x34
 8007728:	f04f 0200 	mov.w	r2, #0
 800772c:	f04f 0300 	mov.w	r3, #0
 8007730:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007734:	4659      	mov	r1, fp
 8007736:	00cb      	lsls	r3, r1, #3
 8007738:	4651      	mov	r1, sl
 800773a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800773e:	4651      	mov	r1, sl
 8007740:	00ca      	lsls	r2, r1, #3
 8007742:	4610      	mov	r0, r2
 8007744:	4619      	mov	r1, r3
 8007746:	4603      	mov	r3, r0
 8007748:	4642      	mov	r2, r8
 800774a:	189b      	adds	r3, r3, r2
 800774c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007750:	464b      	mov	r3, r9
 8007752:	460a      	mov	r2, r1
 8007754:	eb42 0303 	adc.w	r3, r2, r3
 8007758:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800775c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007768:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800776c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007770:	460b      	mov	r3, r1
 8007772:	18db      	adds	r3, r3, r3
 8007774:	62bb      	str	r3, [r7, #40]	; 0x28
 8007776:	4613      	mov	r3, r2
 8007778:	eb42 0303 	adc.w	r3, r2, r3
 800777c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800777e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007782:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007786:	f7f9 fa3f 	bl	8000c08 <__aeabi_uldivmod>
 800778a:	4602      	mov	r2, r0
 800778c:	460b      	mov	r3, r1
 800778e:	4b0d      	ldr	r3, [pc, #52]	; (80077c4 <UART_SetConfig+0x2d4>)
 8007790:	fba3 1302 	umull	r1, r3, r3, r2
 8007794:	095b      	lsrs	r3, r3, #5
 8007796:	2164      	movs	r1, #100	; 0x64
 8007798:	fb01 f303 	mul.w	r3, r1, r3
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	00db      	lsls	r3, r3, #3
 80077a0:	3332      	adds	r3, #50	; 0x32
 80077a2:	4a08      	ldr	r2, [pc, #32]	; (80077c4 <UART_SetConfig+0x2d4>)
 80077a4:	fba2 2303 	umull	r2, r3, r2, r3
 80077a8:	095b      	lsrs	r3, r3, #5
 80077aa:	f003 0207 	and.w	r2, r3, #7
 80077ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4422      	add	r2, r4
 80077b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80077b8:	e105      	b.n	80079c6 <UART_SetConfig+0x4d6>
 80077ba:	bf00      	nop
 80077bc:	40011000 	.word	0x40011000
 80077c0:	40011400 	.word	0x40011400
 80077c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80077c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077cc:	2200      	movs	r2, #0
 80077ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80077d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80077d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80077da:	4642      	mov	r2, r8
 80077dc:	464b      	mov	r3, r9
 80077de:	1891      	adds	r1, r2, r2
 80077e0:	6239      	str	r1, [r7, #32]
 80077e2:	415b      	adcs	r3, r3
 80077e4:	627b      	str	r3, [r7, #36]	; 0x24
 80077e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80077ea:	4641      	mov	r1, r8
 80077ec:	1854      	adds	r4, r2, r1
 80077ee:	4649      	mov	r1, r9
 80077f0:	eb43 0501 	adc.w	r5, r3, r1
 80077f4:	f04f 0200 	mov.w	r2, #0
 80077f8:	f04f 0300 	mov.w	r3, #0
 80077fc:	00eb      	lsls	r3, r5, #3
 80077fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007802:	00e2      	lsls	r2, r4, #3
 8007804:	4614      	mov	r4, r2
 8007806:	461d      	mov	r5, r3
 8007808:	4643      	mov	r3, r8
 800780a:	18e3      	adds	r3, r4, r3
 800780c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007810:	464b      	mov	r3, r9
 8007812:	eb45 0303 	adc.w	r3, r5, r3
 8007816:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800781a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007826:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800782a:	f04f 0200 	mov.w	r2, #0
 800782e:	f04f 0300 	mov.w	r3, #0
 8007832:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007836:	4629      	mov	r1, r5
 8007838:	008b      	lsls	r3, r1, #2
 800783a:	4621      	mov	r1, r4
 800783c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007840:	4621      	mov	r1, r4
 8007842:	008a      	lsls	r2, r1, #2
 8007844:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007848:	f7f9 f9de 	bl	8000c08 <__aeabi_uldivmod>
 800784c:	4602      	mov	r2, r0
 800784e:	460b      	mov	r3, r1
 8007850:	4b60      	ldr	r3, [pc, #384]	; (80079d4 <UART_SetConfig+0x4e4>)
 8007852:	fba3 2302 	umull	r2, r3, r3, r2
 8007856:	095b      	lsrs	r3, r3, #5
 8007858:	011c      	lsls	r4, r3, #4
 800785a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800785e:	2200      	movs	r2, #0
 8007860:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007864:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007868:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800786c:	4642      	mov	r2, r8
 800786e:	464b      	mov	r3, r9
 8007870:	1891      	adds	r1, r2, r2
 8007872:	61b9      	str	r1, [r7, #24]
 8007874:	415b      	adcs	r3, r3
 8007876:	61fb      	str	r3, [r7, #28]
 8007878:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800787c:	4641      	mov	r1, r8
 800787e:	1851      	adds	r1, r2, r1
 8007880:	6139      	str	r1, [r7, #16]
 8007882:	4649      	mov	r1, r9
 8007884:	414b      	adcs	r3, r1
 8007886:	617b      	str	r3, [r7, #20]
 8007888:	f04f 0200 	mov.w	r2, #0
 800788c:	f04f 0300 	mov.w	r3, #0
 8007890:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007894:	4659      	mov	r1, fp
 8007896:	00cb      	lsls	r3, r1, #3
 8007898:	4651      	mov	r1, sl
 800789a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800789e:	4651      	mov	r1, sl
 80078a0:	00ca      	lsls	r2, r1, #3
 80078a2:	4610      	mov	r0, r2
 80078a4:	4619      	mov	r1, r3
 80078a6:	4603      	mov	r3, r0
 80078a8:	4642      	mov	r2, r8
 80078aa:	189b      	adds	r3, r3, r2
 80078ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80078b0:	464b      	mov	r3, r9
 80078b2:	460a      	mov	r2, r1
 80078b4:	eb42 0303 	adc.w	r3, r2, r3
 80078b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80078bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80078c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80078c8:	f04f 0200 	mov.w	r2, #0
 80078cc:	f04f 0300 	mov.w	r3, #0
 80078d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80078d4:	4649      	mov	r1, r9
 80078d6:	008b      	lsls	r3, r1, #2
 80078d8:	4641      	mov	r1, r8
 80078da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078de:	4641      	mov	r1, r8
 80078e0:	008a      	lsls	r2, r1, #2
 80078e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80078e6:	f7f9 f98f 	bl	8000c08 <__aeabi_uldivmod>
 80078ea:	4602      	mov	r2, r0
 80078ec:	460b      	mov	r3, r1
 80078ee:	4b39      	ldr	r3, [pc, #228]	; (80079d4 <UART_SetConfig+0x4e4>)
 80078f0:	fba3 1302 	umull	r1, r3, r3, r2
 80078f4:	095b      	lsrs	r3, r3, #5
 80078f6:	2164      	movs	r1, #100	; 0x64
 80078f8:	fb01 f303 	mul.w	r3, r1, r3
 80078fc:	1ad3      	subs	r3, r2, r3
 80078fe:	011b      	lsls	r3, r3, #4
 8007900:	3332      	adds	r3, #50	; 0x32
 8007902:	4a34      	ldr	r2, [pc, #208]	; (80079d4 <UART_SetConfig+0x4e4>)
 8007904:	fba2 2303 	umull	r2, r3, r2, r3
 8007908:	095b      	lsrs	r3, r3, #5
 800790a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800790e:	441c      	add	r4, r3
 8007910:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007914:	2200      	movs	r2, #0
 8007916:	673b      	str	r3, [r7, #112]	; 0x70
 8007918:	677a      	str	r2, [r7, #116]	; 0x74
 800791a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800791e:	4642      	mov	r2, r8
 8007920:	464b      	mov	r3, r9
 8007922:	1891      	adds	r1, r2, r2
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	415b      	adcs	r3, r3
 8007928:	60fb      	str	r3, [r7, #12]
 800792a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800792e:	4641      	mov	r1, r8
 8007930:	1851      	adds	r1, r2, r1
 8007932:	6039      	str	r1, [r7, #0]
 8007934:	4649      	mov	r1, r9
 8007936:	414b      	adcs	r3, r1
 8007938:	607b      	str	r3, [r7, #4]
 800793a:	f04f 0200 	mov.w	r2, #0
 800793e:	f04f 0300 	mov.w	r3, #0
 8007942:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007946:	4659      	mov	r1, fp
 8007948:	00cb      	lsls	r3, r1, #3
 800794a:	4651      	mov	r1, sl
 800794c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007950:	4651      	mov	r1, sl
 8007952:	00ca      	lsls	r2, r1, #3
 8007954:	4610      	mov	r0, r2
 8007956:	4619      	mov	r1, r3
 8007958:	4603      	mov	r3, r0
 800795a:	4642      	mov	r2, r8
 800795c:	189b      	adds	r3, r3, r2
 800795e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007960:	464b      	mov	r3, r9
 8007962:	460a      	mov	r2, r1
 8007964:	eb42 0303 	adc.w	r3, r2, r3
 8007968:	66fb      	str	r3, [r7, #108]	; 0x6c
 800796a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	663b      	str	r3, [r7, #96]	; 0x60
 8007974:	667a      	str	r2, [r7, #100]	; 0x64
 8007976:	f04f 0200 	mov.w	r2, #0
 800797a:	f04f 0300 	mov.w	r3, #0
 800797e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007982:	4649      	mov	r1, r9
 8007984:	008b      	lsls	r3, r1, #2
 8007986:	4641      	mov	r1, r8
 8007988:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800798c:	4641      	mov	r1, r8
 800798e:	008a      	lsls	r2, r1, #2
 8007990:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007994:	f7f9 f938 	bl	8000c08 <__aeabi_uldivmod>
 8007998:	4602      	mov	r2, r0
 800799a:	460b      	mov	r3, r1
 800799c:	4b0d      	ldr	r3, [pc, #52]	; (80079d4 <UART_SetConfig+0x4e4>)
 800799e:	fba3 1302 	umull	r1, r3, r3, r2
 80079a2:	095b      	lsrs	r3, r3, #5
 80079a4:	2164      	movs	r1, #100	; 0x64
 80079a6:	fb01 f303 	mul.w	r3, r1, r3
 80079aa:	1ad3      	subs	r3, r2, r3
 80079ac:	011b      	lsls	r3, r3, #4
 80079ae:	3332      	adds	r3, #50	; 0x32
 80079b0:	4a08      	ldr	r2, [pc, #32]	; (80079d4 <UART_SetConfig+0x4e4>)
 80079b2:	fba2 2303 	umull	r2, r3, r2, r3
 80079b6:	095b      	lsrs	r3, r3, #5
 80079b8:	f003 020f 	and.w	r2, r3, #15
 80079bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4422      	add	r2, r4
 80079c4:	609a      	str	r2, [r3, #8]
}
 80079c6:	bf00      	nop
 80079c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80079cc:	46bd      	mov	sp, r7
 80079ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079d2:	bf00      	nop
 80079d4:	51eb851f 	.word	0x51eb851f

080079d8 <__assert_func>:
 80079d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80079da:	4614      	mov	r4, r2
 80079dc:	461a      	mov	r2, r3
 80079de:	4b09      	ldr	r3, [pc, #36]	; (8007a04 <__assert_func+0x2c>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4605      	mov	r5, r0
 80079e4:	68d8      	ldr	r0, [r3, #12]
 80079e6:	b14c      	cbz	r4, 80079fc <__assert_func+0x24>
 80079e8:	4b07      	ldr	r3, [pc, #28]	; (8007a08 <__assert_func+0x30>)
 80079ea:	9100      	str	r1, [sp, #0]
 80079ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80079f0:	4906      	ldr	r1, [pc, #24]	; (8007a0c <__assert_func+0x34>)
 80079f2:	462b      	mov	r3, r5
 80079f4:	f000 f814 	bl	8007a20 <fiprintf>
 80079f8:	f000 ff0c 	bl	8008814 <abort>
 80079fc:	4b04      	ldr	r3, [pc, #16]	; (8007a10 <__assert_func+0x38>)
 80079fe:	461c      	mov	r4, r3
 8007a00:	e7f3      	b.n	80079ea <__assert_func+0x12>
 8007a02:	bf00      	nop
 8007a04:	20000030 	.word	0x20000030
 8007a08:	0800aa00 	.word	0x0800aa00
 8007a0c:	0800aa0d 	.word	0x0800aa0d
 8007a10:	0800aa3b 	.word	0x0800aa3b

08007a14 <__errno>:
 8007a14:	4b01      	ldr	r3, [pc, #4]	; (8007a1c <__errno+0x8>)
 8007a16:	6818      	ldr	r0, [r3, #0]
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	20000030 	.word	0x20000030

08007a20 <fiprintf>:
 8007a20:	b40e      	push	{r1, r2, r3}
 8007a22:	b503      	push	{r0, r1, lr}
 8007a24:	4601      	mov	r1, r0
 8007a26:	ab03      	add	r3, sp, #12
 8007a28:	4805      	ldr	r0, [pc, #20]	; (8007a40 <fiprintf+0x20>)
 8007a2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a2e:	6800      	ldr	r0, [r0, #0]
 8007a30:	9301      	str	r3, [sp, #4]
 8007a32:	f000 f85d 	bl	8007af0 <_vfiprintf_r>
 8007a36:	b002      	add	sp, #8
 8007a38:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a3c:	b003      	add	sp, #12
 8007a3e:	4770      	bx	lr
 8007a40:	20000030 	.word	0x20000030

08007a44 <__libc_init_array>:
 8007a44:	b570      	push	{r4, r5, r6, lr}
 8007a46:	4d0d      	ldr	r5, [pc, #52]	; (8007a7c <__libc_init_array+0x38>)
 8007a48:	4c0d      	ldr	r4, [pc, #52]	; (8007a80 <__libc_init_array+0x3c>)
 8007a4a:	1b64      	subs	r4, r4, r5
 8007a4c:	10a4      	asrs	r4, r4, #2
 8007a4e:	2600      	movs	r6, #0
 8007a50:	42a6      	cmp	r6, r4
 8007a52:	d109      	bne.n	8007a68 <__libc_init_array+0x24>
 8007a54:	4d0b      	ldr	r5, [pc, #44]	; (8007a84 <__libc_init_array+0x40>)
 8007a56:	4c0c      	ldr	r4, [pc, #48]	; (8007a88 <__libc_init_array+0x44>)
 8007a58:	f002 fee8 	bl	800a82c <_init>
 8007a5c:	1b64      	subs	r4, r4, r5
 8007a5e:	10a4      	asrs	r4, r4, #2
 8007a60:	2600      	movs	r6, #0
 8007a62:	42a6      	cmp	r6, r4
 8007a64:	d105      	bne.n	8007a72 <__libc_init_array+0x2e>
 8007a66:	bd70      	pop	{r4, r5, r6, pc}
 8007a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a6c:	4798      	blx	r3
 8007a6e:	3601      	adds	r6, #1
 8007a70:	e7ee      	b.n	8007a50 <__libc_init_array+0xc>
 8007a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a76:	4798      	blx	r3
 8007a78:	3601      	adds	r6, #1
 8007a7a:	e7f2      	b.n	8007a62 <__libc_init_array+0x1e>
 8007a7c:	0800ade8 	.word	0x0800ade8
 8007a80:	0800ade8 	.word	0x0800ade8
 8007a84:	0800ade8 	.word	0x0800ade8
 8007a88:	0800adec 	.word	0x0800adec

08007a8c <memset>:
 8007a8c:	4402      	add	r2, r0
 8007a8e:	4603      	mov	r3, r0
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d100      	bne.n	8007a96 <memset+0xa>
 8007a94:	4770      	bx	lr
 8007a96:	f803 1b01 	strb.w	r1, [r3], #1
 8007a9a:	e7f9      	b.n	8007a90 <memset+0x4>

08007a9c <__sfputc_r>:
 8007a9c:	6893      	ldr	r3, [r2, #8]
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	b410      	push	{r4}
 8007aa4:	6093      	str	r3, [r2, #8]
 8007aa6:	da08      	bge.n	8007aba <__sfputc_r+0x1e>
 8007aa8:	6994      	ldr	r4, [r2, #24]
 8007aaa:	42a3      	cmp	r3, r4
 8007aac:	db01      	blt.n	8007ab2 <__sfputc_r+0x16>
 8007aae:	290a      	cmp	r1, #10
 8007ab0:	d103      	bne.n	8007aba <__sfputc_r+0x1e>
 8007ab2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ab6:	f000 bded 	b.w	8008694 <__swbuf_r>
 8007aba:	6813      	ldr	r3, [r2, #0]
 8007abc:	1c58      	adds	r0, r3, #1
 8007abe:	6010      	str	r0, [r2, #0]
 8007ac0:	7019      	strb	r1, [r3, #0]
 8007ac2:	4608      	mov	r0, r1
 8007ac4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ac8:	4770      	bx	lr

08007aca <__sfputs_r>:
 8007aca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007acc:	4606      	mov	r6, r0
 8007ace:	460f      	mov	r7, r1
 8007ad0:	4614      	mov	r4, r2
 8007ad2:	18d5      	adds	r5, r2, r3
 8007ad4:	42ac      	cmp	r4, r5
 8007ad6:	d101      	bne.n	8007adc <__sfputs_r+0x12>
 8007ad8:	2000      	movs	r0, #0
 8007ada:	e007      	b.n	8007aec <__sfputs_r+0x22>
 8007adc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ae0:	463a      	mov	r2, r7
 8007ae2:	4630      	mov	r0, r6
 8007ae4:	f7ff ffda 	bl	8007a9c <__sfputc_r>
 8007ae8:	1c43      	adds	r3, r0, #1
 8007aea:	d1f3      	bne.n	8007ad4 <__sfputs_r+0xa>
 8007aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007af0 <_vfiprintf_r>:
 8007af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af4:	460d      	mov	r5, r1
 8007af6:	b09d      	sub	sp, #116	; 0x74
 8007af8:	4614      	mov	r4, r2
 8007afa:	4698      	mov	r8, r3
 8007afc:	4606      	mov	r6, r0
 8007afe:	b118      	cbz	r0, 8007b08 <_vfiprintf_r+0x18>
 8007b00:	6983      	ldr	r3, [r0, #24]
 8007b02:	b90b      	cbnz	r3, 8007b08 <_vfiprintf_r+0x18>
 8007b04:	f001 fe20 	bl	8009748 <__sinit>
 8007b08:	4b89      	ldr	r3, [pc, #548]	; (8007d30 <_vfiprintf_r+0x240>)
 8007b0a:	429d      	cmp	r5, r3
 8007b0c:	d11b      	bne.n	8007b46 <_vfiprintf_r+0x56>
 8007b0e:	6875      	ldr	r5, [r6, #4]
 8007b10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b12:	07d9      	lsls	r1, r3, #31
 8007b14:	d405      	bmi.n	8007b22 <_vfiprintf_r+0x32>
 8007b16:	89ab      	ldrh	r3, [r5, #12]
 8007b18:	059a      	lsls	r2, r3, #22
 8007b1a:	d402      	bmi.n	8007b22 <_vfiprintf_r+0x32>
 8007b1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b1e:	f001 feb6 	bl	800988e <__retarget_lock_acquire_recursive>
 8007b22:	89ab      	ldrh	r3, [r5, #12]
 8007b24:	071b      	lsls	r3, r3, #28
 8007b26:	d501      	bpl.n	8007b2c <_vfiprintf_r+0x3c>
 8007b28:	692b      	ldr	r3, [r5, #16]
 8007b2a:	b9eb      	cbnz	r3, 8007b68 <_vfiprintf_r+0x78>
 8007b2c:	4629      	mov	r1, r5
 8007b2e:	4630      	mov	r0, r6
 8007b30:	f000 fe02 	bl	8008738 <__swsetup_r>
 8007b34:	b1c0      	cbz	r0, 8007b68 <_vfiprintf_r+0x78>
 8007b36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b38:	07dc      	lsls	r4, r3, #31
 8007b3a:	d50e      	bpl.n	8007b5a <_vfiprintf_r+0x6a>
 8007b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b40:	b01d      	add	sp, #116	; 0x74
 8007b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b46:	4b7b      	ldr	r3, [pc, #492]	; (8007d34 <_vfiprintf_r+0x244>)
 8007b48:	429d      	cmp	r5, r3
 8007b4a:	d101      	bne.n	8007b50 <_vfiprintf_r+0x60>
 8007b4c:	68b5      	ldr	r5, [r6, #8]
 8007b4e:	e7df      	b.n	8007b10 <_vfiprintf_r+0x20>
 8007b50:	4b79      	ldr	r3, [pc, #484]	; (8007d38 <_vfiprintf_r+0x248>)
 8007b52:	429d      	cmp	r5, r3
 8007b54:	bf08      	it	eq
 8007b56:	68f5      	ldreq	r5, [r6, #12]
 8007b58:	e7da      	b.n	8007b10 <_vfiprintf_r+0x20>
 8007b5a:	89ab      	ldrh	r3, [r5, #12]
 8007b5c:	0598      	lsls	r0, r3, #22
 8007b5e:	d4ed      	bmi.n	8007b3c <_vfiprintf_r+0x4c>
 8007b60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b62:	f001 fe95 	bl	8009890 <__retarget_lock_release_recursive>
 8007b66:	e7e9      	b.n	8007b3c <_vfiprintf_r+0x4c>
 8007b68:	2300      	movs	r3, #0
 8007b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b6c:	2320      	movs	r3, #32
 8007b6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b72:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b76:	2330      	movs	r3, #48	; 0x30
 8007b78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007d3c <_vfiprintf_r+0x24c>
 8007b7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b80:	f04f 0901 	mov.w	r9, #1
 8007b84:	4623      	mov	r3, r4
 8007b86:	469a      	mov	sl, r3
 8007b88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b8c:	b10a      	cbz	r2, 8007b92 <_vfiprintf_r+0xa2>
 8007b8e:	2a25      	cmp	r2, #37	; 0x25
 8007b90:	d1f9      	bne.n	8007b86 <_vfiprintf_r+0x96>
 8007b92:	ebba 0b04 	subs.w	fp, sl, r4
 8007b96:	d00b      	beq.n	8007bb0 <_vfiprintf_r+0xc0>
 8007b98:	465b      	mov	r3, fp
 8007b9a:	4622      	mov	r2, r4
 8007b9c:	4629      	mov	r1, r5
 8007b9e:	4630      	mov	r0, r6
 8007ba0:	f7ff ff93 	bl	8007aca <__sfputs_r>
 8007ba4:	3001      	adds	r0, #1
 8007ba6:	f000 80aa 	beq.w	8007cfe <_vfiprintf_r+0x20e>
 8007baa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bac:	445a      	add	r2, fp
 8007bae:	9209      	str	r2, [sp, #36]	; 0x24
 8007bb0:	f89a 3000 	ldrb.w	r3, [sl]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f000 80a2 	beq.w	8007cfe <_vfiprintf_r+0x20e>
 8007bba:	2300      	movs	r3, #0
 8007bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8007bc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bc4:	f10a 0a01 	add.w	sl, sl, #1
 8007bc8:	9304      	str	r3, [sp, #16]
 8007bca:	9307      	str	r3, [sp, #28]
 8007bcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007bd0:	931a      	str	r3, [sp, #104]	; 0x68
 8007bd2:	4654      	mov	r4, sl
 8007bd4:	2205      	movs	r2, #5
 8007bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bda:	4858      	ldr	r0, [pc, #352]	; (8007d3c <_vfiprintf_r+0x24c>)
 8007bdc:	f7f8 fb30 	bl	8000240 <memchr>
 8007be0:	9a04      	ldr	r2, [sp, #16]
 8007be2:	b9d8      	cbnz	r0, 8007c1c <_vfiprintf_r+0x12c>
 8007be4:	06d1      	lsls	r1, r2, #27
 8007be6:	bf44      	itt	mi
 8007be8:	2320      	movmi	r3, #32
 8007bea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bee:	0713      	lsls	r3, r2, #28
 8007bf0:	bf44      	itt	mi
 8007bf2:	232b      	movmi	r3, #43	; 0x2b
 8007bf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bf8:	f89a 3000 	ldrb.w	r3, [sl]
 8007bfc:	2b2a      	cmp	r3, #42	; 0x2a
 8007bfe:	d015      	beq.n	8007c2c <_vfiprintf_r+0x13c>
 8007c00:	9a07      	ldr	r2, [sp, #28]
 8007c02:	4654      	mov	r4, sl
 8007c04:	2000      	movs	r0, #0
 8007c06:	f04f 0c0a 	mov.w	ip, #10
 8007c0a:	4621      	mov	r1, r4
 8007c0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c10:	3b30      	subs	r3, #48	; 0x30
 8007c12:	2b09      	cmp	r3, #9
 8007c14:	d94e      	bls.n	8007cb4 <_vfiprintf_r+0x1c4>
 8007c16:	b1b0      	cbz	r0, 8007c46 <_vfiprintf_r+0x156>
 8007c18:	9207      	str	r2, [sp, #28]
 8007c1a:	e014      	b.n	8007c46 <_vfiprintf_r+0x156>
 8007c1c:	eba0 0308 	sub.w	r3, r0, r8
 8007c20:	fa09 f303 	lsl.w	r3, r9, r3
 8007c24:	4313      	orrs	r3, r2
 8007c26:	9304      	str	r3, [sp, #16]
 8007c28:	46a2      	mov	sl, r4
 8007c2a:	e7d2      	b.n	8007bd2 <_vfiprintf_r+0xe2>
 8007c2c:	9b03      	ldr	r3, [sp, #12]
 8007c2e:	1d19      	adds	r1, r3, #4
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	9103      	str	r1, [sp, #12]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	bfbb      	ittet	lt
 8007c38:	425b      	neglt	r3, r3
 8007c3a:	f042 0202 	orrlt.w	r2, r2, #2
 8007c3e:	9307      	strge	r3, [sp, #28]
 8007c40:	9307      	strlt	r3, [sp, #28]
 8007c42:	bfb8      	it	lt
 8007c44:	9204      	strlt	r2, [sp, #16]
 8007c46:	7823      	ldrb	r3, [r4, #0]
 8007c48:	2b2e      	cmp	r3, #46	; 0x2e
 8007c4a:	d10c      	bne.n	8007c66 <_vfiprintf_r+0x176>
 8007c4c:	7863      	ldrb	r3, [r4, #1]
 8007c4e:	2b2a      	cmp	r3, #42	; 0x2a
 8007c50:	d135      	bne.n	8007cbe <_vfiprintf_r+0x1ce>
 8007c52:	9b03      	ldr	r3, [sp, #12]
 8007c54:	1d1a      	adds	r2, r3, #4
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	9203      	str	r2, [sp, #12]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	bfb8      	it	lt
 8007c5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c62:	3402      	adds	r4, #2
 8007c64:	9305      	str	r3, [sp, #20]
 8007c66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007d4c <_vfiprintf_r+0x25c>
 8007c6a:	7821      	ldrb	r1, [r4, #0]
 8007c6c:	2203      	movs	r2, #3
 8007c6e:	4650      	mov	r0, sl
 8007c70:	f7f8 fae6 	bl	8000240 <memchr>
 8007c74:	b140      	cbz	r0, 8007c88 <_vfiprintf_r+0x198>
 8007c76:	2340      	movs	r3, #64	; 0x40
 8007c78:	eba0 000a 	sub.w	r0, r0, sl
 8007c7c:	fa03 f000 	lsl.w	r0, r3, r0
 8007c80:	9b04      	ldr	r3, [sp, #16]
 8007c82:	4303      	orrs	r3, r0
 8007c84:	3401      	adds	r4, #1
 8007c86:	9304      	str	r3, [sp, #16]
 8007c88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c8c:	482c      	ldr	r0, [pc, #176]	; (8007d40 <_vfiprintf_r+0x250>)
 8007c8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c92:	2206      	movs	r2, #6
 8007c94:	f7f8 fad4 	bl	8000240 <memchr>
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	d03f      	beq.n	8007d1c <_vfiprintf_r+0x22c>
 8007c9c:	4b29      	ldr	r3, [pc, #164]	; (8007d44 <_vfiprintf_r+0x254>)
 8007c9e:	bb1b      	cbnz	r3, 8007ce8 <_vfiprintf_r+0x1f8>
 8007ca0:	9b03      	ldr	r3, [sp, #12]
 8007ca2:	3307      	adds	r3, #7
 8007ca4:	f023 0307 	bic.w	r3, r3, #7
 8007ca8:	3308      	adds	r3, #8
 8007caa:	9303      	str	r3, [sp, #12]
 8007cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cae:	443b      	add	r3, r7
 8007cb0:	9309      	str	r3, [sp, #36]	; 0x24
 8007cb2:	e767      	b.n	8007b84 <_vfiprintf_r+0x94>
 8007cb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cb8:	460c      	mov	r4, r1
 8007cba:	2001      	movs	r0, #1
 8007cbc:	e7a5      	b.n	8007c0a <_vfiprintf_r+0x11a>
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	3401      	adds	r4, #1
 8007cc2:	9305      	str	r3, [sp, #20]
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	f04f 0c0a 	mov.w	ip, #10
 8007cca:	4620      	mov	r0, r4
 8007ccc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cd0:	3a30      	subs	r2, #48	; 0x30
 8007cd2:	2a09      	cmp	r2, #9
 8007cd4:	d903      	bls.n	8007cde <_vfiprintf_r+0x1ee>
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d0c5      	beq.n	8007c66 <_vfiprintf_r+0x176>
 8007cda:	9105      	str	r1, [sp, #20]
 8007cdc:	e7c3      	b.n	8007c66 <_vfiprintf_r+0x176>
 8007cde:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ce2:	4604      	mov	r4, r0
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e7f0      	b.n	8007cca <_vfiprintf_r+0x1da>
 8007ce8:	ab03      	add	r3, sp, #12
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	462a      	mov	r2, r5
 8007cee:	4b16      	ldr	r3, [pc, #88]	; (8007d48 <_vfiprintf_r+0x258>)
 8007cf0:	a904      	add	r1, sp, #16
 8007cf2:	4630      	mov	r0, r6
 8007cf4:	f000 f8cc 	bl	8007e90 <_printf_float>
 8007cf8:	4607      	mov	r7, r0
 8007cfa:	1c78      	adds	r0, r7, #1
 8007cfc:	d1d6      	bne.n	8007cac <_vfiprintf_r+0x1bc>
 8007cfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d00:	07d9      	lsls	r1, r3, #31
 8007d02:	d405      	bmi.n	8007d10 <_vfiprintf_r+0x220>
 8007d04:	89ab      	ldrh	r3, [r5, #12]
 8007d06:	059a      	lsls	r2, r3, #22
 8007d08:	d402      	bmi.n	8007d10 <_vfiprintf_r+0x220>
 8007d0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d0c:	f001 fdc0 	bl	8009890 <__retarget_lock_release_recursive>
 8007d10:	89ab      	ldrh	r3, [r5, #12]
 8007d12:	065b      	lsls	r3, r3, #25
 8007d14:	f53f af12 	bmi.w	8007b3c <_vfiprintf_r+0x4c>
 8007d18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d1a:	e711      	b.n	8007b40 <_vfiprintf_r+0x50>
 8007d1c:	ab03      	add	r3, sp, #12
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	462a      	mov	r2, r5
 8007d22:	4b09      	ldr	r3, [pc, #36]	; (8007d48 <_vfiprintf_r+0x258>)
 8007d24:	a904      	add	r1, sp, #16
 8007d26:	4630      	mov	r0, r6
 8007d28:	f000 fb56 	bl	80083d8 <_printf_i>
 8007d2c:	e7e4      	b.n	8007cf8 <_vfiprintf_r+0x208>
 8007d2e:	bf00      	nop
 8007d30:	0800ab38 	.word	0x0800ab38
 8007d34:	0800ab58 	.word	0x0800ab58
 8007d38:	0800ab18 	.word	0x0800ab18
 8007d3c:	0800aa40 	.word	0x0800aa40
 8007d40:	0800aa4a 	.word	0x0800aa4a
 8007d44:	08007e91 	.word	0x08007e91
 8007d48:	08007acb 	.word	0x08007acb
 8007d4c:	0800aa46 	.word	0x0800aa46

08007d50 <__cvt>:
 8007d50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d54:	ec55 4b10 	vmov	r4, r5, d0
 8007d58:	2d00      	cmp	r5, #0
 8007d5a:	460e      	mov	r6, r1
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	462b      	mov	r3, r5
 8007d60:	bfbb      	ittet	lt
 8007d62:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007d66:	461d      	movlt	r5, r3
 8007d68:	2300      	movge	r3, #0
 8007d6a:	232d      	movlt	r3, #45	; 0x2d
 8007d6c:	700b      	strb	r3, [r1, #0]
 8007d6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d70:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007d74:	4691      	mov	r9, r2
 8007d76:	f023 0820 	bic.w	r8, r3, #32
 8007d7a:	bfbc      	itt	lt
 8007d7c:	4622      	movlt	r2, r4
 8007d7e:	4614      	movlt	r4, r2
 8007d80:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d84:	d005      	beq.n	8007d92 <__cvt+0x42>
 8007d86:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007d8a:	d100      	bne.n	8007d8e <__cvt+0x3e>
 8007d8c:	3601      	adds	r6, #1
 8007d8e:	2102      	movs	r1, #2
 8007d90:	e000      	b.n	8007d94 <__cvt+0x44>
 8007d92:	2103      	movs	r1, #3
 8007d94:	ab03      	add	r3, sp, #12
 8007d96:	9301      	str	r3, [sp, #4]
 8007d98:	ab02      	add	r3, sp, #8
 8007d9a:	9300      	str	r3, [sp, #0]
 8007d9c:	ec45 4b10 	vmov	d0, r4, r5
 8007da0:	4653      	mov	r3, sl
 8007da2:	4632      	mov	r2, r6
 8007da4:	f000 fdc8 	bl	8008938 <_dtoa_r>
 8007da8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007dac:	4607      	mov	r7, r0
 8007dae:	d102      	bne.n	8007db6 <__cvt+0x66>
 8007db0:	f019 0f01 	tst.w	r9, #1
 8007db4:	d022      	beq.n	8007dfc <__cvt+0xac>
 8007db6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007dba:	eb07 0906 	add.w	r9, r7, r6
 8007dbe:	d110      	bne.n	8007de2 <__cvt+0x92>
 8007dc0:	783b      	ldrb	r3, [r7, #0]
 8007dc2:	2b30      	cmp	r3, #48	; 0x30
 8007dc4:	d10a      	bne.n	8007ddc <__cvt+0x8c>
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	2300      	movs	r3, #0
 8007dca:	4620      	mov	r0, r4
 8007dcc:	4629      	mov	r1, r5
 8007dce:	f7f8 feab 	bl	8000b28 <__aeabi_dcmpeq>
 8007dd2:	b918      	cbnz	r0, 8007ddc <__cvt+0x8c>
 8007dd4:	f1c6 0601 	rsb	r6, r6, #1
 8007dd8:	f8ca 6000 	str.w	r6, [sl]
 8007ddc:	f8da 3000 	ldr.w	r3, [sl]
 8007de0:	4499      	add	r9, r3
 8007de2:	2200      	movs	r2, #0
 8007de4:	2300      	movs	r3, #0
 8007de6:	4620      	mov	r0, r4
 8007de8:	4629      	mov	r1, r5
 8007dea:	f7f8 fe9d 	bl	8000b28 <__aeabi_dcmpeq>
 8007dee:	b108      	cbz	r0, 8007df4 <__cvt+0xa4>
 8007df0:	f8cd 900c 	str.w	r9, [sp, #12]
 8007df4:	2230      	movs	r2, #48	; 0x30
 8007df6:	9b03      	ldr	r3, [sp, #12]
 8007df8:	454b      	cmp	r3, r9
 8007dfa:	d307      	bcc.n	8007e0c <__cvt+0xbc>
 8007dfc:	9b03      	ldr	r3, [sp, #12]
 8007dfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e00:	1bdb      	subs	r3, r3, r7
 8007e02:	4638      	mov	r0, r7
 8007e04:	6013      	str	r3, [r2, #0]
 8007e06:	b004      	add	sp, #16
 8007e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e0c:	1c59      	adds	r1, r3, #1
 8007e0e:	9103      	str	r1, [sp, #12]
 8007e10:	701a      	strb	r2, [r3, #0]
 8007e12:	e7f0      	b.n	8007df6 <__cvt+0xa6>

08007e14 <__exponent>:
 8007e14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e16:	4603      	mov	r3, r0
 8007e18:	2900      	cmp	r1, #0
 8007e1a:	bfb8      	it	lt
 8007e1c:	4249      	neglt	r1, r1
 8007e1e:	f803 2b02 	strb.w	r2, [r3], #2
 8007e22:	bfb4      	ite	lt
 8007e24:	222d      	movlt	r2, #45	; 0x2d
 8007e26:	222b      	movge	r2, #43	; 0x2b
 8007e28:	2909      	cmp	r1, #9
 8007e2a:	7042      	strb	r2, [r0, #1]
 8007e2c:	dd2a      	ble.n	8007e84 <__exponent+0x70>
 8007e2e:	f10d 0407 	add.w	r4, sp, #7
 8007e32:	46a4      	mov	ip, r4
 8007e34:	270a      	movs	r7, #10
 8007e36:	46a6      	mov	lr, r4
 8007e38:	460a      	mov	r2, r1
 8007e3a:	fb91 f6f7 	sdiv	r6, r1, r7
 8007e3e:	fb07 1516 	mls	r5, r7, r6, r1
 8007e42:	3530      	adds	r5, #48	; 0x30
 8007e44:	2a63      	cmp	r2, #99	; 0x63
 8007e46:	f104 34ff 	add.w	r4, r4, #4294967295
 8007e4a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007e4e:	4631      	mov	r1, r6
 8007e50:	dcf1      	bgt.n	8007e36 <__exponent+0x22>
 8007e52:	3130      	adds	r1, #48	; 0x30
 8007e54:	f1ae 0502 	sub.w	r5, lr, #2
 8007e58:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007e5c:	1c44      	adds	r4, r0, #1
 8007e5e:	4629      	mov	r1, r5
 8007e60:	4561      	cmp	r1, ip
 8007e62:	d30a      	bcc.n	8007e7a <__exponent+0x66>
 8007e64:	f10d 0209 	add.w	r2, sp, #9
 8007e68:	eba2 020e 	sub.w	r2, r2, lr
 8007e6c:	4565      	cmp	r5, ip
 8007e6e:	bf88      	it	hi
 8007e70:	2200      	movhi	r2, #0
 8007e72:	4413      	add	r3, r2
 8007e74:	1a18      	subs	r0, r3, r0
 8007e76:	b003      	add	sp, #12
 8007e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e7e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007e82:	e7ed      	b.n	8007e60 <__exponent+0x4c>
 8007e84:	2330      	movs	r3, #48	; 0x30
 8007e86:	3130      	adds	r1, #48	; 0x30
 8007e88:	7083      	strb	r3, [r0, #2]
 8007e8a:	70c1      	strb	r1, [r0, #3]
 8007e8c:	1d03      	adds	r3, r0, #4
 8007e8e:	e7f1      	b.n	8007e74 <__exponent+0x60>

08007e90 <_printf_float>:
 8007e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e94:	ed2d 8b02 	vpush	{d8}
 8007e98:	b08d      	sub	sp, #52	; 0x34
 8007e9a:	460c      	mov	r4, r1
 8007e9c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007ea0:	4616      	mov	r6, r2
 8007ea2:	461f      	mov	r7, r3
 8007ea4:	4605      	mov	r5, r0
 8007ea6:	f001 fced 	bl	8009884 <_localeconv_r>
 8007eaa:	f8d0 a000 	ldr.w	sl, [r0]
 8007eae:	4650      	mov	r0, sl
 8007eb0:	f7f8 f9b8 	bl	8000224 <strlen>
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	930a      	str	r3, [sp, #40]	; 0x28
 8007eb8:	6823      	ldr	r3, [r4, #0]
 8007eba:	9305      	str	r3, [sp, #20]
 8007ebc:	f8d8 3000 	ldr.w	r3, [r8]
 8007ec0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007ec4:	3307      	adds	r3, #7
 8007ec6:	f023 0307 	bic.w	r3, r3, #7
 8007eca:	f103 0208 	add.w	r2, r3, #8
 8007ece:	f8c8 2000 	str.w	r2, [r8]
 8007ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007eda:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007ede:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007ee2:	9307      	str	r3, [sp, #28]
 8007ee4:	f8cd 8018 	str.w	r8, [sp, #24]
 8007ee8:	ee08 0a10 	vmov	s16, r0
 8007eec:	4b9f      	ldr	r3, [pc, #636]	; (800816c <_printf_float+0x2dc>)
 8007eee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef6:	f7f8 fe49 	bl	8000b8c <__aeabi_dcmpun>
 8007efa:	bb88      	cbnz	r0, 8007f60 <_printf_float+0xd0>
 8007efc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f00:	4b9a      	ldr	r3, [pc, #616]	; (800816c <_printf_float+0x2dc>)
 8007f02:	f04f 32ff 	mov.w	r2, #4294967295
 8007f06:	f7f8 fe23 	bl	8000b50 <__aeabi_dcmple>
 8007f0a:	bb48      	cbnz	r0, 8007f60 <_printf_float+0xd0>
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	2300      	movs	r3, #0
 8007f10:	4640      	mov	r0, r8
 8007f12:	4649      	mov	r1, r9
 8007f14:	f7f8 fe12 	bl	8000b3c <__aeabi_dcmplt>
 8007f18:	b110      	cbz	r0, 8007f20 <_printf_float+0x90>
 8007f1a:	232d      	movs	r3, #45	; 0x2d
 8007f1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f20:	4b93      	ldr	r3, [pc, #588]	; (8008170 <_printf_float+0x2e0>)
 8007f22:	4894      	ldr	r0, [pc, #592]	; (8008174 <_printf_float+0x2e4>)
 8007f24:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007f28:	bf94      	ite	ls
 8007f2a:	4698      	movls	r8, r3
 8007f2c:	4680      	movhi	r8, r0
 8007f2e:	2303      	movs	r3, #3
 8007f30:	6123      	str	r3, [r4, #16]
 8007f32:	9b05      	ldr	r3, [sp, #20]
 8007f34:	f023 0204 	bic.w	r2, r3, #4
 8007f38:	6022      	str	r2, [r4, #0]
 8007f3a:	f04f 0900 	mov.w	r9, #0
 8007f3e:	9700      	str	r7, [sp, #0]
 8007f40:	4633      	mov	r3, r6
 8007f42:	aa0b      	add	r2, sp, #44	; 0x2c
 8007f44:	4621      	mov	r1, r4
 8007f46:	4628      	mov	r0, r5
 8007f48:	f000 f9d8 	bl	80082fc <_printf_common>
 8007f4c:	3001      	adds	r0, #1
 8007f4e:	f040 8090 	bne.w	8008072 <_printf_float+0x1e2>
 8007f52:	f04f 30ff 	mov.w	r0, #4294967295
 8007f56:	b00d      	add	sp, #52	; 0x34
 8007f58:	ecbd 8b02 	vpop	{d8}
 8007f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f60:	4642      	mov	r2, r8
 8007f62:	464b      	mov	r3, r9
 8007f64:	4640      	mov	r0, r8
 8007f66:	4649      	mov	r1, r9
 8007f68:	f7f8 fe10 	bl	8000b8c <__aeabi_dcmpun>
 8007f6c:	b140      	cbz	r0, 8007f80 <_printf_float+0xf0>
 8007f6e:	464b      	mov	r3, r9
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	bfbc      	itt	lt
 8007f74:	232d      	movlt	r3, #45	; 0x2d
 8007f76:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007f7a:	487f      	ldr	r0, [pc, #508]	; (8008178 <_printf_float+0x2e8>)
 8007f7c:	4b7f      	ldr	r3, [pc, #508]	; (800817c <_printf_float+0x2ec>)
 8007f7e:	e7d1      	b.n	8007f24 <_printf_float+0x94>
 8007f80:	6863      	ldr	r3, [r4, #4]
 8007f82:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007f86:	9206      	str	r2, [sp, #24]
 8007f88:	1c5a      	adds	r2, r3, #1
 8007f8a:	d13f      	bne.n	800800c <_printf_float+0x17c>
 8007f8c:	2306      	movs	r3, #6
 8007f8e:	6063      	str	r3, [r4, #4]
 8007f90:	9b05      	ldr	r3, [sp, #20]
 8007f92:	6861      	ldr	r1, [r4, #4]
 8007f94:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007f98:	2300      	movs	r3, #0
 8007f9a:	9303      	str	r3, [sp, #12]
 8007f9c:	ab0a      	add	r3, sp, #40	; 0x28
 8007f9e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007fa2:	ab09      	add	r3, sp, #36	; 0x24
 8007fa4:	ec49 8b10 	vmov	d0, r8, r9
 8007fa8:	9300      	str	r3, [sp, #0]
 8007faa:	6022      	str	r2, [r4, #0]
 8007fac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	f7ff fecd 	bl	8007d50 <__cvt>
 8007fb6:	9b06      	ldr	r3, [sp, #24]
 8007fb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fba:	2b47      	cmp	r3, #71	; 0x47
 8007fbc:	4680      	mov	r8, r0
 8007fbe:	d108      	bne.n	8007fd2 <_printf_float+0x142>
 8007fc0:	1cc8      	adds	r0, r1, #3
 8007fc2:	db02      	blt.n	8007fca <_printf_float+0x13a>
 8007fc4:	6863      	ldr	r3, [r4, #4]
 8007fc6:	4299      	cmp	r1, r3
 8007fc8:	dd41      	ble.n	800804e <_printf_float+0x1be>
 8007fca:	f1ab 0b02 	sub.w	fp, fp, #2
 8007fce:	fa5f fb8b 	uxtb.w	fp, fp
 8007fd2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007fd6:	d820      	bhi.n	800801a <_printf_float+0x18a>
 8007fd8:	3901      	subs	r1, #1
 8007fda:	465a      	mov	r2, fp
 8007fdc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007fe0:	9109      	str	r1, [sp, #36]	; 0x24
 8007fe2:	f7ff ff17 	bl	8007e14 <__exponent>
 8007fe6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fe8:	1813      	adds	r3, r2, r0
 8007fea:	2a01      	cmp	r2, #1
 8007fec:	4681      	mov	r9, r0
 8007fee:	6123      	str	r3, [r4, #16]
 8007ff0:	dc02      	bgt.n	8007ff8 <_printf_float+0x168>
 8007ff2:	6822      	ldr	r2, [r4, #0]
 8007ff4:	07d2      	lsls	r2, r2, #31
 8007ff6:	d501      	bpl.n	8007ffc <_printf_float+0x16c>
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	6123      	str	r3, [r4, #16]
 8007ffc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008000:	2b00      	cmp	r3, #0
 8008002:	d09c      	beq.n	8007f3e <_printf_float+0xae>
 8008004:	232d      	movs	r3, #45	; 0x2d
 8008006:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800800a:	e798      	b.n	8007f3e <_printf_float+0xae>
 800800c:	9a06      	ldr	r2, [sp, #24]
 800800e:	2a47      	cmp	r2, #71	; 0x47
 8008010:	d1be      	bne.n	8007f90 <_printf_float+0x100>
 8008012:	2b00      	cmp	r3, #0
 8008014:	d1bc      	bne.n	8007f90 <_printf_float+0x100>
 8008016:	2301      	movs	r3, #1
 8008018:	e7b9      	b.n	8007f8e <_printf_float+0xfe>
 800801a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800801e:	d118      	bne.n	8008052 <_printf_float+0x1c2>
 8008020:	2900      	cmp	r1, #0
 8008022:	6863      	ldr	r3, [r4, #4]
 8008024:	dd0b      	ble.n	800803e <_printf_float+0x1ae>
 8008026:	6121      	str	r1, [r4, #16]
 8008028:	b913      	cbnz	r3, 8008030 <_printf_float+0x1a0>
 800802a:	6822      	ldr	r2, [r4, #0]
 800802c:	07d0      	lsls	r0, r2, #31
 800802e:	d502      	bpl.n	8008036 <_printf_float+0x1a6>
 8008030:	3301      	adds	r3, #1
 8008032:	440b      	add	r3, r1
 8008034:	6123      	str	r3, [r4, #16]
 8008036:	65a1      	str	r1, [r4, #88]	; 0x58
 8008038:	f04f 0900 	mov.w	r9, #0
 800803c:	e7de      	b.n	8007ffc <_printf_float+0x16c>
 800803e:	b913      	cbnz	r3, 8008046 <_printf_float+0x1b6>
 8008040:	6822      	ldr	r2, [r4, #0]
 8008042:	07d2      	lsls	r2, r2, #31
 8008044:	d501      	bpl.n	800804a <_printf_float+0x1ba>
 8008046:	3302      	adds	r3, #2
 8008048:	e7f4      	b.n	8008034 <_printf_float+0x1a4>
 800804a:	2301      	movs	r3, #1
 800804c:	e7f2      	b.n	8008034 <_printf_float+0x1a4>
 800804e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008054:	4299      	cmp	r1, r3
 8008056:	db05      	blt.n	8008064 <_printf_float+0x1d4>
 8008058:	6823      	ldr	r3, [r4, #0]
 800805a:	6121      	str	r1, [r4, #16]
 800805c:	07d8      	lsls	r0, r3, #31
 800805e:	d5ea      	bpl.n	8008036 <_printf_float+0x1a6>
 8008060:	1c4b      	adds	r3, r1, #1
 8008062:	e7e7      	b.n	8008034 <_printf_float+0x1a4>
 8008064:	2900      	cmp	r1, #0
 8008066:	bfd4      	ite	le
 8008068:	f1c1 0202 	rsble	r2, r1, #2
 800806c:	2201      	movgt	r2, #1
 800806e:	4413      	add	r3, r2
 8008070:	e7e0      	b.n	8008034 <_printf_float+0x1a4>
 8008072:	6823      	ldr	r3, [r4, #0]
 8008074:	055a      	lsls	r2, r3, #21
 8008076:	d407      	bmi.n	8008088 <_printf_float+0x1f8>
 8008078:	6923      	ldr	r3, [r4, #16]
 800807a:	4642      	mov	r2, r8
 800807c:	4631      	mov	r1, r6
 800807e:	4628      	mov	r0, r5
 8008080:	47b8      	blx	r7
 8008082:	3001      	adds	r0, #1
 8008084:	d12c      	bne.n	80080e0 <_printf_float+0x250>
 8008086:	e764      	b.n	8007f52 <_printf_float+0xc2>
 8008088:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800808c:	f240 80e0 	bls.w	8008250 <_printf_float+0x3c0>
 8008090:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008094:	2200      	movs	r2, #0
 8008096:	2300      	movs	r3, #0
 8008098:	f7f8 fd46 	bl	8000b28 <__aeabi_dcmpeq>
 800809c:	2800      	cmp	r0, #0
 800809e:	d034      	beq.n	800810a <_printf_float+0x27a>
 80080a0:	4a37      	ldr	r2, [pc, #220]	; (8008180 <_printf_float+0x2f0>)
 80080a2:	2301      	movs	r3, #1
 80080a4:	4631      	mov	r1, r6
 80080a6:	4628      	mov	r0, r5
 80080a8:	47b8      	blx	r7
 80080aa:	3001      	adds	r0, #1
 80080ac:	f43f af51 	beq.w	8007f52 <_printf_float+0xc2>
 80080b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080b4:	429a      	cmp	r2, r3
 80080b6:	db02      	blt.n	80080be <_printf_float+0x22e>
 80080b8:	6823      	ldr	r3, [r4, #0]
 80080ba:	07d8      	lsls	r0, r3, #31
 80080bc:	d510      	bpl.n	80080e0 <_printf_float+0x250>
 80080be:	ee18 3a10 	vmov	r3, s16
 80080c2:	4652      	mov	r2, sl
 80080c4:	4631      	mov	r1, r6
 80080c6:	4628      	mov	r0, r5
 80080c8:	47b8      	blx	r7
 80080ca:	3001      	adds	r0, #1
 80080cc:	f43f af41 	beq.w	8007f52 <_printf_float+0xc2>
 80080d0:	f04f 0800 	mov.w	r8, #0
 80080d4:	f104 091a 	add.w	r9, r4, #26
 80080d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080da:	3b01      	subs	r3, #1
 80080dc:	4543      	cmp	r3, r8
 80080de:	dc09      	bgt.n	80080f4 <_printf_float+0x264>
 80080e0:	6823      	ldr	r3, [r4, #0]
 80080e2:	079b      	lsls	r3, r3, #30
 80080e4:	f100 8105 	bmi.w	80082f2 <_printf_float+0x462>
 80080e8:	68e0      	ldr	r0, [r4, #12]
 80080ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080ec:	4298      	cmp	r0, r3
 80080ee:	bfb8      	it	lt
 80080f0:	4618      	movlt	r0, r3
 80080f2:	e730      	b.n	8007f56 <_printf_float+0xc6>
 80080f4:	2301      	movs	r3, #1
 80080f6:	464a      	mov	r2, r9
 80080f8:	4631      	mov	r1, r6
 80080fa:	4628      	mov	r0, r5
 80080fc:	47b8      	blx	r7
 80080fe:	3001      	adds	r0, #1
 8008100:	f43f af27 	beq.w	8007f52 <_printf_float+0xc2>
 8008104:	f108 0801 	add.w	r8, r8, #1
 8008108:	e7e6      	b.n	80080d8 <_printf_float+0x248>
 800810a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800810c:	2b00      	cmp	r3, #0
 800810e:	dc39      	bgt.n	8008184 <_printf_float+0x2f4>
 8008110:	4a1b      	ldr	r2, [pc, #108]	; (8008180 <_printf_float+0x2f0>)
 8008112:	2301      	movs	r3, #1
 8008114:	4631      	mov	r1, r6
 8008116:	4628      	mov	r0, r5
 8008118:	47b8      	blx	r7
 800811a:	3001      	adds	r0, #1
 800811c:	f43f af19 	beq.w	8007f52 <_printf_float+0xc2>
 8008120:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008124:	4313      	orrs	r3, r2
 8008126:	d102      	bne.n	800812e <_printf_float+0x29e>
 8008128:	6823      	ldr	r3, [r4, #0]
 800812a:	07d9      	lsls	r1, r3, #31
 800812c:	d5d8      	bpl.n	80080e0 <_printf_float+0x250>
 800812e:	ee18 3a10 	vmov	r3, s16
 8008132:	4652      	mov	r2, sl
 8008134:	4631      	mov	r1, r6
 8008136:	4628      	mov	r0, r5
 8008138:	47b8      	blx	r7
 800813a:	3001      	adds	r0, #1
 800813c:	f43f af09 	beq.w	8007f52 <_printf_float+0xc2>
 8008140:	f04f 0900 	mov.w	r9, #0
 8008144:	f104 0a1a 	add.w	sl, r4, #26
 8008148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800814a:	425b      	negs	r3, r3
 800814c:	454b      	cmp	r3, r9
 800814e:	dc01      	bgt.n	8008154 <_printf_float+0x2c4>
 8008150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008152:	e792      	b.n	800807a <_printf_float+0x1ea>
 8008154:	2301      	movs	r3, #1
 8008156:	4652      	mov	r2, sl
 8008158:	4631      	mov	r1, r6
 800815a:	4628      	mov	r0, r5
 800815c:	47b8      	blx	r7
 800815e:	3001      	adds	r0, #1
 8008160:	f43f aef7 	beq.w	8007f52 <_printf_float+0xc2>
 8008164:	f109 0901 	add.w	r9, r9, #1
 8008168:	e7ee      	b.n	8008148 <_printf_float+0x2b8>
 800816a:	bf00      	nop
 800816c:	7fefffff 	.word	0x7fefffff
 8008170:	0800aa51 	.word	0x0800aa51
 8008174:	0800aa55 	.word	0x0800aa55
 8008178:	0800aa5d 	.word	0x0800aa5d
 800817c:	0800aa59 	.word	0x0800aa59
 8008180:	0800aa61 	.word	0x0800aa61
 8008184:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008186:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008188:	429a      	cmp	r2, r3
 800818a:	bfa8      	it	ge
 800818c:	461a      	movge	r2, r3
 800818e:	2a00      	cmp	r2, #0
 8008190:	4691      	mov	r9, r2
 8008192:	dc37      	bgt.n	8008204 <_printf_float+0x374>
 8008194:	f04f 0b00 	mov.w	fp, #0
 8008198:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800819c:	f104 021a 	add.w	r2, r4, #26
 80081a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081a2:	9305      	str	r3, [sp, #20]
 80081a4:	eba3 0309 	sub.w	r3, r3, r9
 80081a8:	455b      	cmp	r3, fp
 80081aa:	dc33      	bgt.n	8008214 <_printf_float+0x384>
 80081ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081b0:	429a      	cmp	r2, r3
 80081b2:	db3b      	blt.n	800822c <_printf_float+0x39c>
 80081b4:	6823      	ldr	r3, [r4, #0]
 80081b6:	07da      	lsls	r2, r3, #31
 80081b8:	d438      	bmi.n	800822c <_printf_float+0x39c>
 80081ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081bc:	9a05      	ldr	r2, [sp, #20]
 80081be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081c0:	1a9a      	subs	r2, r3, r2
 80081c2:	eba3 0901 	sub.w	r9, r3, r1
 80081c6:	4591      	cmp	r9, r2
 80081c8:	bfa8      	it	ge
 80081ca:	4691      	movge	r9, r2
 80081cc:	f1b9 0f00 	cmp.w	r9, #0
 80081d0:	dc35      	bgt.n	800823e <_printf_float+0x3ae>
 80081d2:	f04f 0800 	mov.w	r8, #0
 80081d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081da:	f104 0a1a 	add.w	sl, r4, #26
 80081de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081e2:	1a9b      	subs	r3, r3, r2
 80081e4:	eba3 0309 	sub.w	r3, r3, r9
 80081e8:	4543      	cmp	r3, r8
 80081ea:	f77f af79 	ble.w	80080e0 <_printf_float+0x250>
 80081ee:	2301      	movs	r3, #1
 80081f0:	4652      	mov	r2, sl
 80081f2:	4631      	mov	r1, r6
 80081f4:	4628      	mov	r0, r5
 80081f6:	47b8      	blx	r7
 80081f8:	3001      	adds	r0, #1
 80081fa:	f43f aeaa 	beq.w	8007f52 <_printf_float+0xc2>
 80081fe:	f108 0801 	add.w	r8, r8, #1
 8008202:	e7ec      	b.n	80081de <_printf_float+0x34e>
 8008204:	4613      	mov	r3, r2
 8008206:	4631      	mov	r1, r6
 8008208:	4642      	mov	r2, r8
 800820a:	4628      	mov	r0, r5
 800820c:	47b8      	blx	r7
 800820e:	3001      	adds	r0, #1
 8008210:	d1c0      	bne.n	8008194 <_printf_float+0x304>
 8008212:	e69e      	b.n	8007f52 <_printf_float+0xc2>
 8008214:	2301      	movs	r3, #1
 8008216:	4631      	mov	r1, r6
 8008218:	4628      	mov	r0, r5
 800821a:	9205      	str	r2, [sp, #20]
 800821c:	47b8      	blx	r7
 800821e:	3001      	adds	r0, #1
 8008220:	f43f ae97 	beq.w	8007f52 <_printf_float+0xc2>
 8008224:	9a05      	ldr	r2, [sp, #20]
 8008226:	f10b 0b01 	add.w	fp, fp, #1
 800822a:	e7b9      	b.n	80081a0 <_printf_float+0x310>
 800822c:	ee18 3a10 	vmov	r3, s16
 8008230:	4652      	mov	r2, sl
 8008232:	4631      	mov	r1, r6
 8008234:	4628      	mov	r0, r5
 8008236:	47b8      	blx	r7
 8008238:	3001      	adds	r0, #1
 800823a:	d1be      	bne.n	80081ba <_printf_float+0x32a>
 800823c:	e689      	b.n	8007f52 <_printf_float+0xc2>
 800823e:	9a05      	ldr	r2, [sp, #20]
 8008240:	464b      	mov	r3, r9
 8008242:	4442      	add	r2, r8
 8008244:	4631      	mov	r1, r6
 8008246:	4628      	mov	r0, r5
 8008248:	47b8      	blx	r7
 800824a:	3001      	adds	r0, #1
 800824c:	d1c1      	bne.n	80081d2 <_printf_float+0x342>
 800824e:	e680      	b.n	8007f52 <_printf_float+0xc2>
 8008250:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008252:	2a01      	cmp	r2, #1
 8008254:	dc01      	bgt.n	800825a <_printf_float+0x3ca>
 8008256:	07db      	lsls	r3, r3, #31
 8008258:	d538      	bpl.n	80082cc <_printf_float+0x43c>
 800825a:	2301      	movs	r3, #1
 800825c:	4642      	mov	r2, r8
 800825e:	4631      	mov	r1, r6
 8008260:	4628      	mov	r0, r5
 8008262:	47b8      	blx	r7
 8008264:	3001      	adds	r0, #1
 8008266:	f43f ae74 	beq.w	8007f52 <_printf_float+0xc2>
 800826a:	ee18 3a10 	vmov	r3, s16
 800826e:	4652      	mov	r2, sl
 8008270:	4631      	mov	r1, r6
 8008272:	4628      	mov	r0, r5
 8008274:	47b8      	blx	r7
 8008276:	3001      	adds	r0, #1
 8008278:	f43f ae6b 	beq.w	8007f52 <_printf_float+0xc2>
 800827c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008280:	2200      	movs	r2, #0
 8008282:	2300      	movs	r3, #0
 8008284:	f7f8 fc50 	bl	8000b28 <__aeabi_dcmpeq>
 8008288:	b9d8      	cbnz	r0, 80082c2 <_printf_float+0x432>
 800828a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800828c:	f108 0201 	add.w	r2, r8, #1
 8008290:	3b01      	subs	r3, #1
 8008292:	4631      	mov	r1, r6
 8008294:	4628      	mov	r0, r5
 8008296:	47b8      	blx	r7
 8008298:	3001      	adds	r0, #1
 800829a:	d10e      	bne.n	80082ba <_printf_float+0x42a>
 800829c:	e659      	b.n	8007f52 <_printf_float+0xc2>
 800829e:	2301      	movs	r3, #1
 80082a0:	4652      	mov	r2, sl
 80082a2:	4631      	mov	r1, r6
 80082a4:	4628      	mov	r0, r5
 80082a6:	47b8      	blx	r7
 80082a8:	3001      	adds	r0, #1
 80082aa:	f43f ae52 	beq.w	8007f52 <_printf_float+0xc2>
 80082ae:	f108 0801 	add.w	r8, r8, #1
 80082b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082b4:	3b01      	subs	r3, #1
 80082b6:	4543      	cmp	r3, r8
 80082b8:	dcf1      	bgt.n	800829e <_printf_float+0x40e>
 80082ba:	464b      	mov	r3, r9
 80082bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80082c0:	e6dc      	b.n	800807c <_printf_float+0x1ec>
 80082c2:	f04f 0800 	mov.w	r8, #0
 80082c6:	f104 0a1a 	add.w	sl, r4, #26
 80082ca:	e7f2      	b.n	80082b2 <_printf_float+0x422>
 80082cc:	2301      	movs	r3, #1
 80082ce:	4642      	mov	r2, r8
 80082d0:	e7df      	b.n	8008292 <_printf_float+0x402>
 80082d2:	2301      	movs	r3, #1
 80082d4:	464a      	mov	r2, r9
 80082d6:	4631      	mov	r1, r6
 80082d8:	4628      	mov	r0, r5
 80082da:	47b8      	blx	r7
 80082dc:	3001      	adds	r0, #1
 80082de:	f43f ae38 	beq.w	8007f52 <_printf_float+0xc2>
 80082e2:	f108 0801 	add.w	r8, r8, #1
 80082e6:	68e3      	ldr	r3, [r4, #12]
 80082e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082ea:	1a5b      	subs	r3, r3, r1
 80082ec:	4543      	cmp	r3, r8
 80082ee:	dcf0      	bgt.n	80082d2 <_printf_float+0x442>
 80082f0:	e6fa      	b.n	80080e8 <_printf_float+0x258>
 80082f2:	f04f 0800 	mov.w	r8, #0
 80082f6:	f104 0919 	add.w	r9, r4, #25
 80082fa:	e7f4      	b.n	80082e6 <_printf_float+0x456>

080082fc <_printf_common>:
 80082fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008300:	4616      	mov	r6, r2
 8008302:	4699      	mov	r9, r3
 8008304:	688a      	ldr	r2, [r1, #8]
 8008306:	690b      	ldr	r3, [r1, #16]
 8008308:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800830c:	4293      	cmp	r3, r2
 800830e:	bfb8      	it	lt
 8008310:	4613      	movlt	r3, r2
 8008312:	6033      	str	r3, [r6, #0]
 8008314:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008318:	4607      	mov	r7, r0
 800831a:	460c      	mov	r4, r1
 800831c:	b10a      	cbz	r2, 8008322 <_printf_common+0x26>
 800831e:	3301      	adds	r3, #1
 8008320:	6033      	str	r3, [r6, #0]
 8008322:	6823      	ldr	r3, [r4, #0]
 8008324:	0699      	lsls	r1, r3, #26
 8008326:	bf42      	ittt	mi
 8008328:	6833      	ldrmi	r3, [r6, #0]
 800832a:	3302      	addmi	r3, #2
 800832c:	6033      	strmi	r3, [r6, #0]
 800832e:	6825      	ldr	r5, [r4, #0]
 8008330:	f015 0506 	ands.w	r5, r5, #6
 8008334:	d106      	bne.n	8008344 <_printf_common+0x48>
 8008336:	f104 0a19 	add.w	sl, r4, #25
 800833a:	68e3      	ldr	r3, [r4, #12]
 800833c:	6832      	ldr	r2, [r6, #0]
 800833e:	1a9b      	subs	r3, r3, r2
 8008340:	42ab      	cmp	r3, r5
 8008342:	dc26      	bgt.n	8008392 <_printf_common+0x96>
 8008344:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008348:	1e13      	subs	r3, r2, #0
 800834a:	6822      	ldr	r2, [r4, #0]
 800834c:	bf18      	it	ne
 800834e:	2301      	movne	r3, #1
 8008350:	0692      	lsls	r2, r2, #26
 8008352:	d42b      	bmi.n	80083ac <_printf_common+0xb0>
 8008354:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008358:	4649      	mov	r1, r9
 800835a:	4638      	mov	r0, r7
 800835c:	47c0      	blx	r8
 800835e:	3001      	adds	r0, #1
 8008360:	d01e      	beq.n	80083a0 <_printf_common+0xa4>
 8008362:	6823      	ldr	r3, [r4, #0]
 8008364:	68e5      	ldr	r5, [r4, #12]
 8008366:	6832      	ldr	r2, [r6, #0]
 8008368:	f003 0306 	and.w	r3, r3, #6
 800836c:	2b04      	cmp	r3, #4
 800836e:	bf08      	it	eq
 8008370:	1aad      	subeq	r5, r5, r2
 8008372:	68a3      	ldr	r3, [r4, #8]
 8008374:	6922      	ldr	r2, [r4, #16]
 8008376:	bf0c      	ite	eq
 8008378:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800837c:	2500      	movne	r5, #0
 800837e:	4293      	cmp	r3, r2
 8008380:	bfc4      	itt	gt
 8008382:	1a9b      	subgt	r3, r3, r2
 8008384:	18ed      	addgt	r5, r5, r3
 8008386:	2600      	movs	r6, #0
 8008388:	341a      	adds	r4, #26
 800838a:	42b5      	cmp	r5, r6
 800838c:	d11a      	bne.n	80083c4 <_printf_common+0xc8>
 800838e:	2000      	movs	r0, #0
 8008390:	e008      	b.n	80083a4 <_printf_common+0xa8>
 8008392:	2301      	movs	r3, #1
 8008394:	4652      	mov	r2, sl
 8008396:	4649      	mov	r1, r9
 8008398:	4638      	mov	r0, r7
 800839a:	47c0      	blx	r8
 800839c:	3001      	adds	r0, #1
 800839e:	d103      	bne.n	80083a8 <_printf_common+0xac>
 80083a0:	f04f 30ff 	mov.w	r0, #4294967295
 80083a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083a8:	3501      	adds	r5, #1
 80083aa:	e7c6      	b.n	800833a <_printf_common+0x3e>
 80083ac:	18e1      	adds	r1, r4, r3
 80083ae:	1c5a      	adds	r2, r3, #1
 80083b0:	2030      	movs	r0, #48	; 0x30
 80083b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083b6:	4422      	add	r2, r4
 80083b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083c0:	3302      	adds	r3, #2
 80083c2:	e7c7      	b.n	8008354 <_printf_common+0x58>
 80083c4:	2301      	movs	r3, #1
 80083c6:	4622      	mov	r2, r4
 80083c8:	4649      	mov	r1, r9
 80083ca:	4638      	mov	r0, r7
 80083cc:	47c0      	blx	r8
 80083ce:	3001      	adds	r0, #1
 80083d0:	d0e6      	beq.n	80083a0 <_printf_common+0xa4>
 80083d2:	3601      	adds	r6, #1
 80083d4:	e7d9      	b.n	800838a <_printf_common+0x8e>
	...

080083d8 <_printf_i>:
 80083d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083dc:	7e0f      	ldrb	r7, [r1, #24]
 80083de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80083e0:	2f78      	cmp	r7, #120	; 0x78
 80083e2:	4691      	mov	r9, r2
 80083e4:	4680      	mov	r8, r0
 80083e6:	460c      	mov	r4, r1
 80083e8:	469a      	mov	sl, r3
 80083ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80083ee:	d807      	bhi.n	8008400 <_printf_i+0x28>
 80083f0:	2f62      	cmp	r7, #98	; 0x62
 80083f2:	d80a      	bhi.n	800840a <_printf_i+0x32>
 80083f4:	2f00      	cmp	r7, #0
 80083f6:	f000 80d8 	beq.w	80085aa <_printf_i+0x1d2>
 80083fa:	2f58      	cmp	r7, #88	; 0x58
 80083fc:	f000 80a3 	beq.w	8008546 <_printf_i+0x16e>
 8008400:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008404:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008408:	e03a      	b.n	8008480 <_printf_i+0xa8>
 800840a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800840e:	2b15      	cmp	r3, #21
 8008410:	d8f6      	bhi.n	8008400 <_printf_i+0x28>
 8008412:	a101      	add	r1, pc, #4	; (adr r1, 8008418 <_printf_i+0x40>)
 8008414:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008418:	08008471 	.word	0x08008471
 800841c:	08008485 	.word	0x08008485
 8008420:	08008401 	.word	0x08008401
 8008424:	08008401 	.word	0x08008401
 8008428:	08008401 	.word	0x08008401
 800842c:	08008401 	.word	0x08008401
 8008430:	08008485 	.word	0x08008485
 8008434:	08008401 	.word	0x08008401
 8008438:	08008401 	.word	0x08008401
 800843c:	08008401 	.word	0x08008401
 8008440:	08008401 	.word	0x08008401
 8008444:	08008591 	.word	0x08008591
 8008448:	080084b5 	.word	0x080084b5
 800844c:	08008573 	.word	0x08008573
 8008450:	08008401 	.word	0x08008401
 8008454:	08008401 	.word	0x08008401
 8008458:	080085b3 	.word	0x080085b3
 800845c:	08008401 	.word	0x08008401
 8008460:	080084b5 	.word	0x080084b5
 8008464:	08008401 	.word	0x08008401
 8008468:	08008401 	.word	0x08008401
 800846c:	0800857b 	.word	0x0800857b
 8008470:	682b      	ldr	r3, [r5, #0]
 8008472:	1d1a      	adds	r2, r3, #4
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	602a      	str	r2, [r5, #0]
 8008478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800847c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008480:	2301      	movs	r3, #1
 8008482:	e0a3      	b.n	80085cc <_printf_i+0x1f4>
 8008484:	6820      	ldr	r0, [r4, #0]
 8008486:	6829      	ldr	r1, [r5, #0]
 8008488:	0606      	lsls	r6, r0, #24
 800848a:	f101 0304 	add.w	r3, r1, #4
 800848e:	d50a      	bpl.n	80084a6 <_printf_i+0xce>
 8008490:	680e      	ldr	r6, [r1, #0]
 8008492:	602b      	str	r3, [r5, #0]
 8008494:	2e00      	cmp	r6, #0
 8008496:	da03      	bge.n	80084a0 <_printf_i+0xc8>
 8008498:	232d      	movs	r3, #45	; 0x2d
 800849a:	4276      	negs	r6, r6
 800849c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084a0:	485e      	ldr	r0, [pc, #376]	; (800861c <_printf_i+0x244>)
 80084a2:	230a      	movs	r3, #10
 80084a4:	e019      	b.n	80084da <_printf_i+0x102>
 80084a6:	680e      	ldr	r6, [r1, #0]
 80084a8:	602b      	str	r3, [r5, #0]
 80084aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80084ae:	bf18      	it	ne
 80084b0:	b236      	sxthne	r6, r6
 80084b2:	e7ef      	b.n	8008494 <_printf_i+0xbc>
 80084b4:	682b      	ldr	r3, [r5, #0]
 80084b6:	6820      	ldr	r0, [r4, #0]
 80084b8:	1d19      	adds	r1, r3, #4
 80084ba:	6029      	str	r1, [r5, #0]
 80084bc:	0601      	lsls	r1, r0, #24
 80084be:	d501      	bpl.n	80084c4 <_printf_i+0xec>
 80084c0:	681e      	ldr	r6, [r3, #0]
 80084c2:	e002      	b.n	80084ca <_printf_i+0xf2>
 80084c4:	0646      	lsls	r6, r0, #25
 80084c6:	d5fb      	bpl.n	80084c0 <_printf_i+0xe8>
 80084c8:	881e      	ldrh	r6, [r3, #0]
 80084ca:	4854      	ldr	r0, [pc, #336]	; (800861c <_printf_i+0x244>)
 80084cc:	2f6f      	cmp	r7, #111	; 0x6f
 80084ce:	bf0c      	ite	eq
 80084d0:	2308      	moveq	r3, #8
 80084d2:	230a      	movne	r3, #10
 80084d4:	2100      	movs	r1, #0
 80084d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084da:	6865      	ldr	r5, [r4, #4]
 80084dc:	60a5      	str	r5, [r4, #8]
 80084de:	2d00      	cmp	r5, #0
 80084e0:	bfa2      	ittt	ge
 80084e2:	6821      	ldrge	r1, [r4, #0]
 80084e4:	f021 0104 	bicge.w	r1, r1, #4
 80084e8:	6021      	strge	r1, [r4, #0]
 80084ea:	b90e      	cbnz	r6, 80084f0 <_printf_i+0x118>
 80084ec:	2d00      	cmp	r5, #0
 80084ee:	d04d      	beq.n	800858c <_printf_i+0x1b4>
 80084f0:	4615      	mov	r5, r2
 80084f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80084f6:	fb03 6711 	mls	r7, r3, r1, r6
 80084fa:	5dc7      	ldrb	r7, [r0, r7]
 80084fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008500:	4637      	mov	r7, r6
 8008502:	42bb      	cmp	r3, r7
 8008504:	460e      	mov	r6, r1
 8008506:	d9f4      	bls.n	80084f2 <_printf_i+0x11a>
 8008508:	2b08      	cmp	r3, #8
 800850a:	d10b      	bne.n	8008524 <_printf_i+0x14c>
 800850c:	6823      	ldr	r3, [r4, #0]
 800850e:	07de      	lsls	r6, r3, #31
 8008510:	d508      	bpl.n	8008524 <_printf_i+0x14c>
 8008512:	6923      	ldr	r3, [r4, #16]
 8008514:	6861      	ldr	r1, [r4, #4]
 8008516:	4299      	cmp	r1, r3
 8008518:	bfde      	ittt	le
 800851a:	2330      	movle	r3, #48	; 0x30
 800851c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008520:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008524:	1b52      	subs	r2, r2, r5
 8008526:	6122      	str	r2, [r4, #16]
 8008528:	f8cd a000 	str.w	sl, [sp]
 800852c:	464b      	mov	r3, r9
 800852e:	aa03      	add	r2, sp, #12
 8008530:	4621      	mov	r1, r4
 8008532:	4640      	mov	r0, r8
 8008534:	f7ff fee2 	bl	80082fc <_printf_common>
 8008538:	3001      	adds	r0, #1
 800853a:	d14c      	bne.n	80085d6 <_printf_i+0x1fe>
 800853c:	f04f 30ff 	mov.w	r0, #4294967295
 8008540:	b004      	add	sp, #16
 8008542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008546:	4835      	ldr	r0, [pc, #212]	; (800861c <_printf_i+0x244>)
 8008548:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800854c:	6829      	ldr	r1, [r5, #0]
 800854e:	6823      	ldr	r3, [r4, #0]
 8008550:	f851 6b04 	ldr.w	r6, [r1], #4
 8008554:	6029      	str	r1, [r5, #0]
 8008556:	061d      	lsls	r5, r3, #24
 8008558:	d514      	bpl.n	8008584 <_printf_i+0x1ac>
 800855a:	07df      	lsls	r7, r3, #31
 800855c:	bf44      	itt	mi
 800855e:	f043 0320 	orrmi.w	r3, r3, #32
 8008562:	6023      	strmi	r3, [r4, #0]
 8008564:	b91e      	cbnz	r6, 800856e <_printf_i+0x196>
 8008566:	6823      	ldr	r3, [r4, #0]
 8008568:	f023 0320 	bic.w	r3, r3, #32
 800856c:	6023      	str	r3, [r4, #0]
 800856e:	2310      	movs	r3, #16
 8008570:	e7b0      	b.n	80084d4 <_printf_i+0xfc>
 8008572:	6823      	ldr	r3, [r4, #0]
 8008574:	f043 0320 	orr.w	r3, r3, #32
 8008578:	6023      	str	r3, [r4, #0]
 800857a:	2378      	movs	r3, #120	; 0x78
 800857c:	4828      	ldr	r0, [pc, #160]	; (8008620 <_printf_i+0x248>)
 800857e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008582:	e7e3      	b.n	800854c <_printf_i+0x174>
 8008584:	0659      	lsls	r1, r3, #25
 8008586:	bf48      	it	mi
 8008588:	b2b6      	uxthmi	r6, r6
 800858a:	e7e6      	b.n	800855a <_printf_i+0x182>
 800858c:	4615      	mov	r5, r2
 800858e:	e7bb      	b.n	8008508 <_printf_i+0x130>
 8008590:	682b      	ldr	r3, [r5, #0]
 8008592:	6826      	ldr	r6, [r4, #0]
 8008594:	6961      	ldr	r1, [r4, #20]
 8008596:	1d18      	adds	r0, r3, #4
 8008598:	6028      	str	r0, [r5, #0]
 800859a:	0635      	lsls	r5, r6, #24
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	d501      	bpl.n	80085a4 <_printf_i+0x1cc>
 80085a0:	6019      	str	r1, [r3, #0]
 80085a2:	e002      	b.n	80085aa <_printf_i+0x1d2>
 80085a4:	0670      	lsls	r0, r6, #25
 80085a6:	d5fb      	bpl.n	80085a0 <_printf_i+0x1c8>
 80085a8:	8019      	strh	r1, [r3, #0]
 80085aa:	2300      	movs	r3, #0
 80085ac:	6123      	str	r3, [r4, #16]
 80085ae:	4615      	mov	r5, r2
 80085b0:	e7ba      	b.n	8008528 <_printf_i+0x150>
 80085b2:	682b      	ldr	r3, [r5, #0]
 80085b4:	1d1a      	adds	r2, r3, #4
 80085b6:	602a      	str	r2, [r5, #0]
 80085b8:	681d      	ldr	r5, [r3, #0]
 80085ba:	6862      	ldr	r2, [r4, #4]
 80085bc:	2100      	movs	r1, #0
 80085be:	4628      	mov	r0, r5
 80085c0:	f7f7 fe3e 	bl	8000240 <memchr>
 80085c4:	b108      	cbz	r0, 80085ca <_printf_i+0x1f2>
 80085c6:	1b40      	subs	r0, r0, r5
 80085c8:	6060      	str	r0, [r4, #4]
 80085ca:	6863      	ldr	r3, [r4, #4]
 80085cc:	6123      	str	r3, [r4, #16]
 80085ce:	2300      	movs	r3, #0
 80085d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085d4:	e7a8      	b.n	8008528 <_printf_i+0x150>
 80085d6:	6923      	ldr	r3, [r4, #16]
 80085d8:	462a      	mov	r2, r5
 80085da:	4649      	mov	r1, r9
 80085dc:	4640      	mov	r0, r8
 80085de:	47d0      	blx	sl
 80085e0:	3001      	adds	r0, #1
 80085e2:	d0ab      	beq.n	800853c <_printf_i+0x164>
 80085e4:	6823      	ldr	r3, [r4, #0]
 80085e6:	079b      	lsls	r3, r3, #30
 80085e8:	d413      	bmi.n	8008612 <_printf_i+0x23a>
 80085ea:	68e0      	ldr	r0, [r4, #12]
 80085ec:	9b03      	ldr	r3, [sp, #12]
 80085ee:	4298      	cmp	r0, r3
 80085f0:	bfb8      	it	lt
 80085f2:	4618      	movlt	r0, r3
 80085f4:	e7a4      	b.n	8008540 <_printf_i+0x168>
 80085f6:	2301      	movs	r3, #1
 80085f8:	4632      	mov	r2, r6
 80085fa:	4649      	mov	r1, r9
 80085fc:	4640      	mov	r0, r8
 80085fe:	47d0      	blx	sl
 8008600:	3001      	adds	r0, #1
 8008602:	d09b      	beq.n	800853c <_printf_i+0x164>
 8008604:	3501      	adds	r5, #1
 8008606:	68e3      	ldr	r3, [r4, #12]
 8008608:	9903      	ldr	r1, [sp, #12]
 800860a:	1a5b      	subs	r3, r3, r1
 800860c:	42ab      	cmp	r3, r5
 800860e:	dcf2      	bgt.n	80085f6 <_printf_i+0x21e>
 8008610:	e7eb      	b.n	80085ea <_printf_i+0x212>
 8008612:	2500      	movs	r5, #0
 8008614:	f104 0619 	add.w	r6, r4, #25
 8008618:	e7f5      	b.n	8008606 <_printf_i+0x22e>
 800861a:	bf00      	nop
 800861c:	0800aa63 	.word	0x0800aa63
 8008620:	0800aa74 	.word	0x0800aa74

08008624 <siprintf>:
 8008624:	b40e      	push	{r1, r2, r3}
 8008626:	b500      	push	{lr}
 8008628:	b09c      	sub	sp, #112	; 0x70
 800862a:	ab1d      	add	r3, sp, #116	; 0x74
 800862c:	9002      	str	r0, [sp, #8]
 800862e:	9006      	str	r0, [sp, #24]
 8008630:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008634:	4809      	ldr	r0, [pc, #36]	; (800865c <siprintf+0x38>)
 8008636:	9107      	str	r1, [sp, #28]
 8008638:	9104      	str	r1, [sp, #16]
 800863a:	4909      	ldr	r1, [pc, #36]	; (8008660 <siprintf+0x3c>)
 800863c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008640:	9105      	str	r1, [sp, #20]
 8008642:	6800      	ldr	r0, [r0, #0]
 8008644:	9301      	str	r3, [sp, #4]
 8008646:	a902      	add	r1, sp, #8
 8008648:	f001 febc 	bl	800a3c4 <_svfiprintf_r>
 800864c:	9b02      	ldr	r3, [sp, #8]
 800864e:	2200      	movs	r2, #0
 8008650:	701a      	strb	r2, [r3, #0]
 8008652:	b01c      	add	sp, #112	; 0x70
 8008654:	f85d eb04 	ldr.w	lr, [sp], #4
 8008658:	b003      	add	sp, #12
 800865a:	4770      	bx	lr
 800865c:	20000030 	.word	0x20000030
 8008660:	ffff0208 	.word	0xffff0208

08008664 <strcat>:
 8008664:	b510      	push	{r4, lr}
 8008666:	4602      	mov	r2, r0
 8008668:	7814      	ldrb	r4, [r2, #0]
 800866a:	4613      	mov	r3, r2
 800866c:	3201      	adds	r2, #1
 800866e:	2c00      	cmp	r4, #0
 8008670:	d1fa      	bne.n	8008668 <strcat+0x4>
 8008672:	3b01      	subs	r3, #1
 8008674:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008678:	f803 2f01 	strb.w	r2, [r3, #1]!
 800867c:	2a00      	cmp	r2, #0
 800867e:	d1f9      	bne.n	8008674 <strcat+0x10>
 8008680:	bd10      	pop	{r4, pc}

08008682 <strcpy>:
 8008682:	4603      	mov	r3, r0
 8008684:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008688:	f803 2b01 	strb.w	r2, [r3], #1
 800868c:	2a00      	cmp	r2, #0
 800868e:	d1f9      	bne.n	8008684 <strcpy+0x2>
 8008690:	4770      	bx	lr
	...

08008694 <__swbuf_r>:
 8008694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008696:	460e      	mov	r6, r1
 8008698:	4614      	mov	r4, r2
 800869a:	4605      	mov	r5, r0
 800869c:	b118      	cbz	r0, 80086a6 <__swbuf_r+0x12>
 800869e:	6983      	ldr	r3, [r0, #24]
 80086a0:	b90b      	cbnz	r3, 80086a6 <__swbuf_r+0x12>
 80086a2:	f001 f851 	bl	8009748 <__sinit>
 80086a6:	4b21      	ldr	r3, [pc, #132]	; (800872c <__swbuf_r+0x98>)
 80086a8:	429c      	cmp	r4, r3
 80086aa:	d12b      	bne.n	8008704 <__swbuf_r+0x70>
 80086ac:	686c      	ldr	r4, [r5, #4]
 80086ae:	69a3      	ldr	r3, [r4, #24]
 80086b0:	60a3      	str	r3, [r4, #8]
 80086b2:	89a3      	ldrh	r3, [r4, #12]
 80086b4:	071a      	lsls	r2, r3, #28
 80086b6:	d52f      	bpl.n	8008718 <__swbuf_r+0x84>
 80086b8:	6923      	ldr	r3, [r4, #16]
 80086ba:	b36b      	cbz	r3, 8008718 <__swbuf_r+0x84>
 80086bc:	6923      	ldr	r3, [r4, #16]
 80086be:	6820      	ldr	r0, [r4, #0]
 80086c0:	1ac0      	subs	r0, r0, r3
 80086c2:	6963      	ldr	r3, [r4, #20]
 80086c4:	b2f6      	uxtb	r6, r6
 80086c6:	4283      	cmp	r3, r0
 80086c8:	4637      	mov	r7, r6
 80086ca:	dc04      	bgt.n	80086d6 <__swbuf_r+0x42>
 80086cc:	4621      	mov	r1, r4
 80086ce:	4628      	mov	r0, r5
 80086d0:	f000 ffa6 	bl	8009620 <_fflush_r>
 80086d4:	bb30      	cbnz	r0, 8008724 <__swbuf_r+0x90>
 80086d6:	68a3      	ldr	r3, [r4, #8]
 80086d8:	3b01      	subs	r3, #1
 80086da:	60a3      	str	r3, [r4, #8]
 80086dc:	6823      	ldr	r3, [r4, #0]
 80086de:	1c5a      	adds	r2, r3, #1
 80086e0:	6022      	str	r2, [r4, #0]
 80086e2:	701e      	strb	r6, [r3, #0]
 80086e4:	6963      	ldr	r3, [r4, #20]
 80086e6:	3001      	adds	r0, #1
 80086e8:	4283      	cmp	r3, r0
 80086ea:	d004      	beq.n	80086f6 <__swbuf_r+0x62>
 80086ec:	89a3      	ldrh	r3, [r4, #12]
 80086ee:	07db      	lsls	r3, r3, #31
 80086f0:	d506      	bpl.n	8008700 <__swbuf_r+0x6c>
 80086f2:	2e0a      	cmp	r6, #10
 80086f4:	d104      	bne.n	8008700 <__swbuf_r+0x6c>
 80086f6:	4621      	mov	r1, r4
 80086f8:	4628      	mov	r0, r5
 80086fa:	f000 ff91 	bl	8009620 <_fflush_r>
 80086fe:	b988      	cbnz	r0, 8008724 <__swbuf_r+0x90>
 8008700:	4638      	mov	r0, r7
 8008702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008704:	4b0a      	ldr	r3, [pc, #40]	; (8008730 <__swbuf_r+0x9c>)
 8008706:	429c      	cmp	r4, r3
 8008708:	d101      	bne.n	800870e <__swbuf_r+0x7a>
 800870a:	68ac      	ldr	r4, [r5, #8]
 800870c:	e7cf      	b.n	80086ae <__swbuf_r+0x1a>
 800870e:	4b09      	ldr	r3, [pc, #36]	; (8008734 <__swbuf_r+0xa0>)
 8008710:	429c      	cmp	r4, r3
 8008712:	bf08      	it	eq
 8008714:	68ec      	ldreq	r4, [r5, #12]
 8008716:	e7ca      	b.n	80086ae <__swbuf_r+0x1a>
 8008718:	4621      	mov	r1, r4
 800871a:	4628      	mov	r0, r5
 800871c:	f000 f80c 	bl	8008738 <__swsetup_r>
 8008720:	2800      	cmp	r0, #0
 8008722:	d0cb      	beq.n	80086bc <__swbuf_r+0x28>
 8008724:	f04f 37ff 	mov.w	r7, #4294967295
 8008728:	e7ea      	b.n	8008700 <__swbuf_r+0x6c>
 800872a:	bf00      	nop
 800872c:	0800ab38 	.word	0x0800ab38
 8008730:	0800ab58 	.word	0x0800ab58
 8008734:	0800ab18 	.word	0x0800ab18

08008738 <__swsetup_r>:
 8008738:	4b32      	ldr	r3, [pc, #200]	; (8008804 <__swsetup_r+0xcc>)
 800873a:	b570      	push	{r4, r5, r6, lr}
 800873c:	681d      	ldr	r5, [r3, #0]
 800873e:	4606      	mov	r6, r0
 8008740:	460c      	mov	r4, r1
 8008742:	b125      	cbz	r5, 800874e <__swsetup_r+0x16>
 8008744:	69ab      	ldr	r3, [r5, #24]
 8008746:	b913      	cbnz	r3, 800874e <__swsetup_r+0x16>
 8008748:	4628      	mov	r0, r5
 800874a:	f000 fffd 	bl	8009748 <__sinit>
 800874e:	4b2e      	ldr	r3, [pc, #184]	; (8008808 <__swsetup_r+0xd0>)
 8008750:	429c      	cmp	r4, r3
 8008752:	d10f      	bne.n	8008774 <__swsetup_r+0x3c>
 8008754:	686c      	ldr	r4, [r5, #4]
 8008756:	89a3      	ldrh	r3, [r4, #12]
 8008758:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800875c:	0719      	lsls	r1, r3, #28
 800875e:	d42c      	bmi.n	80087ba <__swsetup_r+0x82>
 8008760:	06dd      	lsls	r5, r3, #27
 8008762:	d411      	bmi.n	8008788 <__swsetup_r+0x50>
 8008764:	2309      	movs	r3, #9
 8008766:	6033      	str	r3, [r6, #0]
 8008768:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800876c:	81a3      	strh	r3, [r4, #12]
 800876e:	f04f 30ff 	mov.w	r0, #4294967295
 8008772:	e03e      	b.n	80087f2 <__swsetup_r+0xba>
 8008774:	4b25      	ldr	r3, [pc, #148]	; (800880c <__swsetup_r+0xd4>)
 8008776:	429c      	cmp	r4, r3
 8008778:	d101      	bne.n	800877e <__swsetup_r+0x46>
 800877a:	68ac      	ldr	r4, [r5, #8]
 800877c:	e7eb      	b.n	8008756 <__swsetup_r+0x1e>
 800877e:	4b24      	ldr	r3, [pc, #144]	; (8008810 <__swsetup_r+0xd8>)
 8008780:	429c      	cmp	r4, r3
 8008782:	bf08      	it	eq
 8008784:	68ec      	ldreq	r4, [r5, #12]
 8008786:	e7e6      	b.n	8008756 <__swsetup_r+0x1e>
 8008788:	0758      	lsls	r0, r3, #29
 800878a:	d512      	bpl.n	80087b2 <__swsetup_r+0x7a>
 800878c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800878e:	b141      	cbz	r1, 80087a2 <__swsetup_r+0x6a>
 8008790:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008794:	4299      	cmp	r1, r3
 8008796:	d002      	beq.n	800879e <__swsetup_r+0x66>
 8008798:	4630      	mov	r0, r6
 800879a:	f001 fca9 	bl	800a0f0 <_free_r>
 800879e:	2300      	movs	r3, #0
 80087a0:	6363      	str	r3, [r4, #52]	; 0x34
 80087a2:	89a3      	ldrh	r3, [r4, #12]
 80087a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80087a8:	81a3      	strh	r3, [r4, #12]
 80087aa:	2300      	movs	r3, #0
 80087ac:	6063      	str	r3, [r4, #4]
 80087ae:	6923      	ldr	r3, [r4, #16]
 80087b0:	6023      	str	r3, [r4, #0]
 80087b2:	89a3      	ldrh	r3, [r4, #12]
 80087b4:	f043 0308 	orr.w	r3, r3, #8
 80087b8:	81a3      	strh	r3, [r4, #12]
 80087ba:	6923      	ldr	r3, [r4, #16]
 80087bc:	b94b      	cbnz	r3, 80087d2 <__swsetup_r+0x9a>
 80087be:	89a3      	ldrh	r3, [r4, #12]
 80087c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80087c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087c8:	d003      	beq.n	80087d2 <__swsetup_r+0x9a>
 80087ca:	4621      	mov	r1, r4
 80087cc:	4630      	mov	r0, r6
 80087ce:	f001 f885 	bl	80098dc <__smakebuf_r>
 80087d2:	89a0      	ldrh	r0, [r4, #12]
 80087d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087d8:	f010 0301 	ands.w	r3, r0, #1
 80087dc:	d00a      	beq.n	80087f4 <__swsetup_r+0xbc>
 80087de:	2300      	movs	r3, #0
 80087e0:	60a3      	str	r3, [r4, #8]
 80087e2:	6963      	ldr	r3, [r4, #20]
 80087e4:	425b      	negs	r3, r3
 80087e6:	61a3      	str	r3, [r4, #24]
 80087e8:	6923      	ldr	r3, [r4, #16]
 80087ea:	b943      	cbnz	r3, 80087fe <__swsetup_r+0xc6>
 80087ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80087f0:	d1ba      	bne.n	8008768 <__swsetup_r+0x30>
 80087f2:	bd70      	pop	{r4, r5, r6, pc}
 80087f4:	0781      	lsls	r1, r0, #30
 80087f6:	bf58      	it	pl
 80087f8:	6963      	ldrpl	r3, [r4, #20]
 80087fa:	60a3      	str	r3, [r4, #8]
 80087fc:	e7f4      	b.n	80087e8 <__swsetup_r+0xb0>
 80087fe:	2000      	movs	r0, #0
 8008800:	e7f7      	b.n	80087f2 <__swsetup_r+0xba>
 8008802:	bf00      	nop
 8008804:	20000030 	.word	0x20000030
 8008808:	0800ab38 	.word	0x0800ab38
 800880c:	0800ab58 	.word	0x0800ab58
 8008810:	0800ab18 	.word	0x0800ab18

08008814 <abort>:
 8008814:	b508      	push	{r3, lr}
 8008816:	2006      	movs	r0, #6
 8008818:	f001 ff0c 	bl	800a634 <raise>
 800881c:	2001      	movs	r0, #1
 800881e:	f7f9 feb1 	bl	8002584 <_exit>

08008822 <quorem>:
 8008822:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008826:	6903      	ldr	r3, [r0, #16]
 8008828:	690c      	ldr	r4, [r1, #16]
 800882a:	42a3      	cmp	r3, r4
 800882c:	4607      	mov	r7, r0
 800882e:	f2c0 8081 	blt.w	8008934 <quorem+0x112>
 8008832:	3c01      	subs	r4, #1
 8008834:	f101 0814 	add.w	r8, r1, #20
 8008838:	f100 0514 	add.w	r5, r0, #20
 800883c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008840:	9301      	str	r3, [sp, #4]
 8008842:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008846:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800884a:	3301      	adds	r3, #1
 800884c:	429a      	cmp	r2, r3
 800884e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008852:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008856:	fbb2 f6f3 	udiv	r6, r2, r3
 800885a:	d331      	bcc.n	80088c0 <quorem+0x9e>
 800885c:	f04f 0e00 	mov.w	lr, #0
 8008860:	4640      	mov	r0, r8
 8008862:	46ac      	mov	ip, r5
 8008864:	46f2      	mov	sl, lr
 8008866:	f850 2b04 	ldr.w	r2, [r0], #4
 800886a:	b293      	uxth	r3, r2
 800886c:	fb06 e303 	mla	r3, r6, r3, lr
 8008870:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008874:	b29b      	uxth	r3, r3
 8008876:	ebaa 0303 	sub.w	r3, sl, r3
 800887a:	f8dc a000 	ldr.w	sl, [ip]
 800887e:	0c12      	lsrs	r2, r2, #16
 8008880:	fa13 f38a 	uxtah	r3, r3, sl
 8008884:	fb06 e202 	mla	r2, r6, r2, lr
 8008888:	9300      	str	r3, [sp, #0]
 800888a:	9b00      	ldr	r3, [sp, #0]
 800888c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008890:	b292      	uxth	r2, r2
 8008892:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008896:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800889a:	f8bd 3000 	ldrh.w	r3, [sp]
 800889e:	4581      	cmp	r9, r0
 80088a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088a4:	f84c 3b04 	str.w	r3, [ip], #4
 80088a8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80088ac:	d2db      	bcs.n	8008866 <quorem+0x44>
 80088ae:	f855 300b 	ldr.w	r3, [r5, fp]
 80088b2:	b92b      	cbnz	r3, 80088c0 <quorem+0x9e>
 80088b4:	9b01      	ldr	r3, [sp, #4]
 80088b6:	3b04      	subs	r3, #4
 80088b8:	429d      	cmp	r5, r3
 80088ba:	461a      	mov	r2, r3
 80088bc:	d32e      	bcc.n	800891c <quorem+0xfa>
 80088be:	613c      	str	r4, [r7, #16]
 80088c0:	4638      	mov	r0, r7
 80088c2:	f001 fafd 	bl	8009ec0 <__mcmp>
 80088c6:	2800      	cmp	r0, #0
 80088c8:	db24      	blt.n	8008914 <quorem+0xf2>
 80088ca:	3601      	adds	r6, #1
 80088cc:	4628      	mov	r0, r5
 80088ce:	f04f 0c00 	mov.w	ip, #0
 80088d2:	f858 2b04 	ldr.w	r2, [r8], #4
 80088d6:	f8d0 e000 	ldr.w	lr, [r0]
 80088da:	b293      	uxth	r3, r2
 80088dc:	ebac 0303 	sub.w	r3, ip, r3
 80088e0:	0c12      	lsrs	r2, r2, #16
 80088e2:	fa13 f38e 	uxtah	r3, r3, lr
 80088e6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80088ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088f4:	45c1      	cmp	r9, r8
 80088f6:	f840 3b04 	str.w	r3, [r0], #4
 80088fa:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80088fe:	d2e8      	bcs.n	80088d2 <quorem+0xb0>
 8008900:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008904:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008908:	b922      	cbnz	r2, 8008914 <quorem+0xf2>
 800890a:	3b04      	subs	r3, #4
 800890c:	429d      	cmp	r5, r3
 800890e:	461a      	mov	r2, r3
 8008910:	d30a      	bcc.n	8008928 <quorem+0x106>
 8008912:	613c      	str	r4, [r7, #16]
 8008914:	4630      	mov	r0, r6
 8008916:	b003      	add	sp, #12
 8008918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800891c:	6812      	ldr	r2, [r2, #0]
 800891e:	3b04      	subs	r3, #4
 8008920:	2a00      	cmp	r2, #0
 8008922:	d1cc      	bne.n	80088be <quorem+0x9c>
 8008924:	3c01      	subs	r4, #1
 8008926:	e7c7      	b.n	80088b8 <quorem+0x96>
 8008928:	6812      	ldr	r2, [r2, #0]
 800892a:	3b04      	subs	r3, #4
 800892c:	2a00      	cmp	r2, #0
 800892e:	d1f0      	bne.n	8008912 <quorem+0xf0>
 8008930:	3c01      	subs	r4, #1
 8008932:	e7eb      	b.n	800890c <quorem+0xea>
 8008934:	2000      	movs	r0, #0
 8008936:	e7ee      	b.n	8008916 <quorem+0xf4>

08008938 <_dtoa_r>:
 8008938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800893c:	ed2d 8b04 	vpush	{d8-d9}
 8008940:	ec57 6b10 	vmov	r6, r7, d0
 8008944:	b093      	sub	sp, #76	; 0x4c
 8008946:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008948:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800894c:	9106      	str	r1, [sp, #24]
 800894e:	ee10 aa10 	vmov	sl, s0
 8008952:	4604      	mov	r4, r0
 8008954:	9209      	str	r2, [sp, #36]	; 0x24
 8008956:	930c      	str	r3, [sp, #48]	; 0x30
 8008958:	46bb      	mov	fp, r7
 800895a:	b975      	cbnz	r5, 800897a <_dtoa_r+0x42>
 800895c:	2010      	movs	r0, #16
 800895e:	f000 fffd 	bl	800995c <malloc>
 8008962:	4602      	mov	r2, r0
 8008964:	6260      	str	r0, [r4, #36]	; 0x24
 8008966:	b920      	cbnz	r0, 8008972 <_dtoa_r+0x3a>
 8008968:	4ba7      	ldr	r3, [pc, #668]	; (8008c08 <_dtoa_r+0x2d0>)
 800896a:	21ea      	movs	r1, #234	; 0xea
 800896c:	48a7      	ldr	r0, [pc, #668]	; (8008c0c <_dtoa_r+0x2d4>)
 800896e:	f7ff f833 	bl	80079d8 <__assert_func>
 8008972:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008976:	6005      	str	r5, [r0, #0]
 8008978:	60c5      	str	r5, [r0, #12]
 800897a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800897c:	6819      	ldr	r1, [r3, #0]
 800897e:	b151      	cbz	r1, 8008996 <_dtoa_r+0x5e>
 8008980:	685a      	ldr	r2, [r3, #4]
 8008982:	604a      	str	r2, [r1, #4]
 8008984:	2301      	movs	r3, #1
 8008986:	4093      	lsls	r3, r2
 8008988:	608b      	str	r3, [r1, #8]
 800898a:	4620      	mov	r0, r4
 800898c:	f001 f856 	bl	8009a3c <_Bfree>
 8008990:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008992:	2200      	movs	r2, #0
 8008994:	601a      	str	r2, [r3, #0]
 8008996:	1e3b      	subs	r3, r7, #0
 8008998:	bfaa      	itet	ge
 800899a:	2300      	movge	r3, #0
 800899c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80089a0:	f8c8 3000 	strge.w	r3, [r8]
 80089a4:	4b9a      	ldr	r3, [pc, #616]	; (8008c10 <_dtoa_r+0x2d8>)
 80089a6:	bfbc      	itt	lt
 80089a8:	2201      	movlt	r2, #1
 80089aa:	f8c8 2000 	strlt.w	r2, [r8]
 80089ae:	ea33 030b 	bics.w	r3, r3, fp
 80089b2:	d11b      	bne.n	80089ec <_dtoa_r+0xb4>
 80089b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089b6:	f242 730f 	movw	r3, #9999	; 0x270f
 80089ba:	6013      	str	r3, [r2, #0]
 80089bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089c0:	4333      	orrs	r3, r6
 80089c2:	f000 8592 	beq.w	80094ea <_dtoa_r+0xbb2>
 80089c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089c8:	b963      	cbnz	r3, 80089e4 <_dtoa_r+0xac>
 80089ca:	4b92      	ldr	r3, [pc, #584]	; (8008c14 <_dtoa_r+0x2dc>)
 80089cc:	e022      	b.n	8008a14 <_dtoa_r+0xdc>
 80089ce:	4b92      	ldr	r3, [pc, #584]	; (8008c18 <_dtoa_r+0x2e0>)
 80089d0:	9301      	str	r3, [sp, #4]
 80089d2:	3308      	adds	r3, #8
 80089d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80089d6:	6013      	str	r3, [r2, #0]
 80089d8:	9801      	ldr	r0, [sp, #4]
 80089da:	b013      	add	sp, #76	; 0x4c
 80089dc:	ecbd 8b04 	vpop	{d8-d9}
 80089e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089e4:	4b8b      	ldr	r3, [pc, #556]	; (8008c14 <_dtoa_r+0x2dc>)
 80089e6:	9301      	str	r3, [sp, #4]
 80089e8:	3303      	adds	r3, #3
 80089ea:	e7f3      	b.n	80089d4 <_dtoa_r+0x9c>
 80089ec:	2200      	movs	r2, #0
 80089ee:	2300      	movs	r3, #0
 80089f0:	4650      	mov	r0, sl
 80089f2:	4659      	mov	r1, fp
 80089f4:	f7f8 f898 	bl	8000b28 <__aeabi_dcmpeq>
 80089f8:	ec4b ab19 	vmov	d9, sl, fp
 80089fc:	4680      	mov	r8, r0
 80089fe:	b158      	cbz	r0, 8008a18 <_dtoa_r+0xe0>
 8008a00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a02:	2301      	movs	r3, #1
 8008a04:	6013      	str	r3, [r2, #0]
 8008a06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	f000 856b 	beq.w	80094e4 <_dtoa_r+0xbac>
 8008a0e:	4883      	ldr	r0, [pc, #524]	; (8008c1c <_dtoa_r+0x2e4>)
 8008a10:	6018      	str	r0, [r3, #0]
 8008a12:	1e43      	subs	r3, r0, #1
 8008a14:	9301      	str	r3, [sp, #4]
 8008a16:	e7df      	b.n	80089d8 <_dtoa_r+0xa0>
 8008a18:	ec4b ab10 	vmov	d0, sl, fp
 8008a1c:	aa10      	add	r2, sp, #64	; 0x40
 8008a1e:	a911      	add	r1, sp, #68	; 0x44
 8008a20:	4620      	mov	r0, r4
 8008a22:	f001 faf3 	bl	800a00c <__d2b>
 8008a26:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008a2a:	ee08 0a10 	vmov	s16, r0
 8008a2e:	2d00      	cmp	r5, #0
 8008a30:	f000 8084 	beq.w	8008b3c <_dtoa_r+0x204>
 8008a34:	ee19 3a90 	vmov	r3, s19
 8008a38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a3c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008a40:	4656      	mov	r6, sl
 8008a42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008a46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008a4a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008a4e:	4b74      	ldr	r3, [pc, #464]	; (8008c20 <_dtoa_r+0x2e8>)
 8008a50:	2200      	movs	r2, #0
 8008a52:	4630      	mov	r0, r6
 8008a54:	4639      	mov	r1, r7
 8008a56:	f7f7 fc47 	bl	80002e8 <__aeabi_dsub>
 8008a5a:	a365      	add	r3, pc, #404	; (adr r3, 8008bf0 <_dtoa_r+0x2b8>)
 8008a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a60:	f7f7 fdfa 	bl	8000658 <__aeabi_dmul>
 8008a64:	a364      	add	r3, pc, #400	; (adr r3, 8008bf8 <_dtoa_r+0x2c0>)
 8008a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6a:	f7f7 fc3f 	bl	80002ec <__adddf3>
 8008a6e:	4606      	mov	r6, r0
 8008a70:	4628      	mov	r0, r5
 8008a72:	460f      	mov	r7, r1
 8008a74:	f7f7 fd86 	bl	8000584 <__aeabi_i2d>
 8008a78:	a361      	add	r3, pc, #388	; (adr r3, 8008c00 <_dtoa_r+0x2c8>)
 8008a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7e:	f7f7 fdeb 	bl	8000658 <__aeabi_dmul>
 8008a82:	4602      	mov	r2, r0
 8008a84:	460b      	mov	r3, r1
 8008a86:	4630      	mov	r0, r6
 8008a88:	4639      	mov	r1, r7
 8008a8a:	f7f7 fc2f 	bl	80002ec <__adddf3>
 8008a8e:	4606      	mov	r6, r0
 8008a90:	460f      	mov	r7, r1
 8008a92:	f7f8 f891 	bl	8000bb8 <__aeabi_d2iz>
 8008a96:	2200      	movs	r2, #0
 8008a98:	9000      	str	r0, [sp, #0]
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	4630      	mov	r0, r6
 8008a9e:	4639      	mov	r1, r7
 8008aa0:	f7f8 f84c 	bl	8000b3c <__aeabi_dcmplt>
 8008aa4:	b150      	cbz	r0, 8008abc <_dtoa_r+0x184>
 8008aa6:	9800      	ldr	r0, [sp, #0]
 8008aa8:	f7f7 fd6c 	bl	8000584 <__aeabi_i2d>
 8008aac:	4632      	mov	r2, r6
 8008aae:	463b      	mov	r3, r7
 8008ab0:	f7f8 f83a 	bl	8000b28 <__aeabi_dcmpeq>
 8008ab4:	b910      	cbnz	r0, 8008abc <_dtoa_r+0x184>
 8008ab6:	9b00      	ldr	r3, [sp, #0]
 8008ab8:	3b01      	subs	r3, #1
 8008aba:	9300      	str	r3, [sp, #0]
 8008abc:	9b00      	ldr	r3, [sp, #0]
 8008abe:	2b16      	cmp	r3, #22
 8008ac0:	d85a      	bhi.n	8008b78 <_dtoa_r+0x240>
 8008ac2:	9a00      	ldr	r2, [sp, #0]
 8008ac4:	4b57      	ldr	r3, [pc, #348]	; (8008c24 <_dtoa_r+0x2ec>)
 8008ac6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ace:	ec51 0b19 	vmov	r0, r1, d9
 8008ad2:	f7f8 f833 	bl	8000b3c <__aeabi_dcmplt>
 8008ad6:	2800      	cmp	r0, #0
 8008ad8:	d050      	beq.n	8008b7c <_dtoa_r+0x244>
 8008ada:	9b00      	ldr	r3, [sp, #0]
 8008adc:	3b01      	subs	r3, #1
 8008ade:	9300      	str	r3, [sp, #0]
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ae4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ae6:	1b5d      	subs	r5, r3, r5
 8008ae8:	1e6b      	subs	r3, r5, #1
 8008aea:	9305      	str	r3, [sp, #20]
 8008aec:	bf45      	ittet	mi
 8008aee:	f1c5 0301 	rsbmi	r3, r5, #1
 8008af2:	9304      	strmi	r3, [sp, #16]
 8008af4:	2300      	movpl	r3, #0
 8008af6:	2300      	movmi	r3, #0
 8008af8:	bf4c      	ite	mi
 8008afa:	9305      	strmi	r3, [sp, #20]
 8008afc:	9304      	strpl	r3, [sp, #16]
 8008afe:	9b00      	ldr	r3, [sp, #0]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	db3d      	blt.n	8008b80 <_dtoa_r+0x248>
 8008b04:	9b05      	ldr	r3, [sp, #20]
 8008b06:	9a00      	ldr	r2, [sp, #0]
 8008b08:	920a      	str	r2, [sp, #40]	; 0x28
 8008b0a:	4413      	add	r3, r2
 8008b0c:	9305      	str	r3, [sp, #20]
 8008b0e:	2300      	movs	r3, #0
 8008b10:	9307      	str	r3, [sp, #28]
 8008b12:	9b06      	ldr	r3, [sp, #24]
 8008b14:	2b09      	cmp	r3, #9
 8008b16:	f200 8089 	bhi.w	8008c2c <_dtoa_r+0x2f4>
 8008b1a:	2b05      	cmp	r3, #5
 8008b1c:	bfc4      	itt	gt
 8008b1e:	3b04      	subgt	r3, #4
 8008b20:	9306      	strgt	r3, [sp, #24]
 8008b22:	9b06      	ldr	r3, [sp, #24]
 8008b24:	f1a3 0302 	sub.w	r3, r3, #2
 8008b28:	bfcc      	ite	gt
 8008b2a:	2500      	movgt	r5, #0
 8008b2c:	2501      	movle	r5, #1
 8008b2e:	2b03      	cmp	r3, #3
 8008b30:	f200 8087 	bhi.w	8008c42 <_dtoa_r+0x30a>
 8008b34:	e8df f003 	tbb	[pc, r3]
 8008b38:	59383a2d 	.word	0x59383a2d
 8008b3c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008b40:	441d      	add	r5, r3
 8008b42:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008b46:	2b20      	cmp	r3, #32
 8008b48:	bfc1      	itttt	gt
 8008b4a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008b4e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008b52:	fa0b f303 	lslgt.w	r3, fp, r3
 8008b56:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008b5a:	bfda      	itte	le
 8008b5c:	f1c3 0320 	rsble	r3, r3, #32
 8008b60:	fa06 f003 	lslle.w	r0, r6, r3
 8008b64:	4318      	orrgt	r0, r3
 8008b66:	f7f7 fcfd 	bl	8000564 <__aeabi_ui2d>
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	4606      	mov	r6, r0
 8008b6e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008b72:	3d01      	subs	r5, #1
 8008b74:	930e      	str	r3, [sp, #56]	; 0x38
 8008b76:	e76a      	b.n	8008a4e <_dtoa_r+0x116>
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e7b2      	b.n	8008ae2 <_dtoa_r+0x1aa>
 8008b7c:	900b      	str	r0, [sp, #44]	; 0x2c
 8008b7e:	e7b1      	b.n	8008ae4 <_dtoa_r+0x1ac>
 8008b80:	9b04      	ldr	r3, [sp, #16]
 8008b82:	9a00      	ldr	r2, [sp, #0]
 8008b84:	1a9b      	subs	r3, r3, r2
 8008b86:	9304      	str	r3, [sp, #16]
 8008b88:	4253      	negs	r3, r2
 8008b8a:	9307      	str	r3, [sp, #28]
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	930a      	str	r3, [sp, #40]	; 0x28
 8008b90:	e7bf      	b.n	8008b12 <_dtoa_r+0x1da>
 8008b92:	2300      	movs	r3, #0
 8008b94:	9308      	str	r3, [sp, #32]
 8008b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	dc55      	bgt.n	8008c48 <_dtoa_r+0x310>
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	9209      	str	r2, [sp, #36]	; 0x24
 8008ba6:	e00c      	b.n	8008bc2 <_dtoa_r+0x28a>
 8008ba8:	2301      	movs	r3, #1
 8008baa:	e7f3      	b.n	8008b94 <_dtoa_r+0x25c>
 8008bac:	2300      	movs	r3, #0
 8008bae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bb0:	9308      	str	r3, [sp, #32]
 8008bb2:	9b00      	ldr	r3, [sp, #0]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	9302      	str	r3, [sp, #8]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	9303      	str	r3, [sp, #12]
 8008bbe:	bfb8      	it	lt
 8008bc0:	2301      	movlt	r3, #1
 8008bc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	6042      	str	r2, [r0, #4]
 8008bc8:	2204      	movs	r2, #4
 8008bca:	f102 0614 	add.w	r6, r2, #20
 8008bce:	429e      	cmp	r6, r3
 8008bd0:	6841      	ldr	r1, [r0, #4]
 8008bd2:	d93d      	bls.n	8008c50 <_dtoa_r+0x318>
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	f000 fef1 	bl	80099bc <_Balloc>
 8008bda:	9001      	str	r0, [sp, #4]
 8008bdc:	2800      	cmp	r0, #0
 8008bde:	d13b      	bne.n	8008c58 <_dtoa_r+0x320>
 8008be0:	4b11      	ldr	r3, [pc, #68]	; (8008c28 <_dtoa_r+0x2f0>)
 8008be2:	4602      	mov	r2, r0
 8008be4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008be8:	e6c0      	b.n	800896c <_dtoa_r+0x34>
 8008bea:	2301      	movs	r3, #1
 8008bec:	e7df      	b.n	8008bae <_dtoa_r+0x276>
 8008bee:	bf00      	nop
 8008bf0:	636f4361 	.word	0x636f4361
 8008bf4:	3fd287a7 	.word	0x3fd287a7
 8008bf8:	8b60c8b3 	.word	0x8b60c8b3
 8008bfc:	3fc68a28 	.word	0x3fc68a28
 8008c00:	509f79fb 	.word	0x509f79fb
 8008c04:	3fd34413 	.word	0x3fd34413
 8008c08:	0800aa92 	.word	0x0800aa92
 8008c0c:	0800aaa9 	.word	0x0800aaa9
 8008c10:	7ff00000 	.word	0x7ff00000
 8008c14:	0800aa8e 	.word	0x0800aa8e
 8008c18:	0800aa85 	.word	0x0800aa85
 8008c1c:	0800aa62 	.word	0x0800aa62
 8008c20:	3ff80000 	.word	0x3ff80000
 8008c24:	0800ac00 	.word	0x0800ac00
 8008c28:	0800ab04 	.word	0x0800ab04
 8008c2c:	2501      	movs	r5, #1
 8008c2e:	2300      	movs	r3, #0
 8008c30:	9306      	str	r3, [sp, #24]
 8008c32:	9508      	str	r5, [sp, #32]
 8008c34:	f04f 33ff 	mov.w	r3, #4294967295
 8008c38:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	2312      	movs	r3, #18
 8008c40:	e7b0      	b.n	8008ba4 <_dtoa_r+0x26c>
 8008c42:	2301      	movs	r3, #1
 8008c44:	9308      	str	r3, [sp, #32]
 8008c46:	e7f5      	b.n	8008c34 <_dtoa_r+0x2fc>
 8008c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c4a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008c4e:	e7b8      	b.n	8008bc2 <_dtoa_r+0x28a>
 8008c50:	3101      	adds	r1, #1
 8008c52:	6041      	str	r1, [r0, #4]
 8008c54:	0052      	lsls	r2, r2, #1
 8008c56:	e7b8      	b.n	8008bca <_dtoa_r+0x292>
 8008c58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c5a:	9a01      	ldr	r2, [sp, #4]
 8008c5c:	601a      	str	r2, [r3, #0]
 8008c5e:	9b03      	ldr	r3, [sp, #12]
 8008c60:	2b0e      	cmp	r3, #14
 8008c62:	f200 809d 	bhi.w	8008da0 <_dtoa_r+0x468>
 8008c66:	2d00      	cmp	r5, #0
 8008c68:	f000 809a 	beq.w	8008da0 <_dtoa_r+0x468>
 8008c6c:	9b00      	ldr	r3, [sp, #0]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	dd32      	ble.n	8008cd8 <_dtoa_r+0x3a0>
 8008c72:	4ab7      	ldr	r2, [pc, #732]	; (8008f50 <_dtoa_r+0x618>)
 8008c74:	f003 030f 	and.w	r3, r3, #15
 8008c78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008c7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c80:	9b00      	ldr	r3, [sp, #0]
 8008c82:	05d8      	lsls	r0, r3, #23
 8008c84:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008c88:	d516      	bpl.n	8008cb8 <_dtoa_r+0x380>
 8008c8a:	4bb2      	ldr	r3, [pc, #712]	; (8008f54 <_dtoa_r+0x61c>)
 8008c8c:	ec51 0b19 	vmov	r0, r1, d9
 8008c90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c94:	f7f7 fe0a 	bl	80008ac <__aeabi_ddiv>
 8008c98:	f007 070f 	and.w	r7, r7, #15
 8008c9c:	4682      	mov	sl, r0
 8008c9e:	468b      	mov	fp, r1
 8008ca0:	2503      	movs	r5, #3
 8008ca2:	4eac      	ldr	r6, [pc, #688]	; (8008f54 <_dtoa_r+0x61c>)
 8008ca4:	b957      	cbnz	r7, 8008cbc <_dtoa_r+0x384>
 8008ca6:	4642      	mov	r2, r8
 8008ca8:	464b      	mov	r3, r9
 8008caa:	4650      	mov	r0, sl
 8008cac:	4659      	mov	r1, fp
 8008cae:	f7f7 fdfd 	bl	80008ac <__aeabi_ddiv>
 8008cb2:	4682      	mov	sl, r0
 8008cb4:	468b      	mov	fp, r1
 8008cb6:	e028      	b.n	8008d0a <_dtoa_r+0x3d2>
 8008cb8:	2502      	movs	r5, #2
 8008cba:	e7f2      	b.n	8008ca2 <_dtoa_r+0x36a>
 8008cbc:	07f9      	lsls	r1, r7, #31
 8008cbe:	d508      	bpl.n	8008cd2 <_dtoa_r+0x39a>
 8008cc0:	4640      	mov	r0, r8
 8008cc2:	4649      	mov	r1, r9
 8008cc4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008cc8:	f7f7 fcc6 	bl	8000658 <__aeabi_dmul>
 8008ccc:	3501      	adds	r5, #1
 8008cce:	4680      	mov	r8, r0
 8008cd0:	4689      	mov	r9, r1
 8008cd2:	107f      	asrs	r7, r7, #1
 8008cd4:	3608      	adds	r6, #8
 8008cd6:	e7e5      	b.n	8008ca4 <_dtoa_r+0x36c>
 8008cd8:	f000 809b 	beq.w	8008e12 <_dtoa_r+0x4da>
 8008cdc:	9b00      	ldr	r3, [sp, #0]
 8008cde:	4f9d      	ldr	r7, [pc, #628]	; (8008f54 <_dtoa_r+0x61c>)
 8008ce0:	425e      	negs	r6, r3
 8008ce2:	4b9b      	ldr	r3, [pc, #620]	; (8008f50 <_dtoa_r+0x618>)
 8008ce4:	f006 020f 	and.w	r2, r6, #15
 8008ce8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf0:	ec51 0b19 	vmov	r0, r1, d9
 8008cf4:	f7f7 fcb0 	bl	8000658 <__aeabi_dmul>
 8008cf8:	1136      	asrs	r6, r6, #4
 8008cfa:	4682      	mov	sl, r0
 8008cfc:	468b      	mov	fp, r1
 8008cfe:	2300      	movs	r3, #0
 8008d00:	2502      	movs	r5, #2
 8008d02:	2e00      	cmp	r6, #0
 8008d04:	d17a      	bne.n	8008dfc <_dtoa_r+0x4c4>
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d1d3      	bne.n	8008cb2 <_dtoa_r+0x37a>
 8008d0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	f000 8082 	beq.w	8008e16 <_dtoa_r+0x4de>
 8008d12:	4b91      	ldr	r3, [pc, #580]	; (8008f58 <_dtoa_r+0x620>)
 8008d14:	2200      	movs	r2, #0
 8008d16:	4650      	mov	r0, sl
 8008d18:	4659      	mov	r1, fp
 8008d1a:	f7f7 ff0f 	bl	8000b3c <__aeabi_dcmplt>
 8008d1e:	2800      	cmp	r0, #0
 8008d20:	d079      	beq.n	8008e16 <_dtoa_r+0x4de>
 8008d22:	9b03      	ldr	r3, [sp, #12]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d076      	beq.n	8008e16 <_dtoa_r+0x4de>
 8008d28:	9b02      	ldr	r3, [sp, #8]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	dd36      	ble.n	8008d9c <_dtoa_r+0x464>
 8008d2e:	9b00      	ldr	r3, [sp, #0]
 8008d30:	4650      	mov	r0, sl
 8008d32:	4659      	mov	r1, fp
 8008d34:	1e5f      	subs	r7, r3, #1
 8008d36:	2200      	movs	r2, #0
 8008d38:	4b88      	ldr	r3, [pc, #544]	; (8008f5c <_dtoa_r+0x624>)
 8008d3a:	f7f7 fc8d 	bl	8000658 <__aeabi_dmul>
 8008d3e:	9e02      	ldr	r6, [sp, #8]
 8008d40:	4682      	mov	sl, r0
 8008d42:	468b      	mov	fp, r1
 8008d44:	3501      	adds	r5, #1
 8008d46:	4628      	mov	r0, r5
 8008d48:	f7f7 fc1c 	bl	8000584 <__aeabi_i2d>
 8008d4c:	4652      	mov	r2, sl
 8008d4e:	465b      	mov	r3, fp
 8008d50:	f7f7 fc82 	bl	8000658 <__aeabi_dmul>
 8008d54:	4b82      	ldr	r3, [pc, #520]	; (8008f60 <_dtoa_r+0x628>)
 8008d56:	2200      	movs	r2, #0
 8008d58:	f7f7 fac8 	bl	80002ec <__adddf3>
 8008d5c:	46d0      	mov	r8, sl
 8008d5e:	46d9      	mov	r9, fp
 8008d60:	4682      	mov	sl, r0
 8008d62:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008d66:	2e00      	cmp	r6, #0
 8008d68:	d158      	bne.n	8008e1c <_dtoa_r+0x4e4>
 8008d6a:	4b7e      	ldr	r3, [pc, #504]	; (8008f64 <_dtoa_r+0x62c>)
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	4640      	mov	r0, r8
 8008d70:	4649      	mov	r1, r9
 8008d72:	f7f7 fab9 	bl	80002e8 <__aeabi_dsub>
 8008d76:	4652      	mov	r2, sl
 8008d78:	465b      	mov	r3, fp
 8008d7a:	4680      	mov	r8, r0
 8008d7c:	4689      	mov	r9, r1
 8008d7e:	f7f7 fefb 	bl	8000b78 <__aeabi_dcmpgt>
 8008d82:	2800      	cmp	r0, #0
 8008d84:	f040 8295 	bne.w	80092b2 <_dtoa_r+0x97a>
 8008d88:	4652      	mov	r2, sl
 8008d8a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008d8e:	4640      	mov	r0, r8
 8008d90:	4649      	mov	r1, r9
 8008d92:	f7f7 fed3 	bl	8000b3c <__aeabi_dcmplt>
 8008d96:	2800      	cmp	r0, #0
 8008d98:	f040 8289 	bne.w	80092ae <_dtoa_r+0x976>
 8008d9c:	ec5b ab19 	vmov	sl, fp, d9
 8008da0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	f2c0 8148 	blt.w	8009038 <_dtoa_r+0x700>
 8008da8:	9a00      	ldr	r2, [sp, #0]
 8008daa:	2a0e      	cmp	r2, #14
 8008dac:	f300 8144 	bgt.w	8009038 <_dtoa_r+0x700>
 8008db0:	4b67      	ldr	r3, [pc, #412]	; (8008f50 <_dtoa_r+0x618>)
 8008db2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008db6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f280 80d5 	bge.w	8008f6c <_dtoa_r+0x634>
 8008dc2:	9b03      	ldr	r3, [sp, #12]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f300 80d1 	bgt.w	8008f6c <_dtoa_r+0x634>
 8008dca:	f040 826f 	bne.w	80092ac <_dtoa_r+0x974>
 8008dce:	4b65      	ldr	r3, [pc, #404]	; (8008f64 <_dtoa_r+0x62c>)
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	4640      	mov	r0, r8
 8008dd4:	4649      	mov	r1, r9
 8008dd6:	f7f7 fc3f 	bl	8000658 <__aeabi_dmul>
 8008dda:	4652      	mov	r2, sl
 8008ddc:	465b      	mov	r3, fp
 8008dde:	f7f7 fec1 	bl	8000b64 <__aeabi_dcmpge>
 8008de2:	9e03      	ldr	r6, [sp, #12]
 8008de4:	4637      	mov	r7, r6
 8008de6:	2800      	cmp	r0, #0
 8008de8:	f040 8245 	bne.w	8009276 <_dtoa_r+0x93e>
 8008dec:	9d01      	ldr	r5, [sp, #4]
 8008dee:	2331      	movs	r3, #49	; 0x31
 8008df0:	f805 3b01 	strb.w	r3, [r5], #1
 8008df4:	9b00      	ldr	r3, [sp, #0]
 8008df6:	3301      	adds	r3, #1
 8008df8:	9300      	str	r3, [sp, #0]
 8008dfa:	e240      	b.n	800927e <_dtoa_r+0x946>
 8008dfc:	07f2      	lsls	r2, r6, #31
 8008dfe:	d505      	bpl.n	8008e0c <_dtoa_r+0x4d4>
 8008e00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e04:	f7f7 fc28 	bl	8000658 <__aeabi_dmul>
 8008e08:	3501      	adds	r5, #1
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	1076      	asrs	r6, r6, #1
 8008e0e:	3708      	adds	r7, #8
 8008e10:	e777      	b.n	8008d02 <_dtoa_r+0x3ca>
 8008e12:	2502      	movs	r5, #2
 8008e14:	e779      	b.n	8008d0a <_dtoa_r+0x3d2>
 8008e16:	9f00      	ldr	r7, [sp, #0]
 8008e18:	9e03      	ldr	r6, [sp, #12]
 8008e1a:	e794      	b.n	8008d46 <_dtoa_r+0x40e>
 8008e1c:	9901      	ldr	r1, [sp, #4]
 8008e1e:	4b4c      	ldr	r3, [pc, #304]	; (8008f50 <_dtoa_r+0x618>)
 8008e20:	4431      	add	r1, r6
 8008e22:	910d      	str	r1, [sp, #52]	; 0x34
 8008e24:	9908      	ldr	r1, [sp, #32]
 8008e26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008e2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e2e:	2900      	cmp	r1, #0
 8008e30:	d043      	beq.n	8008eba <_dtoa_r+0x582>
 8008e32:	494d      	ldr	r1, [pc, #308]	; (8008f68 <_dtoa_r+0x630>)
 8008e34:	2000      	movs	r0, #0
 8008e36:	f7f7 fd39 	bl	80008ac <__aeabi_ddiv>
 8008e3a:	4652      	mov	r2, sl
 8008e3c:	465b      	mov	r3, fp
 8008e3e:	f7f7 fa53 	bl	80002e8 <__aeabi_dsub>
 8008e42:	9d01      	ldr	r5, [sp, #4]
 8008e44:	4682      	mov	sl, r0
 8008e46:	468b      	mov	fp, r1
 8008e48:	4649      	mov	r1, r9
 8008e4a:	4640      	mov	r0, r8
 8008e4c:	f7f7 feb4 	bl	8000bb8 <__aeabi_d2iz>
 8008e50:	4606      	mov	r6, r0
 8008e52:	f7f7 fb97 	bl	8000584 <__aeabi_i2d>
 8008e56:	4602      	mov	r2, r0
 8008e58:	460b      	mov	r3, r1
 8008e5a:	4640      	mov	r0, r8
 8008e5c:	4649      	mov	r1, r9
 8008e5e:	f7f7 fa43 	bl	80002e8 <__aeabi_dsub>
 8008e62:	3630      	adds	r6, #48	; 0x30
 8008e64:	f805 6b01 	strb.w	r6, [r5], #1
 8008e68:	4652      	mov	r2, sl
 8008e6a:	465b      	mov	r3, fp
 8008e6c:	4680      	mov	r8, r0
 8008e6e:	4689      	mov	r9, r1
 8008e70:	f7f7 fe64 	bl	8000b3c <__aeabi_dcmplt>
 8008e74:	2800      	cmp	r0, #0
 8008e76:	d163      	bne.n	8008f40 <_dtoa_r+0x608>
 8008e78:	4642      	mov	r2, r8
 8008e7a:	464b      	mov	r3, r9
 8008e7c:	4936      	ldr	r1, [pc, #216]	; (8008f58 <_dtoa_r+0x620>)
 8008e7e:	2000      	movs	r0, #0
 8008e80:	f7f7 fa32 	bl	80002e8 <__aeabi_dsub>
 8008e84:	4652      	mov	r2, sl
 8008e86:	465b      	mov	r3, fp
 8008e88:	f7f7 fe58 	bl	8000b3c <__aeabi_dcmplt>
 8008e8c:	2800      	cmp	r0, #0
 8008e8e:	f040 80b5 	bne.w	8008ffc <_dtoa_r+0x6c4>
 8008e92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e94:	429d      	cmp	r5, r3
 8008e96:	d081      	beq.n	8008d9c <_dtoa_r+0x464>
 8008e98:	4b30      	ldr	r3, [pc, #192]	; (8008f5c <_dtoa_r+0x624>)
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	4650      	mov	r0, sl
 8008e9e:	4659      	mov	r1, fp
 8008ea0:	f7f7 fbda 	bl	8000658 <__aeabi_dmul>
 8008ea4:	4b2d      	ldr	r3, [pc, #180]	; (8008f5c <_dtoa_r+0x624>)
 8008ea6:	4682      	mov	sl, r0
 8008ea8:	468b      	mov	fp, r1
 8008eaa:	4640      	mov	r0, r8
 8008eac:	4649      	mov	r1, r9
 8008eae:	2200      	movs	r2, #0
 8008eb0:	f7f7 fbd2 	bl	8000658 <__aeabi_dmul>
 8008eb4:	4680      	mov	r8, r0
 8008eb6:	4689      	mov	r9, r1
 8008eb8:	e7c6      	b.n	8008e48 <_dtoa_r+0x510>
 8008eba:	4650      	mov	r0, sl
 8008ebc:	4659      	mov	r1, fp
 8008ebe:	f7f7 fbcb 	bl	8000658 <__aeabi_dmul>
 8008ec2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ec4:	9d01      	ldr	r5, [sp, #4]
 8008ec6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ec8:	4682      	mov	sl, r0
 8008eca:	468b      	mov	fp, r1
 8008ecc:	4649      	mov	r1, r9
 8008ece:	4640      	mov	r0, r8
 8008ed0:	f7f7 fe72 	bl	8000bb8 <__aeabi_d2iz>
 8008ed4:	4606      	mov	r6, r0
 8008ed6:	f7f7 fb55 	bl	8000584 <__aeabi_i2d>
 8008eda:	3630      	adds	r6, #48	; 0x30
 8008edc:	4602      	mov	r2, r0
 8008ede:	460b      	mov	r3, r1
 8008ee0:	4640      	mov	r0, r8
 8008ee2:	4649      	mov	r1, r9
 8008ee4:	f7f7 fa00 	bl	80002e8 <__aeabi_dsub>
 8008ee8:	f805 6b01 	strb.w	r6, [r5], #1
 8008eec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008eee:	429d      	cmp	r5, r3
 8008ef0:	4680      	mov	r8, r0
 8008ef2:	4689      	mov	r9, r1
 8008ef4:	f04f 0200 	mov.w	r2, #0
 8008ef8:	d124      	bne.n	8008f44 <_dtoa_r+0x60c>
 8008efa:	4b1b      	ldr	r3, [pc, #108]	; (8008f68 <_dtoa_r+0x630>)
 8008efc:	4650      	mov	r0, sl
 8008efe:	4659      	mov	r1, fp
 8008f00:	f7f7 f9f4 	bl	80002ec <__adddf3>
 8008f04:	4602      	mov	r2, r0
 8008f06:	460b      	mov	r3, r1
 8008f08:	4640      	mov	r0, r8
 8008f0a:	4649      	mov	r1, r9
 8008f0c:	f7f7 fe34 	bl	8000b78 <__aeabi_dcmpgt>
 8008f10:	2800      	cmp	r0, #0
 8008f12:	d173      	bne.n	8008ffc <_dtoa_r+0x6c4>
 8008f14:	4652      	mov	r2, sl
 8008f16:	465b      	mov	r3, fp
 8008f18:	4913      	ldr	r1, [pc, #76]	; (8008f68 <_dtoa_r+0x630>)
 8008f1a:	2000      	movs	r0, #0
 8008f1c:	f7f7 f9e4 	bl	80002e8 <__aeabi_dsub>
 8008f20:	4602      	mov	r2, r0
 8008f22:	460b      	mov	r3, r1
 8008f24:	4640      	mov	r0, r8
 8008f26:	4649      	mov	r1, r9
 8008f28:	f7f7 fe08 	bl	8000b3c <__aeabi_dcmplt>
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	f43f af35 	beq.w	8008d9c <_dtoa_r+0x464>
 8008f32:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008f34:	1e6b      	subs	r3, r5, #1
 8008f36:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f38:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008f3c:	2b30      	cmp	r3, #48	; 0x30
 8008f3e:	d0f8      	beq.n	8008f32 <_dtoa_r+0x5fa>
 8008f40:	9700      	str	r7, [sp, #0]
 8008f42:	e049      	b.n	8008fd8 <_dtoa_r+0x6a0>
 8008f44:	4b05      	ldr	r3, [pc, #20]	; (8008f5c <_dtoa_r+0x624>)
 8008f46:	f7f7 fb87 	bl	8000658 <__aeabi_dmul>
 8008f4a:	4680      	mov	r8, r0
 8008f4c:	4689      	mov	r9, r1
 8008f4e:	e7bd      	b.n	8008ecc <_dtoa_r+0x594>
 8008f50:	0800ac00 	.word	0x0800ac00
 8008f54:	0800abd8 	.word	0x0800abd8
 8008f58:	3ff00000 	.word	0x3ff00000
 8008f5c:	40240000 	.word	0x40240000
 8008f60:	401c0000 	.word	0x401c0000
 8008f64:	40140000 	.word	0x40140000
 8008f68:	3fe00000 	.word	0x3fe00000
 8008f6c:	9d01      	ldr	r5, [sp, #4]
 8008f6e:	4656      	mov	r6, sl
 8008f70:	465f      	mov	r7, fp
 8008f72:	4642      	mov	r2, r8
 8008f74:	464b      	mov	r3, r9
 8008f76:	4630      	mov	r0, r6
 8008f78:	4639      	mov	r1, r7
 8008f7a:	f7f7 fc97 	bl	80008ac <__aeabi_ddiv>
 8008f7e:	f7f7 fe1b 	bl	8000bb8 <__aeabi_d2iz>
 8008f82:	4682      	mov	sl, r0
 8008f84:	f7f7 fafe 	bl	8000584 <__aeabi_i2d>
 8008f88:	4642      	mov	r2, r8
 8008f8a:	464b      	mov	r3, r9
 8008f8c:	f7f7 fb64 	bl	8000658 <__aeabi_dmul>
 8008f90:	4602      	mov	r2, r0
 8008f92:	460b      	mov	r3, r1
 8008f94:	4630      	mov	r0, r6
 8008f96:	4639      	mov	r1, r7
 8008f98:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008f9c:	f7f7 f9a4 	bl	80002e8 <__aeabi_dsub>
 8008fa0:	f805 6b01 	strb.w	r6, [r5], #1
 8008fa4:	9e01      	ldr	r6, [sp, #4]
 8008fa6:	9f03      	ldr	r7, [sp, #12]
 8008fa8:	1bae      	subs	r6, r5, r6
 8008faa:	42b7      	cmp	r7, r6
 8008fac:	4602      	mov	r2, r0
 8008fae:	460b      	mov	r3, r1
 8008fb0:	d135      	bne.n	800901e <_dtoa_r+0x6e6>
 8008fb2:	f7f7 f99b 	bl	80002ec <__adddf3>
 8008fb6:	4642      	mov	r2, r8
 8008fb8:	464b      	mov	r3, r9
 8008fba:	4606      	mov	r6, r0
 8008fbc:	460f      	mov	r7, r1
 8008fbe:	f7f7 fddb 	bl	8000b78 <__aeabi_dcmpgt>
 8008fc2:	b9d0      	cbnz	r0, 8008ffa <_dtoa_r+0x6c2>
 8008fc4:	4642      	mov	r2, r8
 8008fc6:	464b      	mov	r3, r9
 8008fc8:	4630      	mov	r0, r6
 8008fca:	4639      	mov	r1, r7
 8008fcc:	f7f7 fdac 	bl	8000b28 <__aeabi_dcmpeq>
 8008fd0:	b110      	cbz	r0, 8008fd8 <_dtoa_r+0x6a0>
 8008fd2:	f01a 0f01 	tst.w	sl, #1
 8008fd6:	d110      	bne.n	8008ffa <_dtoa_r+0x6c2>
 8008fd8:	4620      	mov	r0, r4
 8008fda:	ee18 1a10 	vmov	r1, s16
 8008fde:	f000 fd2d 	bl	8009a3c <_Bfree>
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	9800      	ldr	r0, [sp, #0]
 8008fe6:	702b      	strb	r3, [r5, #0]
 8008fe8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fea:	3001      	adds	r0, #1
 8008fec:	6018      	str	r0, [r3, #0]
 8008fee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f43f acf1 	beq.w	80089d8 <_dtoa_r+0xa0>
 8008ff6:	601d      	str	r5, [r3, #0]
 8008ff8:	e4ee      	b.n	80089d8 <_dtoa_r+0xa0>
 8008ffa:	9f00      	ldr	r7, [sp, #0]
 8008ffc:	462b      	mov	r3, r5
 8008ffe:	461d      	mov	r5, r3
 8009000:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009004:	2a39      	cmp	r2, #57	; 0x39
 8009006:	d106      	bne.n	8009016 <_dtoa_r+0x6de>
 8009008:	9a01      	ldr	r2, [sp, #4]
 800900a:	429a      	cmp	r2, r3
 800900c:	d1f7      	bne.n	8008ffe <_dtoa_r+0x6c6>
 800900e:	9901      	ldr	r1, [sp, #4]
 8009010:	2230      	movs	r2, #48	; 0x30
 8009012:	3701      	adds	r7, #1
 8009014:	700a      	strb	r2, [r1, #0]
 8009016:	781a      	ldrb	r2, [r3, #0]
 8009018:	3201      	adds	r2, #1
 800901a:	701a      	strb	r2, [r3, #0]
 800901c:	e790      	b.n	8008f40 <_dtoa_r+0x608>
 800901e:	4ba6      	ldr	r3, [pc, #664]	; (80092b8 <_dtoa_r+0x980>)
 8009020:	2200      	movs	r2, #0
 8009022:	f7f7 fb19 	bl	8000658 <__aeabi_dmul>
 8009026:	2200      	movs	r2, #0
 8009028:	2300      	movs	r3, #0
 800902a:	4606      	mov	r6, r0
 800902c:	460f      	mov	r7, r1
 800902e:	f7f7 fd7b 	bl	8000b28 <__aeabi_dcmpeq>
 8009032:	2800      	cmp	r0, #0
 8009034:	d09d      	beq.n	8008f72 <_dtoa_r+0x63a>
 8009036:	e7cf      	b.n	8008fd8 <_dtoa_r+0x6a0>
 8009038:	9a08      	ldr	r2, [sp, #32]
 800903a:	2a00      	cmp	r2, #0
 800903c:	f000 80d7 	beq.w	80091ee <_dtoa_r+0x8b6>
 8009040:	9a06      	ldr	r2, [sp, #24]
 8009042:	2a01      	cmp	r2, #1
 8009044:	f300 80ba 	bgt.w	80091bc <_dtoa_r+0x884>
 8009048:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800904a:	2a00      	cmp	r2, #0
 800904c:	f000 80b2 	beq.w	80091b4 <_dtoa_r+0x87c>
 8009050:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009054:	9e07      	ldr	r6, [sp, #28]
 8009056:	9d04      	ldr	r5, [sp, #16]
 8009058:	9a04      	ldr	r2, [sp, #16]
 800905a:	441a      	add	r2, r3
 800905c:	9204      	str	r2, [sp, #16]
 800905e:	9a05      	ldr	r2, [sp, #20]
 8009060:	2101      	movs	r1, #1
 8009062:	441a      	add	r2, r3
 8009064:	4620      	mov	r0, r4
 8009066:	9205      	str	r2, [sp, #20]
 8009068:	f000 fda0 	bl	8009bac <__i2b>
 800906c:	4607      	mov	r7, r0
 800906e:	2d00      	cmp	r5, #0
 8009070:	dd0c      	ble.n	800908c <_dtoa_r+0x754>
 8009072:	9b05      	ldr	r3, [sp, #20]
 8009074:	2b00      	cmp	r3, #0
 8009076:	dd09      	ble.n	800908c <_dtoa_r+0x754>
 8009078:	42ab      	cmp	r3, r5
 800907a:	9a04      	ldr	r2, [sp, #16]
 800907c:	bfa8      	it	ge
 800907e:	462b      	movge	r3, r5
 8009080:	1ad2      	subs	r2, r2, r3
 8009082:	9204      	str	r2, [sp, #16]
 8009084:	9a05      	ldr	r2, [sp, #20]
 8009086:	1aed      	subs	r5, r5, r3
 8009088:	1ad3      	subs	r3, r2, r3
 800908a:	9305      	str	r3, [sp, #20]
 800908c:	9b07      	ldr	r3, [sp, #28]
 800908e:	b31b      	cbz	r3, 80090d8 <_dtoa_r+0x7a0>
 8009090:	9b08      	ldr	r3, [sp, #32]
 8009092:	2b00      	cmp	r3, #0
 8009094:	f000 80af 	beq.w	80091f6 <_dtoa_r+0x8be>
 8009098:	2e00      	cmp	r6, #0
 800909a:	dd13      	ble.n	80090c4 <_dtoa_r+0x78c>
 800909c:	4639      	mov	r1, r7
 800909e:	4632      	mov	r2, r6
 80090a0:	4620      	mov	r0, r4
 80090a2:	f000 fe43 	bl	8009d2c <__pow5mult>
 80090a6:	ee18 2a10 	vmov	r2, s16
 80090aa:	4601      	mov	r1, r0
 80090ac:	4607      	mov	r7, r0
 80090ae:	4620      	mov	r0, r4
 80090b0:	f000 fd92 	bl	8009bd8 <__multiply>
 80090b4:	ee18 1a10 	vmov	r1, s16
 80090b8:	4680      	mov	r8, r0
 80090ba:	4620      	mov	r0, r4
 80090bc:	f000 fcbe 	bl	8009a3c <_Bfree>
 80090c0:	ee08 8a10 	vmov	s16, r8
 80090c4:	9b07      	ldr	r3, [sp, #28]
 80090c6:	1b9a      	subs	r2, r3, r6
 80090c8:	d006      	beq.n	80090d8 <_dtoa_r+0x7a0>
 80090ca:	ee18 1a10 	vmov	r1, s16
 80090ce:	4620      	mov	r0, r4
 80090d0:	f000 fe2c 	bl	8009d2c <__pow5mult>
 80090d4:	ee08 0a10 	vmov	s16, r0
 80090d8:	2101      	movs	r1, #1
 80090da:	4620      	mov	r0, r4
 80090dc:	f000 fd66 	bl	8009bac <__i2b>
 80090e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	4606      	mov	r6, r0
 80090e6:	f340 8088 	ble.w	80091fa <_dtoa_r+0x8c2>
 80090ea:	461a      	mov	r2, r3
 80090ec:	4601      	mov	r1, r0
 80090ee:	4620      	mov	r0, r4
 80090f0:	f000 fe1c 	bl	8009d2c <__pow5mult>
 80090f4:	9b06      	ldr	r3, [sp, #24]
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	4606      	mov	r6, r0
 80090fa:	f340 8081 	ble.w	8009200 <_dtoa_r+0x8c8>
 80090fe:	f04f 0800 	mov.w	r8, #0
 8009102:	6933      	ldr	r3, [r6, #16]
 8009104:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009108:	6918      	ldr	r0, [r3, #16]
 800910a:	f000 fcff 	bl	8009b0c <__hi0bits>
 800910e:	f1c0 0020 	rsb	r0, r0, #32
 8009112:	9b05      	ldr	r3, [sp, #20]
 8009114:	4418      	add	r0, r3
 8009116:	f010 001f 	ands.w	r0, r0, #31
 800911a:	f000 8092 	beq.w	8009242 <_dtoa_r+0x90a>
 800911e:	f1c0 0320 	rsb	r3, r0, #32
 8009122:	2b04      	cmp	r3, #4
 8009124:	f340 808a 	ble.w	800923c <_dtoa_r+0x904>
 8009128:	f1c0 001c 	rsb	r0, r0, #28
 800912c:	9b04      	ldr	r3, [sp, #16]
 800912e:	4403      	add	r3, r0
 8009130:	9304      	str	r3, [sp, #16]
 8009132:	9b05      	ldr	r3, [sp, #20]
 8009134:	4403      	add	r3, r0
 8009136:	4405      	add	r5, r0
 8009138:	9305      	str	r3, [sp, #20]
 800913a:	9b04      	ldr	r3, [sp, #16]
 800913c:	2b00      	cmp	r3, #0
 800913e:	dd07      	ble.n	8009150 <_dtoa_r+0x818>
 8009140:	ee18 1a10 	vmov	r1, s16
 8009144:	461a      	mov	r2, r3
 8009146:	4620      	mov	r0, r4
 8009148:	f000 fe4a 	bl	8009de0 <__lshift>
 800914c:	ee08 0a10 	vmov	s16, r0
 8009150:	9b05      	ldr	r3, [sp, #20]
 8009152:	2b00      	cmp	r3, #0
 8009154:	dd05      	ble.n	8009162 <_dtoa_r+0x82a>
 8009156:	4631      	mov	r1, r6
 8009158:	461a      	mov	r2, r3
 800915a:	4620      	mov	r0, r4
 800915c:	f000 fe40 	bl	8009de0 <__lshift>
 8009160:	4606      	mov	r6, r0
 8009162:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009164:	2b00      	cmp	r3, #0
 8009166:	d06e      	beq.n	8009246 <_dtoa_r+0x90e>
 8009168:	ee18 0a10 	vmov	r0, s16
 800916c:	4631      	mov	r1, r6
 800916e:	f000 fea7 	bl	8009ec0 <__mcmp>
 8009172:	2800      	cmp	r0, #0
 8009174:	da67      	bge.n	8009246 <_dtoa_r+0x90e>
 8009176:	9b00      	ldr	r3, [sp, #0]
 8009178:	3b01      	subs	r3, #1
 800917a:	ee18 1a10 	vmov	r1, s16
 800917e:	9300      	str	r3, [sp, #0]
 8009180:	220a      	movs	r2, #10
 8009182:	2300      	movs	r3, #0
 8009184:	4620      	mov	r0, r4
 8009186:	f000 fc7b 	bl	8009a80 <__multadd>
 800918a:	9b08      	ldr	r3, [sp, #32]
 800918c:	ee08 0a10 	vmov	s16, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	f000 81b1 	beq.w	80094f8 <_dtoa_r+0xbc0>
 8009196:	2300      	movs	r3, #0
 8009198:	4639      	mov	r1, r7
 800919a:	220a      	movs	r2, #10
 800919c:	4620      	mov	r0, r4
 800919e:	f000 fc6f 	bl	8009a80 <__multadd>
 80091a2:	9b02      	ldr	r3, [sp, #8]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	4607      	mov	r7, r0
 80091a8:	f300 808e 	bgt.w	80092c8 <_dtoa_r+0x990>
 80091ac:	9b06      	ldr	r3, [sp, #24]
 80091ae:	2b02      	cmp	r3, #2
 80091b0:	dc51      	bgt.n	8009256 <_dtoa_r+0x91e>
 80091b2:	e089      	b.n	80092c8 <_dtoa_r+0x990>
 80091b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80091ba:	e74b      	b.n	8009054 <_dtoa_r+0x71c>
 80091bc:	9b03      	ldr	r3, [sp, #12]
 80091be:	1e5e      	subs	r6, r3, #1
 80091c0:	9b07      	ldr	r3, [sp, #28]
 80091c2:	42b3      	cmp	r3, r6
 80091c4:	bfbf      	itttt	lt
 80091c6:	9b07      	ldrlt	r3, [sp, #28]
 80091c8:	9607      	strlt	r6, [sp, #28]
 80091ca:	1af2      	sublt	r2, r6, r3
 80091cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80091ce:	bfb6      	itet	lt
 80091d0:	189b      	addlt	r3, r3, r2
 80091d2:	1b9e      	subge	r6, r3, r6
 80091d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80091d6:	9b03      	ldr	r3, [sp, #12]
 80091d8:	bfb8      	it	lt
 80091da:	2600      	movlt	r6, #0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	bfb7      	itett	lt
 80091e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80091e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80091e8:	1a9d      	sublt	r5, r3, r2
 80091ea:	2300      	movlt	r3, #0
 80091ec:	e734      	b.n	8009058 <_dtoa_r+0x720>
 80091ee:	9e07      	ldr	r6, [sp, #28]
 80091f0:	9d04      	ldr	r5, [sp, #16]
 80091f2:	9f08      	ldr	r7, [sp, #32]
 80091f4:	e73b      	b.n	800906e <_dtoa_r+0x736>
 80091f6:	9a07      	ldr	r2, [sp, #28]
 80091f8:	e767      	b.n	80090ca <_dtoa_r+0x792>
 80091fa:	9b06      	ldr	r3, [sp, #24]
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	dc18      	bgt.n	8009232 <_dtoa_r+0x8fa>
 8009200:	f1ba 0f00 	cmp.w	sl, #0
 8009204:	d115      	bne.n	8009232 <_dtoa_r+0x8fa>
 8009206:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800920a:	b993      	cbnz	r3, 8009232 <_dtoa_r+0x8fa>
 800920c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009210:	0d1b      	lsrs	r3, r3, #20
 8009212:	051b      	lsls	r3, r3, #20
 8009214:	b183      	cbz	r3, 8009238 <_dtoa_r+0x900>
 8009216:	9b04      	ldr	r3, [sp, #16]
 8009218:	3301      	adds	r3, #1
 800921a:	9304      	str	r3, [sp, #16]
 800921c:	9b05      	ldr	r3, [sp, #20]
 800921e:	3301      	adds	r3, #1
 8009220:	9305      	str	r3, [sp, #20]
 8009222:	f04f 0801 	mov.w	r8, #1
 8009226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009228:	2b00      	cmp	r3, #0
 800922a:	f47f af6a 	bne.w	8009102 <_dtoa_r+0x7ca>
 800922e:	2001      	movs	r0, #1
 8009230:	e76f      	b.n	8009112 <_dtoa_r+0x7da>
 8009232:	f04f 0800 	mov.w	r8, #0
 8009236:	e7f6      	b.n	8009226 <_dtoa_r+0x8ee>
 8009238:	4698      	mov	r8, r3
 800923a:	e7f4      	b.n	8009226 <_dtoa_r+0x8ee>
 800923c:	f43f af7d 	beq.w	800913a <_dtoa_r+0x802>
 8009240:	4618      	mov	r0, r3
 8009242:	301c      	adds	r0, #28
 8009244:	e772      	b.n	800912c <_dtoa_r+0x7f4>
 8009246:	9b03      	ldr	r3, [sp, #12]
 8009248:	2b00      	cmp	r3, #0
 800924a:	dc37      	bgt.n	80092bc <_dtoa_r+0x984>
 800924c:	9b06      	ldr	r3, [sp, #24]
 800924e:	2b02      	cmp	r3, #2
 8009250:	dd34      	ble.n	80092bc <_dtoa_r+0x984>
 8009252:	9b03      	ldr	r3, [sp, #12]
 8009254:	9302      	str	r3, [sp, #8]
 8009256:	9b02      	ldr	r3, [sp, #8]
 8009258:	b96b      	cbnz	r3, 8009276 <_dtoa_r+0x93e>
 800925a:	4631      	mov	r1, r6
 800925c:	2205      	movs	r2, #5
 800925e:	4620      	mov	r0, r4
 8009260:	f000 fc0e 	bl	8009a80 <__multadd>
 8009264:	4601      	mov	r1, r0
 8009266:	4606      	mov	r6, r0
 8009268:	ee18 0a10 	vmov	r0, s16
 800926c:	f000 fe28 	bl	8009ec0 <__mcmp>
 8009270:	2800      	cmp	r0, #0
 8009272:	f73f adbb 	bgt.w	8008dec <_dtoa_r+0x4b4>
 8009276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009278:	9d01      	ldr	r5, [sp, #4]
 800927a:	43db      	mvns	r3, r3
 800927c:	9300      	str	r3, [sp, #0]
 800927e:	f04f 0800 	mov.w	r8, #0
 8009282:	4631      	mov	r1, r6
 8009284:	4620      	mov	r0, r4
 8009286:	f000 fbd9 	bl	8009a3c <_Bfree>
 800928a:	2f00      	cmp	r7, #0
 800928c:	f43f aea4 	beq.w	8008fd8 <_dtoa_r+0x6a0>
 8009290:	f1b8 0f00 	cmp.w	r8, #0
 8009294:	d005      	beq.n	80092a2 <_dtoa_r+0x96a>
 8009296:	45b8      	cmp	r8, r7
 8009298:	d003      	beq.n	80092a2 <_dtoa_r+0x96a>
 800929a:	4641      	mov	r1, r8
 800929c:	4620      	mov	r0, r4
 800929e:	f000 fbcd 	bl	8009a3c <_Bfree>
 80092a2:	4639      	mov	r1, r7
 80092a4:	4620      	mov	r0, r4
 80092a6:	f000 fbc9 	bl	8009a3c <_Bfree>
 80092aa:	e695      	b.n	8008fd8 <_dtoa_r+0x6a0>
 80092ac:	2600      	movs	r6, #0
 80092ae:	4637      	mov	r7, r6
 80092b0:	e7e1      	b.n	8009276 <_dtoa_r+0x93e>
 80092b2:	9700      	str	r7, [sp, #0]
 80092b4:	4637      	mov	r7, r6
 80092b6:	e599      	b.n	8008dec <_dtoa_r+0x4b4>
 80092b8:	40240000 	.word	0x40240000
 80092bc:	9b08      	ldr	r3, [sp, #32]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	f000 80ca 	beq.w	8009458 <_dtoa_r+0xb20>
 80092c4:	9b03      	ldr	r3, [sp, #12]
 80092c6:	9302      	str	r3, [sp, #8]
 80092c8:	2d00      	cmp	r5, #0
 80092ca:	dd05      	ble.n	80092d8 <_dtoa_r+0x9a0>
 80092cc:	4639      	mov	r1, r7
 80092ce:	462a      	mov	r2, r5
 80092d0:	4620      	mov	r0, r4
 80092d2:	f000 fd85 	bl	8009de0 <__lshift>
 80092d6:	4607      	mov	r7, r0
 80092d8:	f1b8 0f00 	cmp.w	r8, #0
 80092dc:	d05b      	beq.n	8009396 <_dtoa_r+0xa5e>
 80092de:	6879      	ldr	r1, [r7, #4]
 80092e0:	4620      	mov	r0, r4
 80092e2:	f000 fb6b 	bl	80099bc <_Balloc>
 80092e6:	4605      	mov	r5, r0
 80092e8:	b928      	cbnz	r0, 80092f6 <_dtoa_r+0x9be>
 80092ea:	4b87      	ldr	r3, [pc, #540]	; (8009508 <_dtoa_r+0xbd0>)
 80092ec:	4602      	mov	r2, r0
 80092ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80092f2:	f7ff bb3b 	b.w	800896c <_dtoa_r+0x34>
 80092f6:	693a      	ldr	r2, [r7, #16]
 80092f8:	3202      	adds	r2, #2
 80092fa:	0092      	lsls	r2, r2, #2
 80092fc:	f107 010c 	add.w	r1, r7, #12
 8009300:	300c      	adds	r0, #12
 8009302:	f000 fb33 	bl	800996c <memcpy>
 8009306:	2201      	movs	r2, #1
 8009308:	4629      	mov	r1, r5
 800930a:	4620      	mov	r0, r4
 800930c:	f000 fd68 	bl	8009de0 <__lshift>
 8009310:	9b01      	ldr	r3, [sp, #4]
 8009312:	f103 0901 	add.w	r9, r3, #1
 8009316:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800931a:	4413      	add	r3, r2
 800931c:	9305      	str	r3, [sp, #20]
 800931e:	f00a 0301 	and.w	r3, sl, #1
 8009322:	46b8      	mov	r8, r7
 8009324:	9304      	str	r3, [sp, #16]
 8009326:	4607      	mov	r7, r0
 8009328:	4631      	mov	r1, r6
 800932a:	ee18 0a10 	vmov	r0, s16
 800932e:	f7ff fa78 	bl	8008822 <quorem>
 8009332:	4641      	mov	r1, r8
 8009334:	9002      	str	r0, [sp, #8]
 8009336:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800933a:	ee18 0a10 	vmov	r0, s16
 800933e:	f000 fdbf 	bl	8009ec0 <__mcmp>
 8009342:	463a      	mov	r2, r7
 8009344:	9003      	str	r0, [sp, #12]
 8009346:	4631      	mov	r1, r6
 8009348:	4620      	mov	r0, r4
 800934a:	f000 fdd5 	bl	8009ef8 <__mdiff>
 800934e:	68c2      	ldr	r2, [r0, #12]
 8009350:	f109 3bff 	add.w	fp, r9, #4294967295
 8009354:	4605      	mov	r5, r0
 8009356:	bb02      	cbnz	r2, 800939a <_dtoa_r+0xa62>
 8009358:	4601      	mov	r1, r0
 800935a:	ee18 0a10 	vmov	r0, s16
 800935e:	f000 fdaf 	bl	8009ec0 <__mcmp>
 8009362:	4602      	mov	r2, r0
 8009364:	4629      	mov	r1, r5
 8009366:	4620      	mov	r0, r4
 8009368:	9207      	str	r2, [sp, #28]
 800936a:	f000 fb67 	bl	8009a3c <_Bfree>
 800936e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009372:	ea43 0102 	orr.w	r1, r3, r2
 8009376:	9b04      	ldr	r3, [sp, #16]
 8009378:	430b      	orrs	r3, r1
 800937a:	464d      	mov	r5, r9
 800937c:	d10f      	bne.n	800939e <_dtoa_r+0xa66>
 800937e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009382:	d02a      	beq.n	80093da <_dtoa_r+0xaa2>
 8009384:	9b03      	ldr	r3, [sp, #12]
 8009386:	2b00      	cmp	r3, #0
 8009388:	dd02      	ble.n	8009390 <_dtoa_r+0xa58>
 800938a:	9b02      	ldr	r3, [sp, #8]
 800938c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009390:	f88b a000 	strb.w	sl, [fp]
 8009394:	e775      	b.n	8009282 <_dtoa_r+0x94a>
 8009396:	4638      	mov	r0, r7
 8009398:	e7ba      	b.n	8009310 <_dtoa_r+0x9d8>
 800939a:	2201      	movs	r2, #1
 800939c:	e7e2      	b.n	8009364 <_dtoa_r+0xa2c>
 800939e:	9b03      	ldr	r3, [sp, #12]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	db04      	blt.n	80093ae <_dtoa_r+0xa76>
 80093a4:	9906      	ldr	r1, [sp, #24]
 80093a6:	430b      	orrs	r3, r1
 80093a8:	9904      	ldr	r1, [sp, #16]
 80093aa:	430b      	orrs	r3, r1
 80093ac:	d122      	bne.n	80093f4 <_dtoa_r+0xabc>
 80093ae:	2a00      	cmp	r2, #0
 80093b0:	ddee      	ble.n	8009390 <_dtoa_r+0xa58>
 80093b2:	ee18 1a10 	vmov	r1, s16
 80093b6:	2201      	movs	r2, #1
 80093b8:	4620      	mov	r0, r4
 80093ba:	f000 fd11 	bl	8009de0 <__lshift>
 80093be:	4631      	mov	r1, r6
 80093c0:	ee08 0a10 	vmov	s16, r0
 80093c4:	f000 fd7c 	bl	8009ec0 <__mcmp>
 80093c8:	2800      	cmp	r0, #0
 80093ca:	dc03      	bgt.n	80093d4 <_dtoa_r+0xa9c>
 80093cc:	d1e0      	bne.n	8009390 <_dtoa_r+0xa58>
 80093ce:	f01a 0f01 	tst.w	sl, #1
 80093d2:	d0dd      	beq.n	8009390 <_dtoa_r+0xa58>
 80093d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80093d8:	d1d7      	bne.n	800938a <_dtoa_r+0xa52>
 80093da:	2339      	movs	r3, #57	; 0x39
 80093dc:	f88b 3000 	strb.w	r3, [fp]
 80093e0:	462b      	mov	r3, r5
 80093e2:	461d      	mov	r5, r3
 80093e4:	3b01      	subs	r3, #1
 80093e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80093ea:	2a39      	cmp	r2, #57	; 0x39
 80093ec:	d071      	beq.n	80094d2 <_dtoa_r+0xb9a>
 80093ee:	3201      	adds	r2, #1
 80093f0:	701a      	strb	r2, [r3, #0]
 80093f2:	e746      	b.n	8009282 <_dtoa_r+0x94a>
 80093f4:	2a00      	cmp	r2, #0
 80093f6:	dd07      	ble.n	8009408 <_dtoa_r+0xad0>
 80093f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80093fc:	d0ed      	beq.n	80093da <_dtoa_r+0xaa2>
 80093fe:	f10a 0301 	add.w	r3, sl, #1
 8009402:	f88b 3000 	strb.w	r3, [fp]
 8009406:	e73c      	b.n	8009282 <_dtoa_r+0x94a>
 8009408:	9b05      	ldr	r3, [sp, #20]
 800940a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800940e:	4599      	cmp	r9, r3
 8009410:	d047      	beq.n	80094a2 <_dtoa_r+0xb6a>
 8009412:	ee18 1a10 	vmov	r1, s16
 8009416:	2300      	movs	r3, #0
 8009418:	220a      	movs	r2, #10
 800941a:	4620      	mov	r0, r4
 800941c:	f000 fb30 	bl	8009a80 <__multadd>
 8009420:	45b8      	cmp	r8, r7
 8009422:	ee08 0a10 	vmov	s16, r0
 8009426:	f04f 0300 	mov.w	r3, #0
 800942a:	f04f 020a 	mov.w	r2, #10
 800942e:	4641      	mov	r1, r8
 8009430:	4620      	mov	r0, r4
 8009432:	d106      	bne.n	8009442 <_dtoa_r+0xb0a>
 8009434:	f000 fb24 	bl	8009a80 <__multadd>
 8009438:	4680      	mov	r8, r0
 800943a:	4607      	mov	r7, r0
 800943c:	f109 0901 	add.w	r9, r9, #1
 8009440:	e772      	b.n	8009328 <_dtoa_r+0x9f0>
 8009442:	f000 fb1d 	bl	8009a80 <__multadd>
 8009446:	4639      	mov	r1, r7
 8009448:	4680      	mov	r8, r0
 800944a:	2300      	movs	r3, #0
 800944c:	220a      	movs	r2, #10
 800944e:	4620      	mov	r0, r4
 8009450:	f000 fb16 	bl	8009a80 <__multadd>
 8009454:	4607      	mov	r7, r0
 8009456:	e7f1      	b.n	800943c <_dtoa_r+0xb04>
 8009458:	9b03      	ldr	r3, [sp, #12]
 800945a:	9302      	str	r3, [sp, #8]
 800945c:	9d01      	ldr	r5, [sp, #4]
 800945e:	ee18 0a10 	vmov	r0, s16
 8009462:	4631      	mov	r1, r6
 8009464:	f7ff f9dd 	bl	8008822 <quorem>
 8009468:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800946c:	9b01      	ldr	r3, [sp, #4]
 800946e:	f805 ab01 	strb.w	sl, [r5], #1
 8009472:	1aea      	subs	r2, r5, r3
 8009474:	9b02      	ldr	r3, [sp, #8]
 8009476:	4293      	cmp	r3, r2
 8009478:	dd09      	ble.n	800948e <_dtoa_r+0xb56>
 800947a:	ee18 1a10 	vmov	r1, s16
 800947e:	2300      	movs	r3, #0
 8009480:	220a      	movs	r2, #10
 8009482:	4620      	mov	r0, r4
 8009484:	f000 fafc 	bl	8009a80 <__multadd>
 8009488:	ee08 0a10 	vmov	s16, r0
 800948c:	e7e7      	b.n	800945e <_dtoa_r+0xb26>
 800948e:	9b02      	ldr	r3, [sp, #8]
 8009490:	2b00      	cmp	r3, #0
 8009492:	bfc8      	it	gt
 8009494:	461d      	movgt	r5, r3
 8009496:	9b01      	ldr	r3, [sp, #4]
 8009498:	bfd8      	it	le
 800949a:	2501      	movle	r5, #1
 800949c:	441d      	add	r5, r3
 800949e:	f04f 0800 	mov.w	r8, #0
 80094a2:	ee18 1a10 	vmov	r1, s16
 80094a6:	2201      	movs	r2, #1
 80094a8:	4620      	mov	r0, r4
 80094aa:	f000 fc99 	bl	8009de0 <__lshift>
 80094ae:	4631      	mov	r1, r6
 80094b0:	ee08 0a10 	vmov	s16, r0
 80094b4:	f000 fd04 	bl	8009ec0 <__mcmp>
 80094b8:	2800      	cmp	r0, #0
 80094ba:	dc91      	bgt.n	80093e0 <_dtoa_r+0xaa8>
 80094bc:	d102      	bne.n	80094c4 <_dtoa_r+0xb8c>
 80094be:	f01a 0f01 	tst.w	sl, #1
 80094c2:	d18d      	bne.n	80093e0 <_dtoa_r+0xaa8>
 80094c4:	462b      	mov	r3, r5
 80094c6:	461d      	mov	r5, r3
 80094c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094cc:	2a30      	cmp	r2, #48	; 0x30
 80094ce:	d0fa      	beq.n	80094c6 <_dtoa_r+0xb8e>
 80094d0:	e6d7      	b.n	8009282 <_dtoa_r+0x94a>
 80094d2:	9a01      	ldr	r2, [sp, #4]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d184      	bne.n	80093e2 <_dtoa_r+0xaaa>
 80094d8:	9b00      	ldr	r3, [sp, #0]
 80094da:	3301      	adds	r3, #1
 80094dc:	9300      	str	r3, [sp, #0]
 80094de:	2331      	movs	r3, #49	; 0x31
 80094e0:	7013      	strb	r3, [r2, #0]
 80094e2:	e6ce      	b.n	8009282 <_dtoa_r+0x94a>
 80094e4:	4b09      	ldr	r3, [pc, #36]	; (800950c <_dtoa_r+0xbd4>)
 80094e6:	f7ff ba95 	b.w	8008a14 <_dtoa_r+0xdc>
 80094ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	f47f aa6e 	bne.w	80089ce <_dtoa_r+0x96>
 80094f2:	4b07      	ldr	r3, [pc, #28]	; (8009510 <_dtoa_r+0xbd8>)
 80094f4:	f7ff ba8e 	b.w	8008a14 <_dtoa_r+0xdc>
 80094f8:	9b02      	ldr	r3, [sp, #8]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	dcae      	bgt.n	800945c <_dtoa_r+0xb24>
 80094fe:	9b06      	ldr	r3, [sp, #24]
 8009500:	2b02      	cmp	r3, #2
 8009502:	f73f aea8 	bgt.w	8009256 <_dtoa_r+0x91e>
 8009506:	e7a9      	b.n	800945c <_dtoa_r+0xb24>
 8009508:	0800ab04 	.word	0x0800ab04
 800950c:	0800aa61 	.word	0x0800aa61
 8009510:	0800aa85 	.word	0x0800aa85

08009514 <__sflush_r>:
 8009514:	898a      	ldrh	r2, [r1, #12]
 8009516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800951a:	4605      	mov	r5, r0
 800951c:	0710      	lsls	r0, r2, #28
 800951e:	460c      	mov	r4, r1
 8009520:	d458      	bmi.n	80095d4 <__sflush_r+0xc0>
 8009522:	684b      	ldr	r3, [r1, #4]
 8009524:	2b00      	cmp	r3, #0
 8009526:	dc05      	bgt.n	8009534 <__sflush_r+0x20>
 8009528:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800952a:	2b00      	cmp	r3, #0
 800952c:	dc02      	bgt.n	8009534 <__sflush_r+0x20>
 800952e:	2000      	movs	r0, #0
 8009530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009534:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009536:	2e00      	cmp	r6, #0
 8009538:	d0f9      	beq.n	800952e <__sflush_r+0x1a>
 800953a:	2300      	movs	r3, #0
 800953c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009540:	682f      	ldr	r7, [r5, #0]
 8009542:	602b      	str	r3, [r5, #0]
 8009544:	d032      	beq.n	80095ac <__sflush_r+0x98>
 8009546:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009548:	89a3      	ldrh	r3, [r4, #12]
 800954a:	075a      	lsls	r2, r3, #29
 800954c:	d505      	bpl.n	800955a <__sflush_r+0x46>
 800954e:	6863      	ldr	r3, [r4, #4]
 8009550:	1ac0      	subs	r0, r0, r3
 8009552:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009554:	b10b      	cbz	r3, 800955a <__sflush_r+0x46>
 8009556:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009558:	1ac0      	subs	r0, r0, r3
 800955a:	2300      	movs	r3, #0
 800955c:	4602      	mov	r2, r0
 800955e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009560:	6a21      	ldr	r1, [r4, #32]
 8009562:	4628      	mov	r0, r5
 8009564:	47b0      	blx	r6
 8009566:	1c43      	adds	r3, r0, #1
 8009568:	89a3      	ldrh	r3, [r4, #12]
 800956a:	d106      	bne.n	800957a <__sflush_r+0x66>
 800956c:	6829      	ldr	r1, [r5, #0]
 800956e:	291d      	cmp	r1, #29
 8009570:	d82c      	bhi.n	80095cc <__sflush_r+0xb8>
 8009572:	4a2a      	ldr	r2, [pc, #168]	; (800961c <__sflush_r+0x108>)
 8009574:	40ca      	lsrs	r2, r1
 8009576:	07d6      	lsls	r6, r2, #31
 8009578:	d528      	bpl.n	80095cc <__sflush_r+0xb8>
 800957a:	2200      	movs	r2, #0
 800957c:	6062      	str	r2, [r4, #4]
 800957e:	04d9      	lsls	r1, r3, #19
 8009580:	6922      	ldr	r2, [r4, #16]
 8009582:	6022      	str	r2, [r4, #0]
 8009584:	d504      	bpl.n	8009590 <__sflush_r+0x7c>
 8009586:	1c42      	adds	r2, r0, #1
 8009588:	d101      	bne.n	800958e <__sflush_r+0x7a>
 800958a:	682b      	ldr	r3, [r5, #0]
 800958c:	b903      	cbnz	r3, 8009590 <__sflush_r+0x7c>
 800958e:	6560      	str	r0, [r4, #84]	; 0x54
 8009590:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009592:	602f      	str	r7, [r5, #0]
 8009594:	2900      	cmp	r1, #0
 8009596:	d0ca      	beq.n	800952e <__sflush_r+0x1a>
 8009598:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800959c:	4299      	cmp	r1, r3
 800959e:	d002      	beq.n	80095a6 <__sflush_r+0x92>
 80095a0:	4628      	mov	r0, r5
 80095a2:	f000 fda5 	bl	800a0f0 <_free_r>
 80095a6:	2000      	movs	r0, #0
 80095a8:	6360      	str	r0, [r4, #52]	; 0x34
 80095aa:	e7c1      	b.n	8009530 <__sflush_r+0x1c>
 80095ac:	6a21      	ldr	r1, [r4, #32]
 80095ae:	2301      	movs	r3, #1
 80095b0:	4628      	mov	r0, r5
 80095b2:	47b0      	blx	r6
 80095b4:	1c41      	adds	r1, r0, #1
 80095b6:	d1c7      	bne.n	8009548 <__sflush_r+0x34>
 80095b8:	682b      	ldr	r3, [r5, #0]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d0c4      	beq.n	8009548 <__sflush_r+0x34>
 80095be:	2b1d      	cmp	r3, #29
 80095c0:	d001      	beq.n	80095c6 <__sflush_r+0xb2>
 80095c2:	2b16      	cmp	r3, #22
 80095c4:	d101      	bne.n	80095ca <__sflush_r+0xb6>
 80095c6:	602f      	str	r7, [r5, #0]
 80095c8:	e7b1      	b.n	800952e <__sflush_r+0x1a>
 80095ca:	89a3      	ldrh	r3, [r4, #12]
 80095cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095d0:	81a3      	strh	r3, [r4, #12]
 80095d2:	e7ad      	b.n	8009530 <__sflush_r+0x1c>
 80095d4:	690f      	ldr	r7, [r1, #16]
 80095d6:	2f00      	cmp	r7, #0
 80095d8:	d0a9      	beq.n	800952e <__sflush_r+0x1a>
 80095da:	0793      	lsls	r3, r2, #30
 80095dc:	680e      	ldr	r6, [r1, #0]
 80095de:	bf08      	it	eq
 80095e0:	694b      	ldreq	r3, [r1, #20]
 80095e2:	600f      	str	r7, [r1, #0]
 80095e4:	bf18      	it	ne
 80095e6:	2300      	movne	r3, #0
 80095e8:	eba6 0807 	sub.w	r8, r6, r7
 80095ec:	608b      	str	r3, [r1, #8]
 80095ee:	f1b8 0f00 	cmp.w	r8, #0
 80095f2:	dd9c      	ble.n	800952e <__sflush_r+0x1a>
 80095f4:	6a21      	ldr	r1, [r4, #32]
 80095f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80095f8:	4643      	mov	r3, r8
 80095fa:	463a      	mov	r2, r7
 80095fc:	4628      	mov	r0, r5
 80095fe:	47b0      	blx	r6
 8009600:	2800      	cmp	r0, #0
 8009602:	dc06      	bgt.n	8009612 <__sflush_r+0xfe>
 8009604:	89a3      	ldrh	r3, [r4, #12]
 8009606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800960a:	81a3      	strh	r3, [r4, #12]
 800960c:	f04f 30ff 	mov.w	r0, #4294967295
 8009610:	e78e      	b.n	8009530 <__sflush_r+0x1c>
 8009612:	4407      	add	r7, r0
 8009614:	eba8 0800 	sub.w	r8, r8, r0
 8009618:	e7e9      	b.n	80095ee <__sflush_r+0xda>
 800961a:	bf00      	nop
 800961c:	20400001 	.word	0x20400001

08009620 <_fflush_r>:
 8009620:	b538      	push	{r3, r4, r5, lr}
 8009622:	690b      	ldr	r3, [r1, #16]
 8009624:	4605      	mov	r5, r0
 8009626:	460c      	mov	r4, r1
 8009628:	b913      	cbnz	r3, 8009630 <_fflush_r+0x10>
 800962a:	2500      	movs	r5, #0
 800962c:	4628      	mov	r0, r5
 800962e:	bd38      	pop	{r3, r4, r5, pc}
 8009630:	b118      	cbz	r0, 800963a <_fflush_r+0x1a>
 8009632:	6983      	ldr	r3, [r0, #24]
 8009634:	b90b      	cbnz	r3, 800963a <_fflush_r+0x1a>
 8009636:	f000 f887 	bl	8009748 <__sinit>
 800963a:	4b14      	ldr	r3, [pc, #80]	; (800968c <_fflush_r+0x6c>)
 800963c:	429c      	cmp	r4, r3
 800963e:	d11b      	bne.n	8009678 <_fflush_r+0x58>
 8009640:	686c      	ldr	r4, [r5, #4]
 8009642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d0ef      	beq.n	800962a <_fflush_r+0xa>
 800964a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800964c:	07d0      	lsls	r0, r2, #31
 800964e:	d404      	bmi.n	800965a <_fflush_r+0x3a>
 8009650:	0599      	lsls	r1, r3, #22
 8009652:	d402      	bmi.n	800965a <_fflush_r+0x3a>
 8009654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009656:	f000 f91a 	bl	800988e <__retarget_lock_acquire_recursive>
 800965a:	4628      	mov	r0, r5
 800965c:	4621      	mov	r1, r4
 800965e:	f7ff ff59 	bl	8009514 <__sflush_r>
 8009662:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009664:	07da      	lsls	r2, r3, #31
 8009666:	4605      	mov	r5, r0
 8009668:	d4e0      	bmi.n	800962c <_fflush_r+0xc>
 800966a:	89a3      	ldrh	r3, [r4, #12]
 800966c:	059b      	lsls	r3, r3, #22
 800966e:	d4dd      	bmi.n	800962c <_fflush_r+0xc>
 8009670:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009672:	f000 f90d 	bl	8009890 <__retarget_lock_release_recursive>
 8009676:	e7d9      	b.n	800962c <_fflush_r+0xc>
 8009678:	4b05      	ldr	r3, [pc, #20]	; (8009690 <_fflush_r+0x70>)
 800967a:	429c      	cmp	r4, r3
 800967c:	d101      	bne.n	8009682 <_fflush_r+0x62>
 800967e:	68ac      	ldr	r4, [r5, #8]
 8009680:	e7df      	b.n	8009642 <_fflush_r+0x22>
 8009682:	4b04      	ldr	r3, [pc, #16]	; (8009694 <_fflush_r+0x74>)
 8009684:	429c      	cmp	r4, r3
 8009686:	bf08      	it	eq
 8009688:	68ec      	ldreq	r4, [r5, #12]
 800968a:	e7da      	b.n	8009642 <_fflush_r+0x22>
 800968c:	0800ab38 	.word	0x0800ab38
 8009690:	0800ab58 	.word	0x0800ab58
 8009694:	0800ab18 	.word	0x0800ab18

08009698 <std>:
 8009698:	2300      	movs	r3, #0
 800969a:	b510      	push	{r4, lr}
 800969c:	4604      	mov	r4, r0
 800969e:	e9c0 3300 	strd	r3, r3, [r0]
 80096a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80096a6:	6083      	str	r3, [r0, #8]
 80096a8:	8181      	strh	r1, [r0, #12]
 80096aa:	6643      	str	r3, [r0, #100]	; 0x64
 80096ac:	81c2      	strh	r2, [r0, #14]
 80096ae:	6183      	str	r3, [r0, #24]
 80096b0:	4619      	mov	r1, r3
 80096b2:	2208      	movs	r2, #8
 80096b4:	305c      	adds	r0, #92	; 0x5c
 80096b6:	f7fe f9e9 	bl	8007a8c <memset>
 80096ba:	4b05      	ldr	r3, [pc, #20]	; (80096d0 <std+0x38>)
 80096bc:	6263      	str	r3, [r4, #36]	; 0x24
 80096be:	4b05      	ldr	r3, [pc, #20]	; (80096d4 <std+0x3c>)
 80096c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80096c2:	4b05      	ldr	r3, [pc, #20]	; (80096d8 <std+0x40>)
 80096c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80096c6:	4b05      	ldr	r3, [pc, #20]	; (80096dc <std+0x44>)
 80096c8:	6224      	str	r4, [r4, #32]
 80096ca:	6323      	str	r3, [r4, #48]	; 0x30
 80096cc:	bd10      	pop	{r4, pc}
 80096ce:	bf00      	nop
 80096d0:	0800a66d 	.word	0x0800a66d
 80096d4:	0800a68f 	.word	0x0800a68f
 80096d8:	0800a6c7 	.word	0x0800a6c7
 80096dc:	0800a6eb 	.word	0x0800a6eb

080096e0 <_cleanup_r>:
 80096e0:	4901      	ldr	r1, [pc, #4]	; (80096e8 <_cleanup_r+0x8>)
 80096e2:	f000 b8af 	b.w	8009844 <_fwalk_reent>
 80096e6:	bf00      	nop
 80096e8:	08009621 	.word	0x08009621

080096ec <__sfmoreglue>:
 80096ec:	b570      	push	{r4, r5, r6, lr}
 80096ee:	2268      	movs	r2, #104	; 0x68
 80096f0:	1e4d      	subs	r5, r1, #1
 80096f2:	4355      	muls	r5, r2
 80096f4:	460e      	mov	r6, r1
 80096f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80096fa:	f000 fd65 	bl	800a1c8 <_malloc_r>
 80096fe:	4604      	mov	r4, r0
 8009700:	b140      	cbz	r0, 8009714 <__sfmoreglue+0x28>
 8009702:	2100      	movs	r1, #0
 8009704:	e9c0 1600 	strd	r1, r6, [r0]
 8009708:	300c      	adds	r0, #12
 800970a:	60a0      	str	r0, [r4, #8]
 800970c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009710:	f7fe f9bc 	bl	8007a8c <memset>
 8009714:	4620      	mov	r0, r4
 8009716:	bd70      	pop	{r4, r5, r6, pc}

08009718 <__sfp_lock_acquire>:
 8009718:	4801      	ldr	r0, [pc, #4]	; (8009720 <__sfp_lock_acquire+0x8>)
 800971a:	f000 b8b8 	b.w	800988e <__retarget_lock_acquire_recursive>
 800971e:	bf00      	nop
 8009720:	20000ff1 	.word	0x20000ff1

08009724 <__sfp_lock_release>:
 8009724:	4801      	ldr	r0, [pc, #4]	; (800972c <__sfp_lock_release+0x8>)
 8009726:	f000 b8b3 	b.w	8009890 <__retarget_lock_release_recursive>
 800972a:	bf00      	nop
 800972c:	20000ff1 	.word	0x20000ff1

08009730 <__sinit_lock_acquire>:
 8009730:	4801      	ldr	r0, [pc, #4]	; (8009738 <__sinit_lock_acquire+0x8>)
 8009732:	f000 b8ac 	b.w	800988e <__retarget_lock_acquire_recursive>
 8009736:	bf00      	nop
 8009738:	20000ff2 	.word	0x20000ff2

0800973c <__sinit_lock_release>:
 800973c:	4801      	ldr	r0, [pc, #4]	; (8009744 <__sinit_lock_release+0x8>)
 800973e:	f000 b8a7 	b.w	8009890 <__retarget_lock_release_recursive>
 8009742:	bf00      	nop
 8009744:	20000ff2 	.word	0x20000ff2

08009748 <__sinit>:
 8009748:	b510      	push	{r4, lr}
 800974a:	4604      	mov	r4, r0
 800974c:	f7ff fff0 	bl	8009730 <__sinit_lock_acquire>
 8009750:	69a3      	ldr	r3, [r4, #24]
 8009752:	b11b      	cbz	r3, 800975c <__sinit+0x14>
 8009754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009758:	f7ff bff0 	b.w	800973c <__sinit_lock_release>
 800975c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009760:	6523      	str	r3, [r4, #80]	; 0x50
 8009762:	4b13      	ldr	r3, [pc, #76]	; (80097b0 <__sinit+0x68>)
 8009764:	4a13      	ldr	r2, [pc, #76]	; (80097b4 <__sinit+0x6c>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	62a2      	str	r2, [r4, #40]	; 0x28
 800976a:	42a3      	cmp	r3, r4
 800976c:	bf04      	itt	eq
 800976e:	2301      	moveq	r3, #1
 8009770:	61a3      	streq	r3, [r4, #24]
 8009772:	4620      	mov	r0, r4
 8009774:	f000 f820 	bl	80097b8 <__sfp>
 8009778:	6060      	str	r0, [r4, #4]
 800977a:	4620      	mov	r0, r4
 800977c:	f000 f81c 	bl	80097b8 <__sfp>
 8009780:	60a0      	str	r0, [r4, #8]
 8009782:	4620      	mov	r0, r4
 8009784:	f000 f818 	bl	80097b8 <__sfp>
 8009788:	2200      	movs	r2, #0
 800978a:	60e0      	str	r0, [r4, #12]
 800978c:	2104      	movs	r1, #4
 800978e:	6860      	ldr	r0, [r4, #4]
 8009790:	f7ff ff82 	bl	8009698 <std>
 8009794:	68a0      	ldr	r0, [r4, #8]
 8009796:	2201      	movs	r2, #1
 8009798:	2109      	movs	r1, #9
 800979a:	f7ff ff7d 	bl	8009698 <std>
 800979e:	68e0      	ldr	r0, [r4, #12]
 80097a0:	2202      	movs	r2, #2
 80097a2:	2112      	movs	r1, #18
 80097a4:	f7ff ff78 	bl	8009698 <std>
 80097a8:	2301      	movs	r3, #1
 80097aa:	61a3      	str	r3, [r4, #24]
 80097ac:	e7d2      	b.n	8009754 <__sinit+0xc>
 80097ae:	bf00      	nop
 80097b0:	0800aa3c 	.word	0x0800aa3c
 80097b4:	080096e1 	.word	0x080096e1

080097b8 <__sfp>:
 80097b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ba:	4607      	mov	r7, r0
 80097bc:	f7ff ffac 	bl	8009718 <__sfp_lock_acquire>
 80097c0:	4b1e      	ldr	r3, [pc, #120]	; (800983c <__sfp+0x84>)
 80097c2:	681e      	ldr	r6, [r3, #0]
 80097c4:	69b3      	ldr	r3, [r6, #24]
 80097c6:	b913      	cbnz	r3, 80097ce <__sfp+0x16>
 80097c8:	4630      	mov	r0, r6
 80097ca:	f7ff ffbd 	bl	8009748 <__sinit>
 80097ce:	3648      	adds	r6, #72	; 0x48
 80097d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80097d4:	3b01      	subs	r3, #1
 80097d6:	d503      	bpl.n	80097e0 <__sfp+0x28>
 80097d8:	6833      	ldr	r3, [r6, #0]
 80097da:	b30b      	cbz	r3, 8009820 <__sfp+0x68>
 80097dc:	6836      	ldr	r6, [r6, #0]
 80097de:	e7f7      	b.n	80097d0 <__sfp+0x18>
 80097e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80097e4:	b9d5      	cbnz	r5, 800981c <__sfp+0x64>
 80097e6:	4b16      	ldr	r3, [pc, #88]	; (8009840 <__sfp+0x88>)
 80097e8:	60e3      	str	r3, [r4, #12]
 80097ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80097ee:	6665      	str	r5, [r4, #100]	; 0x64
 80097f0:	f000 f84c 	bl	800988c <__retarget_lock_init_recursive>
 80097f4:	f7ff ff96 	bl	8009724 <__sfp_lock_release>
 80097f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80097fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009800:	6025      	str	r5, [r4, #0]
 8009802:	61a5      	str	r5, [r4, #24]
 8009804:	2208      	movs	r2, #8
 8009806:	4629      	mov	r1, r5
 8009808:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800980c:	f7fe f93e 	bl	8007a8c <memset>
 8009810:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009814:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009818:	4620      	mov	r0, r4
 800981a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800981c:	3468      	adds	r4, #104	; 0x68
 800981e:	e7d9      	b.n	80097d4 <__sfp+0x1c>
 8009820:	2104      	movs	r1, #4
 8009822:	4638      	mov	r0, r7
 8009824:	f7ff ff62 	bl	80096ec <__sfmoreglue>
 8009828:	4604      	mov	r4, r0
 800982a:	6030      	str	r0, [r6, #0]
 800982c:	2800      	cmp	r0, #0
 800982e:	d1d5      	bne.n	80097dc <__sfp+0x24>
 8009830:	f7ff ff78 	bl	8009724 <__sfp_lock_release>
 8009834:	230c      	movs	r3, #12
 8009836:	603b      	str	r3, [r7, #0]
 8009838:	e7ee      	b.n	8009818 <__sfp+0x60>
 800983a:	bf00      	nop
 800983c:	0800aa3c 	.word	0x0800aa3c
 8009840:	ffff0001 	.word	0xffff0001

08009844 <_fwalk_reent>:
 8009844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009848:	4606      	mov	r6, r0
 800984a:	4688      	mov	r8, r1
 800984c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009850:	2700      	movs	r7, #0
 8009852:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009856:	f1b9 0901 	subs.w	r9, r9, #1
 800985a:	d505      	bpl.n	8009868 <_fwalk_reent+0x24>
 800985c:	6824      	ldr	r4, [r4, #0]
 800985e:	2c00      	cmp	r4, #0
 8009860:	d1f7      	bne.n	8009852 <_fwalk_reent+0xe>
 8009862:	4638      	mov	r0, r7
 8009864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009868:	89ab      	ldrh	r3, [r5, #12]
 800986a:	2b01      	cmp	r3, #1
 800986c:	d907      	bls.n	800987e <_fwalk_reent+0x3a>
 800986e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009872:	3301      	adds	r3, #1
 8009874:	d003      	beq.n	800987e <_fwalk_reent+0x3a>
 8009876:	4629      	mov	r1, r5
 8009878:	4630      	mov	r0, r6
 800987a:	47c0      	blx	r8
 800987c:	4307      	orrs	r7, r0
 800987e:	3568      	adds	r5, #104	; 0x68
 8009880:	e7e9      	b.n	8009856 <_fwalk_reent+0x12>
	...

08009884 <_localeconv_r>:
 8009884:	4800      	ldr	r0, [pc, #0]	; (8009888 <_localeconv_r+0x4>)
 8009886:	4770      	bx	lr
 8009888:	20000184 	.word	0x20000184

0800988c <__retarget_lock_init_recursive>:
 800988c:	4770      	bx	lr

0800988e <__retarget_lock_acquire_recursive>:
 800988e:	4770      	bx	lr

08009890 <__retarget_lock_release_recursive>:
 8009890:	4770      	bx	lr

08009892 <__swhatbuf_r>:
 8009892:	b570      	push	{r4, r5, r6, lr}
 8009894:	460e      	mov	r6, r1
 8009896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800989a:	2900      	cmp	r1, #0
 800989c:	b096      	sub	sp, #88	; 0x58
 800989e:	4614      	mov	r4, r2
 80098a0:	461d      	mov	r5, r3
 80098a2:	da08      	bge.n	80098b6 <__swhatbuf_r+0x24>
 80098a4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80098a8:	2200      	movs	r2, #0
 80098aa:	602a      	str	r2, [r5, #0]
 80098ac:	061a      	lsls	r2, r3, #24
 80098ae:	d410      	bmi.n	80098d2 <__swhatbuf_r+0x40>
 80098b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098b4:	e00e      	b.n	80098d4 <__swhatbuf_r+0x42>
 80098b6:	466a      	mov	r2, sp
 80098b8:	f000 ff3e 	bl	800a738 <_fstat_r>
 80098bc:	2800      	cmp	r0, #0
 80098be:	dbf1      	blt.n	80098a4 <__swhatbuf_r+0x12>
 80098c0:	9a01      	ldr	r2, [sp, #4]
 80098c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80098c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80098ca:	425a      	negs	r2, r3
 80098cc:	415a      	adcs	r2, r3
 80098ce:	602a      	str	r2, [r5, #0]
 80098d0:	e7ee      	b.n	80098b0 <__swhatbuf_r+0x1e>
 80098d2:	2340      	movs	r3, #64	; 0x40
 80098d4:	2000      	movs	r0, #0
 80098d6:	6023      	str	r3, [r4, #0]
 80098d8:	b016      	add	sp, #88	; 0x58
 80098da:	bd70      	pop	{r4, r5, r6, pc}

080098dc <__smakebuf_r>:
 80098dc:	898b      	ldrh	r3, [r1, #12]
 80098de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80098e0:	079d      	lsls	r5, r3, #30
 80098e2:	4606      	mov	r6, r0
 80098e4:	460c      	mov	r4, r1
 80098e6:	d507      	bpl.n	80098f8 <__smakebuf_r+0x1c>
 80098e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80098ec:	6023      	str	r3, [r4, #0]
 80098ee:	6123      	str	r3, [r4, #16]
 80098f0:	2301      	movs	r3, #1
 80098f2:	6163      	str	r3, [r4, #20]
 80098f4:	b002      	add	sp, #8
 80098f6:	bd70      	pop	{r4, r5, r6, pc}
 80098f8:	ab01      	add	r3, sp, #4
 80098fa:	466a      	mov	r2, sp
 80098fc:	f7ff ffc9 	bl	8009892 <__swhatbuf_r>
 8009900:	9900      	ldr	r1, [sp, #0]
 8009902:	4605      	mov	r5, r0
 8009904:	4630      	mov	r0, r6
 8009906:	f000 fc5f 	bl	800a1c8 <_malloc_r>
 800990a:	b948      	cbnz	r0, 8009920 <__smakebuf_r+0x44>
 800990c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009910:	059a      	lsls	r2, r3, #22
 8009912:	d4ef      	bmi.n	80098f4 <__smakebuf_r+0x18>
 8009914:	f023 0303 	bic.w	r3, r3, #3
 8009918:	f043 0302 	orr.w	r3, r3, #2
 800991c:	81a3      	strh	r3, [r4, #12]
 800991e:	e7e3      	b.n	80098e8 <__smakebuf_r+0xc>
 8009920:	4b0d      	ldr	r3, [pc, #52]	; (8009958 <__smakebuf_r+0x7c>)
 8009922:	62b3      	str	r3, [r6, #40]	; 0x28
 8009924:	89a3      	ldrh	r3, [r4, #12]
 8009926:	6020      	str	r0, [r4, #0]
 8009928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800992c:	81a3      	strh	r3, [r4, #12]
 800992e:	9b00      	ldr	r3, [sp, #0]
 8009930:	6163      	str	r3, [r4, #20]
 8009932:	9b01      	ldr	r3, [sp, #4]
 8009934:	6120      	str	r0, [r4, #16]
 8009936:	b15b      	cbz	r3, 8009950 <__smakebuf_r+0x74>
 8009938:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800993c:	4630      	mov	r0, r6
 800993e:	f000 ff0d 	bl	800a75c <_isatty_r>
 8009942:	b128      	cbz	r0, 8009950 <__smakebuf_r+0x74>
 8009944:	89a3      	ldrh	r3, [r4, #12]
 8009946:	f023 0303 	bic.w	r3, r3, #3
 800994a:	f043 0301 	orr.w	r3, r3, #1
 800994e:	81a3      	strh	r3, [r4, #12]
 8009950:	89a0      	ldrh	r0, [r4, #12]
 8009952:	4305      	orrs	r5, r0
 8009954:	81a5      	strh	r5, [r4, #12]
 8009956:	e7cd      	b.n	80098f4 <__smakebuf_r+0x18>
 8009958:	080096e1 	.word	0x080096e1

0800995c <malloc>:
 800995c:	4b02      	ldr	r3, [pc, #8]	; (8009968 <malloc+0xc>)
 800995e:	4601      	mov	r1, r0
 8009960:	6818      	ldr	r0, [r3, #0]
 8009962:	f000 bc31 	b.w	800a1c8 <_malloc_r>
 8009966:	bf00      	nop
 8009968:	20000030 	.word	0x20000030

0800996c <memcpy>:
 800996c:	440a      	add	r2, r1
 800996e:	4291      	cmp	r1, r2
 8009970:	f100 33ff 	add.w	r3, r0, #4294967295
 8009974:	d100      	bne.n	8009978 <memcpy+0xc>
 8009976:	4770      	bx	lr
 8009978:	b510      	push	{r4, lr}
 800997a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800997e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009982:	4291      	cmp	r1, r2
 8009984:	d1f9      	bne.n	800997a <memcpy+0xe>
 8009986:	bd10      	pop	{r4, pc}

08009988 <memmove>:
 8009988:	4288      	cmp	r0, r1
 800998a:	b510      	push	{r4, lr}
 800998c:	eb01 0402 	add.w	r4, r1, r2
 8009990:	d902      	bls.n	8009998 <memmove+0x10>
 8009992:	4284      	cmp	r4, r0
 8009994:	4623      	mov	r3, r4
 8009996:	d807      	bhi.n	80099a8 <memmove+0x20>
 8009998:	1e43      	subs	r3, r0, #1
 800999a:	42a1      	cmp	r1, r4
 800999c:	d008      	beq.n	80099b0 <memmove+0x28>
 800999e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80099a6:	e7f8      	b.n	800999a <memmove+0x12>
 80099a8:	4402      	add	r2, r0
 80099aa:	4601      	mov	r1, r0
 80099ac:	428a      	cmp	r2, r1
 80099ae:	d100      	bne.n	80099b2 <memmove+0x2a>
 80099b0:	bd10      	pop	{r4, pc}
 80099b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80099ba:	e7f7      	b.n	80099ac <memmove+0x24>

080099bc <_Balloc>:
 80099bc:	b570      	push	{r4, r5, r6, lr}
 80099be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80099c0:	4604      	mov	r4, r0
 80099c2:	460d      	mov	r5, r1
 80099c4:	b976      	cbnz	r6, 80099e4 <_Balloc+0x28>
 80099c6:	2010      	movs	r0, #16
 80099c8:	f7ff ffc8 	bl	800995c <malloc>
 80099cc:	4602      	mov	r2, r0
 80099ce:	6260      	str	r0, [r4, #36]	; 0x24
 80099d0:	b920      	cbnz	r0, 80099dc <_Balloc+0x20>
 80099d2:	4b18      	ldr	r3, [pc, #96]	; (8009a34 <_Balloc+0x78>)
 80099d4:	4818      	ldr	r0, [pc, #96]	; (8009a38 <_Balloc+0x7c>)
 80099d6:	2166      	movs	r1, #102	; 0x66
 80099d8:	f7fd fffe 	bl	80079d8 <__assert_func>
 80099dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099e0:	6006      	str	r6, [r0, #0]
 80099e2:	60c6      	str	r6, [r0, #12]
 80099e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80099e6:	68f3      	ldr	r3, [r6, #12]
 80099e8:	b183      	cbz	r3, 8009a0c <_Balloc+0x50>
 80099ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099ec:	68db      	ldr	r3, [r3, #12]
 80099ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80099f2:	b9b8      	cbnz	r0, 8009a24 <_Balloc+0x68>
 80099f4:	2101      	movs	r1, #1
 80099f6:	fa01 f605 	lsl.w	r6, r1, r5
 80099fa:	1d72      	adds	r2, r6, #5
 80099fc:	0092      	lsls	r2, r2, #2
 80099fe:	4620      	mov	r0, r4
 8009a00:	f000 fb60 	bl	800a0c4 <_calloc_r>
 8009a04:	b160      	cbz	r0, 8009a20 <_Balloc+0x64>
 8009a06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a0a:	e00e      	b.n	8009a2a <_Balloc+0x6e>
 8009a0c:	2221      	movs	r2, #33	; 0x21
 8009a0e:	2104      	movs	r1, #4
 8009a10:	4620      	mov	r0, r4
 8009a12:	f000 fb57 	bl	800a0c4 <_calloc_r>
 8009a16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a18:	60f0      	str	r0, [r6, #12]
 8009a1a:	68db      	ldr	r3, [r3, #12]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d1e4      	bne.n	80099ea <_Balloc+0x2e>
 8009a20:	2000      	movs	r0, #0
 8009a22:	bd70      	pop	{r4, r5, r6, pc}
 8009a24:	6802      	ldr	r2, [r0, #0]
 8009a26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a30:	e7f7      	b.n	8009a22 <_Balloc+0x66>
 8009a32:	bf00      	nop
 8009a34:	0800aa92 	.word	0x0800aa92
 8009a38:	0800ab78 	.word	0x0800ab78

08009a3c <_Bfree>:
 8009a3c:	b570      	push	{r4, r5, r6, lr}
 8009a3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a40:	4605      	mov	r5, r0
 8009a42:	460c      	mov	r4, r1
 8009a44:	b976      	cbnz	r6, 8009a64 <_Bfree+0x28>
 8009a46:	2010      	movs	r0, #16
 8009a48:	f7ff ff88 	bl	800995c <malloc>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	6268      	str	r0, [r5, #36]	; 0x24
 8009a50:	b920      	cbnz	r0, 8009a5c <_Bfree+0x20>
 8009a52:	4b09      	ldr	r3, [pc, #36]	; (8009a78 <_Bfree+0x3c>)
 8009a54:	4809      	ldr	r0, [pc, #36]	; (8009a7c <_Bfree+0x40>)
 8009a56:	218a      	movs	r1, #138	; 0x8a
 8009a58:	f7fd ffbe 	bl	80079d8 <__assert_func>
 8009a5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a60:	6006      	str	r6, [r0, #0]
 8009a62:	60c6      	str	r6, [r0, #12]
 8009a64:	b13c      	cbz	r4, 8009a76 <_Bfree+0x3a>
 8009a66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009a68:	6862      	ldr	r2, [r4, #4]
 8009a6a:	68db      	ldr	r3, [r3, #12]
 8009a6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a70:	6021      	str	r1, [r4, #0]
 8009a72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a76:	bd70      	pop	{r4, r5, r6, pc}
 8009a78:	0800aa92 	.word	0x0800aa92
 8009a7c:	0800ab78 	.word	0x0800ab78

08009a80 <__multadd>:
 8009a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a84:	690d      	ldr	r5, [r1, #16]
 8009a86:	4607      	mov	r7, r0
 8009a88:	460c      	mov	r4, r1
 8009a8a:	461e      	mov	r6, r3
 8009a8c:	f101 0c14 	add.w	ip, r1, #20
 8009a90:	2000      	movs	r0, #0
 8009a92:	f8dc 3000 	ldr.w	r3, [ip]
 8009a96:	b299      	uxth	r1, r3
 8009a98:	fb02 6101 	mla	r1, r2, r1, r6
 8009a9c:	0c1e      	lsrs	r6, r3, #16
 8009a9e:	0c0b      	lsrs	r3, r1, #16
 8009aa0:	fb02 3306 	mla	r3, r2, r6, r3
 8009aa4:	b289      	uxth	r1, r1
 8009aa6:	3001      	adds	r0, #1
 8009aa8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009aac:	4285      	cmp	r5, r0
 8009aae:	f84c 1b04 	str.w	r1, [ip], #4
 8009ab2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009ab6:	dcec      	bgt.n	8009a92 <__multadd+0x12>
 8009ab8:	b30e      	cbz	r6, 8009afe <__multadd+0x7e>
 8009aba:	68a3      	ldr	r3, [r4, #8]
 8009abc:	42ab      	cmp	r3, r5
 8009abe:	dc19      	bgt.n	8009af4 <__multadd+0x74>
 8009ac0:	6861      	ldr	r1, [r4, #4]
 8009ac2:	4638      	mov	r0, r7
 8009ac4:	3101      	adds	r1, #1
 8009ac6:	f7ff ff79 	bl	80099bc <_Balloc>
 8009aca:	4680      	mov	r8, r0
 8009acc:	b928      	cbnz	r0, 8009ada <__multadd+0x5a>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	4b0c      	ldr	r3, [pc, #48]	; (8009b04 <__multadd+0x84>)
 8009ad2:	480d      	ldr	r0, [pc, #52]	; (8009b08 <__multadd+0x88>)
 8009ad4:	21b5      	movs	r1, #181	; 0xb5
 8009ad6:	f7fd ff7f 	bl	80079d8 <__assert_func>
 8009ada:	6922      	ldr	r2, [r4, #16]
 8009adc:	3202      	adds	r2, #2
 8009ade:	f104 010c 	add.w	r1, r4, #12
 8009ae2:	0092      	lsls	r2, r2, #2
 8009ae4:	300c      	adds	r0, #12
 8009ae6:	f7ff ff41 	bl	800996c <memcpy>
 8009aea:	4621      	mov	r1, r4
 8009aec:	4638      	mov	r0, r7
 8009aee:	f7ff ffa5 	bl	8009a3c <_Bfree>
 8009af2:	4644      	mov	r4, r8
 8009af4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009af8:	3501      	adds	r5, #1
 8009afa:	615e      	str	r6, [r3, #20]
 8009afc:	6125      	str	r5, [r4, #16]
 8009afe:	4620      	mov	r0, r4
 8009b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b04:	0800ab04 	.word	0x0800ab04
 8009b08:	0800ab78 	.word	0x0800ab78

08009b0c <__hi0bits>:
 8009b0c:	0c03      	lsrs	r3, r0, #16
 8009b0e:	041b      	lsls	r3, r3, #16
 8009b10:	b9d3      	cbnz	r3, 8009b48 <__hi0bits+0x3c>
 8009b12:	0400      	lsls	r0, r0, #16
 8009b14:	2310      	movs	r3, #16
 8009b16:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009b1a:	bf04      	itt	eq
 8009b1c:	0200      	lsleq	r0, r0, #8
 8009b1e:	3308      	addeq	r3, #8
 8009b20:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009b24:	bf04      	itt	eq
 8009b26:	0100      	lsleq	r0, r0, #4
 8009b28:	3304      	addeq	r3, #4
 8009b2a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009b2e:	bf04      	itt	eq
 8009b30:	0080      	lsleq	r0, r0, #2
 8009b32:	3302      	addeq	r3, #2
 8009b34:	2800      	cmp	r0, #0
 8009b36:	db05      	blt.n	8009b44 <__hi0bits+0x38>
 8009b38:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009b3c:	f103 0301 	add.w	r3, r3, #1
 8009b40:	bf08      	it	eq
 8009b42:	2320      	moveq	r3, #32
 8009b44:	4618      	mov	r0, r3
 8009b46:	4770      	bx	lr
 8009b48:	2300      	movs	r3, #0
 8009b4a:	e7e4      	b.n	8009b16 <__hi0bits+0xa>

08009b4c <__lo0bits>:
 8009b4c:	6803      	ldr	r3, [r0, #0]
 8009b4e:	f013 0207 	ands.w	r2, r3, #7
 8009b52:	4601      	mov	r1, r0
 8009b54:	d00b      	beq.n	8009b6e <__lo0bits+0x22>
 8009b56:	07da      	lsls	r2, r3, #31
 8009b58:	d423      	bmi.n	8009ba2 <__lo0bits+0x56>
 8009b5a:	0798      	lsls	r0, r3, #30
 8009b5c:	bf49      	itett	mi
 8009b5e:	085b      	lsrmi	r3, r3, #1
 8009b60:	089b      	lsrpl	r3, r3, #2
 8009b62:	2001      	movmi	r0, #1
 8009b64:	600b      	strmi	r3, [r1, #0]
 8009b66:	bf5c      	itt	pl
 8009b68:	600b      	strpl	r3, [r1, #0]
 8009b6a:	2002      	movpl	r0, #2
 8009b6c:	4770      	bx	lr
 8009b6e:	b298      	uxth	r0, r3
 8009b70:	b9a8      	cbnz	r0, 8009b9e <__lo0bits+0x52>
 8009b72:	0c1b      	lsrs	r3, r3, #16
 8009b74:	2010      	movs	r0, #16
 8009b76:	b2da      	uxtb	r2, r3
 8009b78:	b90a      	cbnz	r2, 8009b7e <__lo0bits+0x32>
 8009b7a:	3008      	adds	r0, #8
 8009b7c:	0a1b      	lsrs	r3, r3, #8
 8009b7e:	071a      	lsls	r2, r3, #28
 8009b80:	bf04      	itt	eq
 8009b82:	091b      	lsreq	r3, r3, #4
 8009b84:	3004      	addeq	r0, #4
 8009b86:	079a      	lsls	r2, r3, #30
 8009b88:	bf04      	itt	eq
 8009b8a:	089b      	lsreq	r3, r3, #2
 8009b8c:	3002      	addeq	r0, #2
 8009b8e:	07da      	lsls	r2, r3, #31
 8009b90:	d403      	bmi.n	8009b9a <__lo0bits+0x4e>
 8009b92:	085b      	lsrs	r3, r3, #1
 8009b94:	f100 0001 	add.w	r0, r0, #1
 8009b98:	d005      	beq.n	8009ba6 <__lo0bits+0x5a>
 8009b9a:	600b      	str	r3, [r1, #0]
 8009b9c:	4770      	bx	lr
 8009b9e:	4610      	mov	r0, r2
 8009ba0:	e7e9      	b.n	8009b76 <__lo0bits+0x2a>
 8009ba2:	2000      	movs	r0, #0
 8009ba4:	4770      	bx	lr
 8009ba6:	2020      	movs	r0, #32
 8009ba8:	4770      	bx	lr
	...

08009bac <__i2b>:
 8009bac:	b510      	push	{r4, lr}
 8009bae:	460c      	mov	r4, r1
 8009bb0:	2101      	movs	r1, #1
 8009bb2:	f7ff ff03 	bl	80099bc <_Balloc>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	b928      	cbnz	r0, 8009bc6 <__i2b+0x1a>
 8009bba:	4b05      	ldr	r3, [pc, #20]	; (8009bd0 <__i2b+0x24>)
 8009bbc:	4805      	ldr	r0, [pc, #20]	; (8009bd4 <__i2b+0x28>)
 8009bbe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009bc2:	f7fd ff09 	bl	80079d8 <__assert_func>
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	6144      	str	r4, [r0, #20]
 8009bca:	6103      	str	r3, [r0, #16]
 8009bcc:	bd10      	pop	{r4, pc}
 8009bce:	bf00      	nop
 8009bd0:	0800ab04 	.word	0x0800ab04
 8009bd4:	0800ab78 	.word	0x0800ab78

08009bd8 <__multiply>:
 8009bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bdc:	4691      	mov	r9, r2
 8009bde:	690a      	ldr	r2, [r1, #16]
 8009be0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009be4:	429a      	cmp	r2, r3
 8009be6:	bfb8      	it	lt
 8009be8:	460b      	movlt	r3, r1
 8009bea:	460c      	mov	r4, r1
 8009bec:	bfbc      	itt	lt
 8009bee:	464c      	movlt	r4, r9
 8009bf0:	4699      	movlt	r9, r3
 8009bf2:	6927      	ldr	r7, [r4, #16]
 8009bf4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009bf8:	68a3      	ldr	r3, [r4, #8]
 8009bfa:	6861      	ldr	r1, [r4, #4]
 8009bfc:	eb07 060a 	add.w	r6, r7, sl
 8009c00:	42b3      	cmp	r3, r6
 8009c02:	b085      	sub	sp, #20
 8009c04:	bfb8      	it	lt
 8009c06:	3101      	addlt	r1, #1
 8009c08:	f7ff fed8 	bl	80099bc <_Balloc>
 8009c0c:	b930      	cbnz	r0, 8009c1c <__multiply+0x44>
 8009c0e:	4602      	mov	r2, r0
 8009c10:	4b44      	ldr	r3, [pc, #272]	; (8009d24 <__multiply+0x14c>)
 8009c12:	4845      	ldr	r0, [pc, #276]	; (8009d28 <__multiply+0x150>)
 8009c14:	f240 115d 	movw	r1, #349	; 0x15d
 8009c18:	f7fd fede 	bl	80079d8 <__assert_func>
 8009c1c:	f100 0514 	add.w	r5, r0, #20
 8009c20:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009c24:	462b      	mov	r3, r5
 8009c26:	2200      	movs	r2, #0
 8009c28:	4543      	cmp	r3, r8
 8009c2a:	d321      	bcc.n	8009c70 <__multiply+0x98>
 8009c2c:	f104 0314 	add.w	r3, r4, #20
 8009c30:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009c34:	f109 0314 	add.w	r3, r9, #20
 8009c38:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009c3c:	9202      	str	r2, [sp, #8]
 8009c3e:	1b3a      	subs	r2, r7, r4
 8009c40:	3a15      	subs	r2, #21
 8009c42:	f022 0203 	bic.w	r2, r2, #3
 8009c46:	3204      	adds	r2, #4
 8009c48:	f104 0115 	add.w	r1, r4, #21
 8009c4c:	428f      	cmp	r7, r1
 8009c4e:	bf38      	it	cc
 8009c50:	2204      	movcc	r2, #4
 8009c52:	9201      	str	r2, [sp, #4]
 8009c54:	9a02      	ldr	r2, [sp, #8]
 8009c56:	9303      	str	r3, [sp, #12]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d80c      	bhi.n	8009c76 <__multiply+0x9e>
 8009c5c:	2e00      	cmp	r6, #0
 8009c5e:	dd03      	ble.n	8009c68 <__multiply+0x90>
 8009c60:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d05a      	beq.n	8009d1e <__multiply+0x146>
 8009c68:	6106      	str	r6, [r0, #16]
 8009c6a:	b005      	add	sp, #20
 8009c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c70:	f843 2b04 	str.w	r2, [r3], #4
 8009c74:	e7d8      	b.n	8009c28 <__multiply+0x50>
 8009c76:	f8b3 a000 	ldrh.w	sl, [r3]
 8009c7a:	f1ba 0f00 	cmp.w	sl, #0
 8009c7e:	d024      	beq.n	8009cca <__multiply+0xf2>
 8009c80:	f104 0e14 	add.w	lr, r4, #20
 8009c84:	46a9      	mov	r9, r5
 8009c86:	f04f 0c00 	mov.w	ip, #0
 8009c8a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009c8e:	f8d9 1000 	ldr.w	r1, [r9]
 8009c92:	fa1f fb82 	uxth.w	fp, r2
 8009c96:	b289      	uxth	r1, r1
 8009c98:	fb0a 110b 	mla	r1, sl, fp, r1
 8009c9c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009ca0:	f8d9 2000 	ldr.w	r2, [r9]
 8009ca4:	4461      	add	r1, ip
 8009ca6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009caa:	fb0a c20b 	mla	r2, sl, fp, ip
 8009cae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009cb2:	b289      	uxth	r1, r1
 8009cb4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009cb8:	4577      	cmp	r7, lr
 8009cba:	f849 1b04 	str.w	r1, [r9], #4
 8009cbe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009cc2:	d8e2      	bhi.n	8009c8a <__multiply+0xb2>
 8009cc4:	9a01      	ldr	r2, [sp, #4]
 8009cc6:	f845 c002 	str.w	ip, [r5, r2]
 8009cca:	9a03      	ldr	r2, [sp, #12]
 8009ccc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009cd0:	3304      	adds	r3, #4
 8009cd2:	f1b9 0f00 	cmp.w	r9, #0
 8009cd6:	d020      	beq.n	8009d1a <__multiply+0x142>
 8009cd8:	6829      	ldr	r1, [r5, #0]
 8009cda:	f104 0c14 	add.w	ip, r4, #20
 8009cde:	46ae      	mov	lr, r5
 8009ce0:	f04f 0a00 	mov.w	sl, #0
 8009ce4:	f8bc b000 	ldrh.w	fp, [ip]
 8009ce8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009cec:	fb09 220b 	mla	r2, r9, fp, r2
 8009cf0:	4492      	add	sl, r2
 8009cf2:	b289      	uxth	r1, r1
 8009cf4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009cf8:	f84e 1b04 	str.w	r1, [lr], #4
 8009cfc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009d00:	f8be 1000 	ldrh.w	r1, [lr]
 8009d04:	0c12      	lsrs	r2, r2, #16
 8009d06:	fb09 1102 	mla	r1, r9, r2, r1
 8009d0a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009d0e:	4567      	cmp	r7, ip
 8009d10:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d14:	d8e6      	bhi.n	8009ce4 <__multiply+0x10c>
 8009d16:	9a01      	ldr	r2, [sp, #4]
 8009d18:	50a9      	str	r1, [r5, r2]
 8009d1a:	3504      	adds	r5, #4
 8009d1c:	e79a      	b.n	8009c54 <__multiply+0x7c>
 8009d1e:	3e01      	subs	r6, #1
 8009d20:	e79c      	b.n	8009c5c <__multiply+0x84>
 8009d22:	bf00      	nop
 8009d24:	0800ab04 	.word	0x0800ab04
 8009d28:	0800ab78 	.word	0x0800ab78

08009d2c <__pow5mult>:
 8009d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d30:	4615      	mov	r5, r2
 8009d32:	f012 0203 	ands.w	r2, r2, #3
 8009d36:	4606      	mov	r6, r0
 8009d38:	460f      	mov	r7, r1
 8009d3a:	d007      	beq.n	8009d4c <__pow5mult+0x20>
 8009d3c:	4c25      	ldr	r4, [pc, #148]	; (8009dd4 <__pow5mult+0xa8>)
 8009d3e:	3a01      	subs	r2, #1
 8009d40:	2300      	movs	r3, #0
 8009d42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d46:	f7ff fe9b 	bl	8009a80 <__multadd>
 8009d4a:	4607      	mov	r7, r0
 8009d4c:	10ad      	asrs	r5, r5, #2
 8009d4e:	d03d      	beq.n	8009dcc <__pow5mult+0xa0>
 8009d50:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009d52:	b97c      	cbnz	r4, 8009d74 <__pow5mult+0x48>
 8009d54:	2010      	movs	r0, #16
 8009d56:	f7ff fe01 	bl	800995c <malloc>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	6270      	str	r0, [r6, #36]	; 0x24
 8009d5e:	b928      	cbnz	r0, 8009d6c <__pow5mult+0x40>
 8009d60:	4b1d      	ldr	r3, [pc, #116]	; (8009dd8 <__pow5mult+0xac>)
 8009d62:	481e      	ldr	r0, [pc, #120]	; (8009ddc <__pow5mult+0xb0>)
 8009d64:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009d68:	f7fd fe36 	bl	80079d8 <__assert_func>
 8009d6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d70:	6004      	str	r4, [r0, #0]
 8009d72:	60c4      	str	r4, [r0, #12]
 8009d74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009d78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d7c:	b94c      	cbnz	r4, 8009d92 <__pow5mult+0x66>
 8009d7e:	f240 2171 	movw	r1, #625	; 0x271
 8009d82:	4630      	mov	r0, r6
 8009d84:	f7ff ff12 	bl	8009bac <__i2b>
 8009d88:	2300      	movs	r3, #0
 8009d8a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d8e:	4604      	mov	r4, r0
 8009d90:	6003      	str	r3, [r0, #0]
 8009d92:	f04f 0900 	mov.w	r9, #0
 8009d96:	07eb      	lsls	r3, r5, #31
 8009d98:	d50a      	bpl.n	8009db0 <__pow5mult+0x84>
 8009d9a:	4639      	mov	r1, r7
 8009d9c:	4622      	mov	r2, r4
 8009d9e:	4630      	mov	r0, r6
 8009da0:	f7ff ff1a 	bl	8009bd8 <__multiply>
 8009da4:	4639      	mov	r1, r7
 8009da6:	4680      	mov	r8, r0
 8009da8:	4630      	mov	r0, r6
 8009daa:	f7ff fe47 	bl	8009a3c <_Bfree>
 8009dae:	4647      	mov	r7, r8
 8009db0:	106d      	asrs	r5, r5, #1
 8009db2:	d00b      	beq.n	8009dcc <__pow5mult+0xa0>
 8009db4:	6820      	ldr	r0, [r4, #0]
 8009db6:	b938      	cbnz	r0, 8009dc8 <__pow5mult+0x9c>
 8009db8:	4622      	mov	r2, r4
 8009dba:	4621      	mov	r1, r4
 8009dbc:	4630      	mov	r0, r6
 8009dbe:	f7ff ff0b 	bl	8009bd8 <__multiply>
 8009dc2:	6020      	str	r0, [r4, #0]
 8009dc4:	f8c0 9000 	str.w	r9, [r0]
 8009dc8:	4604      	mov	r4, r0
 8009dca:	e7e4      	b.n	8009d96 <__pow5mult+0x6a>
 8009dcc:	4638      	mov	r0, r7
 8009dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dd2:	bf00      	nop
 8009dd4:	0800acc8 	.word	0x0800acc8
 8009dd8:	0800aa92 	.word	0x0800aa92
 8009ddc:	0800ab78 	.word	0x0800ab78

08009de0 <__lshift>:
 8009de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009de4:	460c      	mov	r4, r1
 8009de6:	6849      	ldr	r1, [r1, #4]
 8009de8:	6923      	ldr	r3, [r4, #16]
 8009dea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009dee:	68a3      	ldr	r3, [r4, #8]
 8009df0:	4607      	mov	r7, r0
 8009df2:	4691      	mov	r9, r2
 8009df4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009df8:	f108 0601 	add.w	r6, r8, #1
 8009dfc:	42b3      	cmp	r3, r6
 8009dfe:	db0b      	blt.n	8009e18 <__lshift+0x38>
 8009e00:	4638      	mov	r0, r7
 8009e02:	f7ff fddb 	bl	80099bc <_Balloc>
 8009e06:	4605      	mov	r5, r0
 8009e08:	b948      	cbnz	r0, 8009e1e <__lshift+0x3e>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	4b2a      	ldr	r3, [pc, #168]	; (8009eb8 <__lshift+0xd8>)
 8009e0e:	482b      	ldr	r0, [pc, #172]	; (8009ebc <__lshift+0xdc>)
 8009e10:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009e14:	f7fd fde0 	bl	80079d8 <__assert_func>
 8009e18:	3101      	adds	r1, #1
 8009e1a:	005b      	lsls	r3, r3, #1
 8009e1c:	e7ee      	b.n	8009dfc <__lshift+0x1c>
 8009e1e:	2300      	movs	r3, #0
 8009e20:	f100 0114 	add.w	r1, r0, #20
 8009e24:	f100 0210 	add.w	r2, r0, #16
 8009e28:	4618      	mov	r0, r3
 8009e2a:	4553      	cmp	r3, sl
 8009e2c:	db37      	blt.n	8009e9e <__lshift+0xbe>
 8009e2e:	6920      	ldr	r0, [r4, #16]
 8009e30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e34:	f104 0314 	add.w	r3, r4, #20
 8009e38:	f019 091f 	ands.w	r9, r9, #31
 8009e3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e40:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009e44:	d02f      	beq.n	8009ea6 <__lshift+0xc6>
 8009e46:	f1c9 0e20 	rsb	lr, r9, #32
 8009e4a:	468a      	mov	sl, r1
 8009e4c:	f04f 0c00 	mov.w	ip, #0
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	fa02 f209 	lsl.w	r2, r2, r9
 8009e56:	ea42 020c 	orr.w	r2, r2, ip
 8009e5a:	f84a 2b04 	str.w	r2, [sl], #4
 8009e5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e62:	4298      	cmp	r0, r3
 8009e64:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009e68:	d8f2      	bhi.n	8009e50 <__lshift+0x70>
 8009e6a:	1b03      	subs	r3, r0, r4
 8009e6c:	3b15      	subs	r3, #21
 8009e6e:	f023 0303 	bic.w	r3, r3, #3
 8009e72:	3304      	adds	r3, #4
 8009e74:	f104 0215 	add.w	r2, r4, #21
 8009e78:	4290      	cmp	r0, r2
 8009e7a:	bf38      	it	cc
 8009e7c:	2304      	movcc	r3, #4
 8009e7e:	f841 c003 	str.w	ip, [r1, r3]
 8009e82:	f1bc 0f00 	cmp.w	ip, #0
 8009e86:	d001      	beq.n	8009e8c <__lshift+0xac>
 8009e88:	f108 0602 	add.w	r6, r8, #2
 8009e8c:	3e01      	subs	r6, #1
 8009e8e:	4638      	mov	r0, r7
 8009e90:	612e      	str	r6, [r5, #16]
 8009e92:	4621      	mov	r1, r4
 8009e94:	f7ff fdd2 	bl	8009a3c <_Bfree>
 8009e98:	4628      	mov	r0, r5
 8009e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	e7c1      	b.n	8009e2a <__lshift+0x4a>
 8009ea6:	3904      	subs	r1, #4
 8009ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eac:	f841 2f04 	str.w	r2, [r1, #4]!
 8009eb0:	4298      	cmp	r0, r3
 8009eb2:	d8f9      	bhi.n	8009ea8 <__lshift+0xc8>
 8009eb4:	e7ea      	b.n	8009e8c <__lshift+0xac>
 8009eb6:	bf00      	nop
 8009eb8:	0800ab04 	.word	0x0800ab04
 8009ebc:	0800ab78 	.word	0x0800ab78

08009ec0 <__mcmp>:
 8009ec0:	b530      	push	{r4, r5, lr}
 8009ec2:	6902      	ldr	r2, [r0, #16]
 8009ec4:	690c      	ldr	r4, [r1, #16]
 8009ec6:	1b12      	subs	r2, r2, r4
 8009ec8:	d10e      	bne.n	8009ee8 <__mcmp+0x28>
 8009eca:	f100 0314 	add.w	r3, r0, #20
 8009ece:	3114      	adds	r1, #20
 8009ed0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009ed4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009ed8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009edc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009ee0:	42a5      	cmp	r5, r4
 8009ee2:	d003      	beq.n	8009eec <__mcmp+0x2c>
 8009ee4:	d305      	bcc.n	8009ef2 <__mcmp+0x32>
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	4610      	mov	r0, r2
 8009eea:	bd30      	pop	{r4, r5, pc}
 8009eec:	4283      	cmp	r3, r0
 8009eee:	d3f3      	bcc.n	8009ed8 <__mcmp+0x18>
 8009ef0:	e7fa      	b.n	8009ee8 <__mcmp+0x28>
 8009ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ef6:	e7f7      	b.n	8009ee8 <__mcmp+0x28>

08009ef8 <__mdiff>:
 8009ef8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009efc:	460c      	mov	r4, r1
 8009efe:	4606      	mov	r6, r0
 8009f00:	4611      	mov	r1, r2
 8009f02:	4620      	mov	r0, r4
 8009f04:	4690      	mov	r8, r2
 8009f06:	f7ff ffdb 	bl	8009ec0 <__mcmp>
 8009f0a:	1e05      	subs	r5, r0, #0
 8009f0c:	d110      	bne.n	8009f30 <__mdiff+0x38>
 8009f0e:	4629      	mov	r1, r5
 8009f10:	4630      	mov	r0, r6
 8009f12:	f7ff fd53 	bl	80099bc <_Balloc>
 8009f16:	b930      	cbnz	r0, 8009f26 <__mdiff+0x2e>
 8009f18:	4b3a      	ldr	r3, [pc, #232]	; (800a004 <__mdiff+0x10c>)
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	f240 2132 	movw	r1, #562	; 0x232
 8009f20:	4839      	ldr	r0, [pc, #228]	; (800a008 <__mdiff+0x110>)
 8009f22:	f7fd fd59 	bl	80079d8 <__assert_func>
 8009f26:	2301      	movs	r3, #1
 8009f28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f30:	bfa4      	itt	ge
 8009f32:	4643      	movge	r3, r8
 8009f34:	46a0      	movge	r8, r4
 8009f36:	4630      	mov	r0, r6
 8009f38:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009f3c:	bfa6      	itte	ge
 8009f3e:	461c      	movge	r4, r3
 8009f40:	2500      	movge	r5, #0
 8009f42:	2501      	movlt	r5, #1
 8009f44:	f7ff fd3a 	bl	80099bc <_Balloc>
 8009f48:	b920      	cbnz	r0, 8009f54 <__mdiff+0x5c>
 8009f4a:	4b2e      	ldr	r3, [pc, #184]	; (800a004 <__mdiff+0x10c>)
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009f52:	e7e5      	b.n	8009f20 <__mdiff+0x28>
 8009f54:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009f58:	6926      	ldr	r6, [r4, #16]
 8009f5a:	60c5      	str	r5, [r0, #12]
 8009f5c:	f104 0914 	add.w	r9, r4, #20
 8009f60:	f108 0514 	add.w	r5, r8, #20
 8009f64:	f100 0e14 	add.w	lr, r0, #20
 8009f68:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009f6c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009f70:	f108 0210 	add.w	r2, r8, #16
 8009f74:	46f2      	mov	sl, lr
 8009f76:	2100      	movs	r1, #0
 8009f78:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f7c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009f80:	fa1f f883 	uxth.w	r8, r3
 8009f84:	fa11 f18b 	uxtah	r1, r1, fp
 8009f88:	0c1b      	lsrs	r3, r3, #16
 8009f8a:	eba1 0808 	sub.w	r8, r1, r8
 8009f8e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009f92:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009f96:	fa1f f888 	uxth.w	r8, r8
 8009f9a:	1419      	asrs	r1, r3, #16
 8009f9c:	454e      	cmp	r6, r9
 8009f9e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009fa2:	f84a 3b04 	str.w	r3, [sl], #4
 8009fa6:	d8e7      	bhi.n	8009f78 <__mdiff+0x80>
 8009fa8:	1b33      	subs	r3, r6, r4
 8009faa:	3b15      	subs	r3, #21
 8009fac:	f023 0303 	bic.w	r3, r3, #3
 8009fb0:	3304      	adds	r3, #4
 8009fb2:	3415      	adds	r4, #21
 8009fb4:	42a6      	cmp	r6, r4
 8009fb6:	bf38      	it	cc
 8009fb8:	2304      	movcc	r3, #4
 8009fba:	441d      	add	r5, r3
 8009fbc:	4473      	add	r3, lr
 8009fbe:	469e      	mov	lr, r3
 8009fc0:	462e      	mov	r6, r5
 8009fc2:	4566      	cmp	r6, ip
 8009fc4:	d30e      	bcc.n	8009fe4 <__mdiff+0xec>
 8009fc6:	f10c 0203 	add.w	r2, ip, #3
 8009fca:	1b52      	subs	r2, r2, r5
 8009fcc:	f022 0203 	bic.w	r2, r2, #3
 8009fd0:	3d03      	subs	r5, #3
 8009fd2:	45ac      	cmp	ip, r5
 8009fd4:	bf38      	it	cc
 8009fd6:	2200      	movcc	r2, #0
 8009fd8:	441a      	add	r2, r3
 8009fda:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009fde:	b17b      	cbz	r3, 800a000 <__mdiff+0x108>
 8009fe0:	6107      	str	r7, [r0, #16]
 8009fe2:	e7a3      	b.n	8009f2c <__mdiff+0x34>
 8009fe4:	f856 8b04 	ldr.w	r8, [r6], #4
 8009fe8:	fa11 f288 	uxtah	r2, r1, r8
 8009fec:	1414      	asrs	r4, r2, #16
 8009fee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009ff2:	b292      	uxth	r2, r2
 8009ff4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009ff8:	f84e 2b04 	str.w	r2, [lr], #4
 8009ffc:	1421      	asrs	r1, r4, #16
 8009ffe:	e7e0      	b.n	8009fc2 <__mdiff+0xca>
 800a000:	3f01      	subs	r7, #1
 800a002:	e7ea      	b.n	8009fda <__mdiff+0xe2>
 800a004:	0800ab04 	.word	0x0800ab04
 800a008:	0800ab78 	.word	0x0800ab78

0800a00c <__d2b>:
 800a00c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a010:	4689      	mov	r9, r1
 800a012:	2101      	movs	r1, #1
 800a014:	ec57 6b10 	vmov	r6, r7, d0
 800a018:	4690      	mov	r8, r2
 800a01a:	f7ff fccf 	bl	80099bc <_Balloc>
 800a01e:	4604      	mov	r4, r0
 800a020:	b930      	cbnz	r0, 800a030 <__d2b+0x24>
 800a022:	4602      	mov	r2, r0
 800a024:	4b25      	ldr	r3, [pc, #148]	; (800a0bc <__d2b+0xb0>)
 800a026:	4826      	ldr	r0, [pc, #152]	; (800a0c0 <__d2b+0xb4>)
 800a028:	f240 310a 	movw	r1, #778	; 0x30a
 800a02c:	f7fd fcd4 	bl	80079d8 <__assert_func>
 800a030:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a034:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a038:	bb35      	cbnz	r5, 800a088 <__d2b+0x7c>
 800a03a:	2e00      	cmp	r6, #0
 800a03c:	9301      	str	r3, [sp, #4]
 800a03e:	d028      	beq.n	800a092 <__d2b+0x86>
 800a040:	4668      	mov	r0, sp
 800a042:	9600      	str	r6, [sp, #0]
 800a044:	f7ff fd82 	bl	8009b4c <__lo0bits>
 800a048:	9900      	ldr	r1, [sp, #0]
 800a04a:	b300      	cbz	r0, 800a08e <__d2b+0x82>
 800a04c:	9a01      	ldr	r2, [sp, #4]
 800a04e:	f1c0 0320 	rsb	r3, r0, #32
 800a052:	fa02 f303 	lsl.w	r3, r2, r3
 800a056:	430b      	orrs	r3, r1
 800a058:	40c2      	lsrs	r2, r0
 800a05a:	6163      	str	r3, [r4, #20]
 800a05c:	9201      	str	r2, [sp, #4]
 800a05e:	9b01      	ldr	r3, [sp, #4]
 800a060:	61a3      	str	r3, [r4, #24]
 800a062:	2b00      	cmp	r3, #0
 800a064:	bf14      	ite	ne
 800a066:	2202      	movne	r2, #2
 800a068:	2201      	moveq	r2, #1
 800a06a:	6122      	str	r2, [r4, #16]
 800a06c:	b1d5      	cbz	r5, 800a0a4 <__d2b+0x98>
 800a06e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a072:	4405      	add	r5, r0
 800a074:	f8c9 5000 	str.w	r5, [r9]
 800a078:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a07c:	f8c8 0000 	str.w	r0, [r8]
 800a080:	4620      	mov	r0, r4
 800a082:	b003      	add	sp, #12
 800a084:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a088:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a08c:	e7d5      	b.n	800a03a <__d2b+0x2e>
 800a08e:	6161      	str	r1, [r4, #20]
 800a090:	e7e5      	b.n	800a05e <__d2b+0x52>
 800a092:	a801      	add	r0, sp, #4
 800a094:	f7ff fd5a 	bl	8009b4c <__lo0bits>
 800a098:	9b01      	ldr	r3, [sp, #4]
 800a09a:	6163      	str	r3, [r4, #20]
 800a09c:	2201      	movs	r2, #1
 800a09e:	6122      	str	r2, [r4, #16]
 800a0a0:	3020      	adds	r0, #32
 800a0a2:	e7e3      	b.n	800a06c <__d2b+0x60>
 800a0a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a0a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a0ac:	f8c9 0000 	str.w	r0, [r9]
 800a0b0:	6918      	ldr	r0, [r3, #16]
 800a0b2:	f7ff fd2b 	bl	8009b0c <__hi0bits>
 800a0b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a0ba:	e7df      	b.n	800a07c <__d2b+0x70>
 800a0bc:	0800ab04 	.word	0x0800ab04
 800a0c0:	0800ab78 	.word	0x0800ab78

0800a0c4 <_calloc_r>:
 800a0c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0c6:	fba1 2402 	umull	r2, r4, r1, r2
 800a0ca:	b94c      	cbnz	r4, 800a0e0 <_calloc_r+0x1c>
 800a0cc:	4611      	mov	r1, r2
 800a0ce:	9201      	str	r2, [sp, #4]
 800a0d0:	f000 f87a 	bl	800a1c8 <_malloc_r>
 800a0d4:	9a01      	ldr	r2, [sp, #4]
 800a0d6:	4605      	mov	r5, r0
 800a0d8:	b930      	cbnz	r0, 800a0e8 <_calloc_r+0x24>
 800a0da:	4628      	mov	r0, r5
 800a0dc:	b003      	add	sp, #12
 800a0de:	bd30      	pop	{r4, r5, pc}
 800a0e0:	220c      	movs	r2, #12
 800a0e2:	6002      	str	r2, [r0, #0]
 800a0e4:	2500      	movs	r5, #0
 800a0e6:	e7f8      	b.n	800a0da <_calloc_r+0x16>
 800a0e8:	4621      	mov	r1, r4
 800a0ea:	f7fd fccf 	bl	8007a8c <memset>
 800a0ee:	e7f4      	b.n	800a0da <_calloc_r+0x16>

0800a0f0 <_free_r>:
 800a0f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0f2:	2900      	cmp	r1, #0
 800a0f4:	d044      	beq.n	800a180 <_free_r+0x90>
 800a0f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0fa:	9001      	str	r0, [sp, #4]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	f1a1 0404 	sub.w	r4, r1, #4
 800a102:	bfb8      	it	lt
 800a104:	18e4      	addlt	r4, r4, r3
 800a106:	f000 fb5d 	bl	800a7c4 <__malloc_lock>
 800a10a:	4a1e      	ldr	r2, [pc, #120]	; (800a184 <_free_r+0x94>)
 800a10c:	9801      	ldr	r0, [sp, #4]
 800a10e:	6813      	ldr	r3, [r2, #0]
 800a110:	b933      	cbnz	r3, 800a120 <_free_r+0x30>
 800a112:	6063      	str	r3, [r4, #4]
 800a114:	6014      	str	r4, [r2, #0]
 800a116:	b003      	add	sp, #12
 800a118:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a11c:	f000 bb58 	b.w	800a7d0 <__malloc_unlock>
 800a120:	42a3      	cmp	r3, r4
 800a122:	d908      	bls.n	800a136 <_free_r+0x46>
 800a124:	6825      	ldr	r5, [r4, #0]
 800a126:	1961      	adds	r1, r4, r5
 800a128:	428b      	cmp	r3, r1
 800a12a:	bf01      	itttt	eq
 800a12c:	6819      	ldreq	r1, [r3, #0]
 800a12e:	685b      	ldreq	r3, [r3, #4]
 800a130:	1949      	addeq	r1, r1, r5
 800a132:	6021      	streq	r1, [r4, #0]
 800a134:	e7ed      	b.n	800a112 <_free_r+0x22>
 800a136:	461a      	mov	r2, r3
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	b10b      	cbz	r3, 800a140 <_free_r+0x50>
 800a13c:	42a3      	cmp	r3, r4
 800a13e:	d9fa      	bls.n	800a136 <_free_r+0x46>
 800a140:	6811      	ldr	r1, [r2, #0]
 800a142:	1855      	adds	r5, r2, r1
 800a144:	42a5      	cmp	r5, r4
 800a146:	d10b      	bne.n	800a160 <_free_r+0x70>
 800a148:	6824      	ldr	r4, [r4, #0]
 800a14a:	4421      	add	r1, r4
 800a14c:	1854      	adds	r4, r2, r1
 800a14e:	42a3      	cmp	r3, r4
 800a150:	6011      	str	r1, [r2, #0]
 800a152:	d1e0      	bne.n	800a116 <_free_r+0x26>
 800a154:	681c      	ldr	r4, [r3, #0]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	6053      	str	r3, [r2, #4]
 800a15a:	4421      	add	r1, r4
 800a15c:	6011      	str	r1, [r2, #0]
 800a15e:	e7da      	b.n	800a116 <_free_r+0x26>
 800a160:	d902      	bls.n	800a168 <_free_r+0x78>
 800a162:	230c      	movs	r3, #12
 800a164:	6003      	str	r3, [r0, #0]
 800a166:	e7d6      	b.n	800a116 <_free_r+0x26>
 800a168:	6825      	ldr	r5, [r4, #0]
 800a16a:	1961      	adds	r1, r4, r5
 800a16c:	428b      	cmp	r3, r1
 800a16e:	bf04      	itt	eq
 800a170:	6819      	ldreq	r1, [r3, #0]
 800a172:	685b      	ldreq	r3, [r3, #4]
 800a174:	6063      	str	r3, [r4, #4]
 800a176:	bf04      	itt	eq
 800a178:	1949      	addeq	r1, r1, r5
 800a17a:	6021      	streq	r1, [r4, #0]
 800a17c:	6054      	str	r4, [r2, #4]
 800a17e:	e7ca      	b.n	800a116 <_free_r+0x26>
 800a180:	b003      	add	sp, #12
 800a182:	bd30      	pop	{r4, r5, pc}
 800a184:	20000ff4 	.word	0x20000ff4

0800a188 <sbrk_aligned>:
 800a188:	b570      	push	{r4, r5, r6, lr}
 800a18a:	4e0e      	ldr	r6, [pc, #56]	; (800a1c4 <sbrk_aligned+0x3c>)
 800a18c:	460c      	mov	r4, r1
 800a18e:	6831      	ldr	r1, [r6, #0]
 800a190:	4605      	mov	r5, r0
 800a192:	b911      	cbnz	r1, 800a19a <sbrk_aligned+0x12>
 800a194:	f000 fa16 	bl	800a5c4 <_sbrk_r>
 800a198:	6030      	str	r0, [r6, #0]
 800a19a:	4621      	mov	r1, r4
 800a19c:	4628      	mov	r0, r5
 800a19e:	f000 fa11 	bl	800a5c4 <_sbrk_r>
 800a1a2:	1c43      	adds	r3, r0, #1
 800a1a4:	d00a      	beq.n	800a1bc <sbrk_aligned+0x34>
 800a1a6:	1cc4      	adds	r4, r0, #3
 800a1a8:	f024 0403 	bic.w	r4, r4, #3
 800a1ac:	42a0      	cmp	r0, r4
 800a1ae:	d007      	beq.n	800a1c0 <sbrk_aligned+0x38>
 800a1b0:	1a21      	subs	r1, r4, r0
 800a1b2:	4628      	mov	r0, r5
 800a1b4:	f000 fa06 	bl	800a5c4 <_sbrk_r>
 800a1b8:	3001      	adds	r0, #1
 800a1ba:	d101      	bne.n	800a1c0 <sbrk_aligned+0x38>
 800a1bc:	f04f 34ff 	mov.w	r4, #4294967295
 800a1c0:	4620      	mov	r0, r4
 800a1c2:	bd70      	pop	{r4, r5, r6, pc}
 800a1c4:	20000ff8 	.word	0x20000ff8

0800a1c8 <_malloc_r>:
 800a1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1cc:	1ccd      	adds	r5, r1, #3
 800a1ce:	f025 0503 	bic.w	r5, r5, #3
 800a1d2:	3508      	adds	r5, #8
 800a1d4:	2d0c      	cmp	r5, #12
 800a1d6:	bf38      	it	cc
 800a1d8:	250c      	movcc	r5, #12
 800a1da:	2d00      	cmp	r5, #0
 800a1dc:	4607      	mov	r7, r0
 800a1de:	db01      	blt.n	800a1e4 <_malloc_r+0x1c>
 800a1e0:	42a9      	cmp	r1, r5
 800a1e2:	d905      	bls.n	800a1f0 <_malloc_r+0x28>
 800a1e4:	230c      	movs	r3, #12
 800a1e6:	603b      	str	r3, [r7, #0]
 800a1e8:	2600      	movs	r6, #0
 800a1ea:	4630      	mov	r0, r6
 800a1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1f0:	4e2e      	ldr	r6, [pc, #184]	; (800a2ac <_malloc_r+0xe4>)
 800a1f2:	f000 fae7 	bl	800a7c4 <__malloc_lock>
 800a1f6:	6833      	ldr	r3, [r6, #0]
 800a1f8:	461c      	mov	r4, r3
 800a1fa:	bb34      	cbnz	r4, 800a24a <_malloc_r+0x82>
 800a1fc:	4629      	mov	r1, r5
 800a1fe:	4638      	mov	r0, r7
 800a200:	f7ff ffc2 	bl	800a188 <sbrk_aligned>
 800a204:	1c43      	adds	r3, r0, #1
 800a206:	4604      	mov	r4, r0
 800a208:	d14d      	bne.n	800a2a6 <_malloc_r+0xde>
 800a20a:	6834      	ldr	r4, [r6, #0]
 800a20c:	4626      	mov	r6, r4
 800a20e:	2e00      	cmp	r6, #0
 800a210:	d140      	bne.n	800a294 <_malloc_r+0xcc>
 800a212:	6823      	ldr	r3, [r4, #0]
 800a214:	4631      	mov	r1, r6
 800a216:	4638      	mov	r0, r7
 800a218:	eb04 0803 	add.w	r8, r4, r3
 800a21c:	f000 f9d2 	bl	800a5c4 <_sbrk_r>
 800a220:	4580      	cmp	r8, r0
 800a222:	d13a      	bne.n	800a29a <_malloc_r+0xd2>
 800a224:	6821      	ldr	r1, [r4, #0]
 800a226:	3503      	adds	r5, #3
 800a228:	1a6d      	subs	r5, r5, r1
 800a22a:	f025 0503 	bic.w	r5, r5, #3
 800a22e:	3508      	adds	r5, #8
 800a230:	2d0c      	cmp	r5, #12
 800a232:	bf38      	it	cc
 800a234:	250c      	movcc	r5, #12
 800a236:	4629      	mov	r1, r5
 800a238:	4638      	mov	r0, r7
 800a23a:	f7ff ffa5 	bl	800a188 <sbrk_aligned>
 800a23e:	3001      	adds	r0, #1
 800a240:	d02b      	beq.n	800a29a <_malloc_r+0xd2>
 800a242:	6823      	ldr	r3, [r4, #0]
 800a244:	442b      	add	r3, r5
 800a246:	6023      	str	r3, [r4, #0]
 800a248:	e00e      	b.n	800a268 <_malloc_r+0xa0>
 800a24a:	6822      	ldr	r2, [r4, #0]
 800a24c:	1b52      	subs	r2, r2, r5
 800a24e:	d41e      	bmi.n	800a28e <_malloc_r+0xc6>
 800a250:	2a0b      	cmp	r2, #11
 800a252:	d916      	bls.n	800a282 <_malloc_r+0xba>
 800a254:	1961      	adds	r1, r4, r5
 800a256:	42a3      	cmp	r3, r4
 800a258:	6025      	str	r5, [r4, #0]
 800a25a:	bf18      	it	ne
 800a25c:	6059      	strne	r1, [r3, #4]
 800a25e:	6863      	ldr	r3, [r4, #4]
 800a260:	bf08      	it	eq
 800a262:	6031      	streq	r1, [r6, #0]
 800a264:	5162      	str	r2, [r4, r5]
 800a266:	604b      	str	r3, [r1, #4]
 800a268:	4638      	mov	r0, r7
 800a26a:	f104 060b 	add.w	r6, r4, #11
 800a26e:	f000 faaf 	bl	800a7d0 <__malloc_unlock>
 800a272:	f026 0607 	bic.w	r6, r6, #7
 800a276:	1d23      	adds	r3, r4, #4
 800a278:	1af2      	subs	r2, r6, r3
 800a27a:	d0b6      	beq.n	800a1ea <_malloc_r+0x22>
 800a27c:	1b9b      	subs	r3, r3, r6
 800a27e:	50a3      	str	r3, [r4, r2]
 800a280:	e7b3      	b.n	800a1ea <_malloc_r+0x22>
 800a282:	6862      	ldr	r2, [r4, #4]
 800a284:	42a3      	cmp	r3, r4
 800a286:	bf0c      	ite	eq
 800a288:	6032      	streq	r2, [r6, #0]
 800a28a:	605a      	strne	r2, [r3, #4]
 800a28c:	e7ec      	b.n	800a268 <_malloc_r+0xa0>
 800a28e:	4623      	mov	r3, r4
 800a290:	6864      	ldr	r4, [r4, #4]
 800a292:	e7b2      	b.n	800a1fa <_malloc_r+0x32>
 800a294:	4634      	mov	r4, r6
 800a296:	6876      	ldr	r6, [r6, #4]
 800a298:	e7b9      	b.n	800a20e <_malloc_r+0x46>
 800a29a:	230c      	movs	r3, #12
 800a29c:	603b      	str	r3, [r7, #0]
 800a29e:	4638      	mov	r0, r7
 800a2a0:	f000 fa96 	bl	800a7d0 <__malloc_unlock>
 800a2a4:	e7a1      	b.n	800a1ea <_malloc_r+0x22>
 800a2a6:	6025      	str	r5, [r4, #0]
 800a2a8:	e7de      	b.n	800a268 <_malloc_r+0xa0>
 800a2aa:	bf00      	nop
 800a2ac:	20000ff4 	.word	0x20000ff4

0800a2b0 <_realloc_r>:
 800a2b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2b4:	4680      	mov	r8, r0
 800a2b6:	4614      	mov	r4, r2
 800a2b8:	460e      	mov	r6, r1
 800a2ba:	b921      	cbnz	r1, 800a2c6 <_realloc_r+0x16>
 800a2bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2c0:	4611      	mov	r1, r2
 800a2c2:	f7ff bf81 	b.w	800a1c8 <_malloc_r>
 800a2c6:	b92a      	cbnz	r2, 800a2d4 <_realloc_r+0x24>
 800a2c8:	f7ff ff12 	bl	800a0f0 <_free_r>
 800a2cc:	4625      	mov	r5, r4
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2d4:	f000 fa82 	bl	800a7dc <_malloc_usable_size_r>
 800a2d8:	4284      	cmp	r4, r0
 800a2da:	4607      	mov	r7, r0
 800a2dc:	d802      	bhi.n	800a2e4 <_realloc_r+0x34>
 800a2de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a2e2:	d812      	bhi.n	800a30a <_realloc_r+0x5a>
 800a2e4:	4621      	mov	r1, r4
 800a2e6:	4640      	mov	r0, r8
 800a2e8:	f7ff ff6e 	bl	800a1c8 <_malloc_r>
 800a2ec:	4605      	mov	r5, r0
 800a2ee:	2800      	cmp	r0, #0
 800a2f0:	d0ed      	beq.n	800a2ce <_realloc_r+0x1e>
 800a2f2:	42bc      	cmp	r4, r7
 800a2f4:	4622      	mov	r2, r4
 800a2f6:	4631      	mov	r1, r6
 800a2f8:	bf28      	it	cs
 800a2fa:	463a      	movcs	r2, r7
 800a2fc:	f7ff fb36 	bl	800996c <memcpy>
 800a300:	4631      	mov	r1, r6
 800a302:	4640      	mov	r0, r8
 800a304:	f7ff fef4 	bl	800a0f0 <_free_r>
 800a308:	e7e1      	b.n	800a2ce <_realloc_r+0x1e>
 800a30a:	4635      	mov	r5, r6
 800a30c:	e7df      	b.n	800a2ce <_realloc_r+0x1e>

0800a30e <__ssputs_r>:
 800a30e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a312:	688e      	ldr	r6, [r1, #8]
 800a314:	429e      	cmp	r6, r3
 800a316:	4682      	mov	sl, r0
 800a318:	460c      	mov	r4, r1
 800a31a:	4690      	mov	r8, r2
 800a31c:	461f      	mov	r7, r3
 800a31e:	d838      	bhi.n	800a392 <__ssputs_r+0x84>
 800a320:	898a      	ldrh	r2, [r1, #12]
 800a322:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a326:	d032      	beq.n	800a38e <__ssputs_r+0x80>
 800a328:	6825      	ldr	r5, [r4, #0]
 800a32a:	6909      	ldr	r1, [r1, #16]
 800a32c:	eba5 0901 	sub.w	r9, r5, r1
 800a330:	6965      	ldr	r5, [r4, #20]
 800a332:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a336:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a33a:	3301      	adds	r3, #1
 800a33c:	444b      	add	r3, r9
 800a33e:	106d      	asrs	r5, r5, #1
 800a340:	429d      	cmp	r5, r3
 800a342:	bf38      	it	cc
 800a344:	461d      	movcc	r5, r3
 800a346:	0553      	lsls	r3, r2, #21
 800a348:	d531      	bpl.n	800a3ae <__ssputs_r+0xa0>
 800a34a:	4629      	mov	r1, r5
 800a34c:	f7ff ff3c 	bl	800a1c8 <_malloc_r>
 800a350:	4606      	mov	r6, r0
 800a352:	b950      	cbnz	r0, 800a36a <__ssputs_r+0x5c>
 800a354:	230c      	movs	r3, #12
 800a356:	f8ca 3000 	str.w	r3, [sl]
 800a35a:	89a3      	ldrh	r3, [r4, #12]
 800a35c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a360:	81a3      	strh	r3, [r4, #12]
 800a362:	f04f 30ff 	mov.w	r0, #4294967295
 800a366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a36a:	6921      	ldr	r1, [r4, #16]
 800a36c:	464a      	mov	r2, r9
 800a36e:	f7ff fafd 	bl	800996c <memcpy>
 800a372:	89a3      	ldrh	r3, [r4, #12]
 800a374:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a37c:	81a3      	strh	r3, [r4, #12]
 800a37e:	6126      	str	r6, [r4, #16]
 800a380:	6165      	str	r5, [r4, #20]
 800a382:	444e      	add	r6, r9
 800a384:	eba5 0509 	sub.w	r5, r5, r9
 800a388:	6026      	str	r6, [r4, #0]
 800a38a:	60a5      	str	r5, [r4, #8]
 800a38c:	463e      	mov	r6, r7
 800a38e:	42be      	cmp	r6, r7
 800a390:	d900      	bls.n	800a394 <__ssputs_r+0x86>
 800a392:	463e      	mov	r6, r7
 800a394:	6820      	ldr	r0, [r4, #0]
 800a396:	4632      	mov	r2, r6
 800a398:	4641      	mov	r1, r8
 800a39a:	f7ff faf5 	bl	8009988 <memmove>
 800a39e:	68a3      	ldr	r3, [r4, #8]
 800a3a0:	1b9b      	subs	r3, r3, r6
 800a3a2:	60a3      	str	r3, [r4, #8]
 800a3a4:	6823      	ldr	r3, [r4, #0]
 800a3a6:	4433      	add	r3, r6
 800a3a8:	6023      	str	r3, [r4, #0]
 800a3aa:	2000      	movs	r0, #0
 800a3ac:	e7db      	b.n	800a366 <__ssputs_r+0x58>
 800a3ae:	462a      	mov	r2, r5
 800a3b0:	f7ff ff7e 	bl	800a2b0 <_realloc_r>
 800a3b4:	4606      	mov	r6, r0
 800a3b6:	2800      	cmp	r0, #0
 800a3b8:	d1e1      	bne.n	800a37e <__ssputs_r+0x70>
 800a3ba:	6921      	ldr	r1, [r4, #16]
 800a3bc:	4650      	mov	r0, sl
 800a3be:	f7ff fe97 	bl	800a0f0 <_free_r>
 800a3c2:	e7c7      	b.n	800a354 <__ssputs_r+0x46>

0800a3c4 <_svfiprintf_r>:
 800a3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c8:	4698      	mov	r8, r3
 800a3ca:	898b      	ldrh	r3, [r1, #12]
 800a3cc:	061b      	lsls	r3, r3, #24
 800a3ce:	b09d      	sub	sp, #116	; 0x74
 800a3d0:	4607      	mov	r7, r0
 800a3d2:	460d      	mov	r5, r1
 800a3d4:	4614      	mov	r4, r2
 800a3d6:	d50e      	bpl.n	800a3f6 <_svfiprintf_r+0x32>
 800a3d8:	690b      	ldr	r3, [r1, #16]
 800a3da:	b963      	cbnz	r3, 800a3f6 <_svfiprintf_r+0x32>
 800a3dc:	2140      	movs	r1, #64	; 0x40
 800a3de:	f7ff fef3 	bl	800a1c8 <_malloc_r>
 800a3e2:	6028      	str	r0, [r5, #0]
 800a3e4:	6128      	str	r0, [r5, #16]
 800a3e6:	b920      	cbnz	r0, 800a3f2 <_svfiprintf_r+0x2e>
 800a3e8:	230c      	movs	r3, #12
 800a3ea:	603b      	str	r3, [r7, #0]
 800a3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f0:	e0d1      	b.n	800a596 <_svfiprintf_r+0x1d2>
 800a3f2:	2340      	movs	r3, #64	; 0x40
 800a3f4:	616b      	str	r3, [r5, #20]
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	9309      	str	r3, [sp, #36]	; 0x24
 800a3fa:	2320      	movs	r3, #32
 800a3fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a400:	f8cd 800c 	str.w	r8, [sp, #12]
 800a404:	2330      	movs	r3, #48	; 0x30
 800a406:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a5b0 <_svfiprintf_r+0x1ec>
 800a40a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a40e:	f04f 0901 	mov.w	r9, #1
 800a412:	4623      	mov	r3, r4
 800a414:	469a      	mov	sl, r3
 800a416:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a41a:	b10a      	cbz	r2, 800a420 <_svfiprintf_r+0x5c>
 800a41c:	2a25      	cmp	r2, #37	; 0x25
 800a41e:	d1f9      	bne.n	800a414 <_svfiprintf_r+0x50>
 800a420:	ebba 0b04 	subs.w	fp, sl, r4
 800a424:	d00b      	beq.n	800a43e <_svfiprintf_r+0x7a>
 800a426:	465b      	mov	r3, fp
 800a428:	4622      	mov	r2, r4
 800a42a:	4629      	mov	r1, r5
 800a42c:	4638      	mov	r0, r7
 800a42e:	f7ff ff6e 	bl	800a30e <__ssputs_r>
 800a432:	3001      	adds	r0, #1
 800a434:	f000 80aa 	beq.w	800a58c <_svfiprintf_r+0x1c8>
 800a438:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a43a:	445a      	add	r2, fp
 800a43c:	9209      	str	r2, [sp, #36]	; 0x24
 800a43e:	f89a 3000 	ldrb.w	r3, [sl]
 800a442:	2b00      	cmp	r3, #0
 800a444:	f000 80a2 	beq.w	800a58c <_svfiprintf_r+0x1c8>
 800a448:	2300      	movs	r3, #0
 800a44a:	f04f 32ff 	mov.w	r2, #4294967295
 800a44e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a452:	f10a 0a01 	add.w	sl, sl, #1
 800a456:	9304      	str	r3, [sp, #16]
 800a458:	9307      	str	r3, [sp, #28]
 800a45a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a45e:	931a      	str	r3, [sp, #104]	; 0x68
 800a460:	4654      	mov	r4, sl
 800a462:	2205      	movs	r2, #5
 800a464:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a468:	4851      	ldr	r0, [pc, #324]	; (800a5b0 <_svfiprintf_r+0x1ec>)
 800a46a:	f7f5 fee9 	bl	8000240 <memchr>
 800a46e:	9a04      	ldr	r2, [sp, #16]
 800a470:	b9d8      	cbnz	r0, 800a4aa <_svfiprintf_r+0xe6>
 800a472:	06d0      	lsls	r0, r2, #27
 800a474:	bf44      	itt	mi
 800a476:	2320      	movmi	r3, #32
 800a478:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a47c:	0711      	lsls	r1, r2, #28
 800a47e:	bf44      	itt	mi
 800a480:	232b      	movmi	r3, #43	; 0x2b
 800a482:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a486:	f89a 3000 	ldrb.w	r3, [sl]
 800a48a:	2b2a      	cmp	r3, #42	; 0x2a
 800a48c:	d015      	beq.n	800a4ba <_svfiprintf_r+0xf6>
 800a48e:	9a07      	ldr	r2, [sp, #28]
 800a490:	4654      	mov	r4, sl
 800a492:	2000      	movs	r0, #0
 800a494:	f04f 0c0a 	mov.w	ip, #10
 800a498:	4621      	mov	r1, r4
 800a49a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a49e:	3b30      	subs	r3, #48	; 0x30
 800a4a0:	2b09      	cmp	r3, #9
 800a4a2:	d94e      	bls.n	800a542 <_svfiprintf_r+0x17e>
 800a4a4:	b1b0      	cbz	r0, 800a4d4 <_svfiprintf_r+0x110>
 800a4a6:	9207      	str	r2, [sp, #28]
 800a4a8:	e014      	b.n	800a4d4 <_svfiprintf_r+0x110>
 800a4aa:	eba0 0308 	sub.w	r3, r0, r8
 800a4ae:	fa09 f303 	lsl.w	r3, r9, r3
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	9304      	str	r3, [sp, #16]
 800a4b6:	46a2      	mov	sl, r4
 800a4b8:	e7d2      	b.n	800a460 <_svfiprintf_r+0x9c>
 800a4ba:	9b03      	ldr	r3, [sp, #12]
 800a4bc:	1d19      	adds	r1, r3, #4
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	9103      	str	r1, [sp, #12]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	bfbb      	ittet	lt
 800a4c6:	425b      	neglt	r3, r3
 800a4c8:	f042 0202 	orrlt.w	r2, r2, #2
 800a4cc:	9307      	strge	r3, [sp, #28]
 800a4ce:	9307      	strlt	r3, [sp, #28]
 800a4d0:	bfb8      	it	lt
 800a4d2:	9204      	strlt	r2, [sp, #16]
 800a4d4:	7823      	ldrb	r3, [r4, #0]
 800a4d6:	2b2e      	cmp	r3, #46	; 0x2e
 800a4d8:	d10c      	bne.n	800a4f4 <_svfiprintf_r+0x130>
 800a4da:	7863      	ldrb	r3, [r4, #1]
 800a4dc:	2b2a      	cmp	r3, #42	; 0x2a
 800a4de:	d135      	bne.n	800a54c <_svfiprintf_r+0x188>
 800a4e0:	9b03      	ldr	r3, [sp, #12]
 800a4e2:	1d1a      	adds	r2, r3, #4
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	9203      	str	r2, [sp, #12]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	bfb8      	it	lt
 800a4ec:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4f0:	3402      	adds	r4, #2
 800a4f2:	9305      	str	r3, [sp, #20]
 800a4f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a5c0 <_svfiprintf_r+0x1fc>
 800a4f8:	7821      	ldrb	r1, [r4, #0]
 800a4fa:	2203      	movs	r2, #3
 800a4fc:	4650      	mov	r0, sl
 800a4fe:	f7f5 fe9f 	bl	8000240 <memchr>
 800a502:	b140      	cbz	r0, 800a516 <_svfiprintf_r+0x152>
 800a504:	2340      	movs	r3, #64	; 0x40
 800a506:	eba0 000a 	sub.w	r0, r0, sl
 800a50a:	fa03 f000 	lsl.w	r0, r3, r0
 800a50e:	9b04      	ldr	r3, [sp, #16]
 800a510:	4303      	orrs	r3, r0
 800a512:	3401      	adds	r4, #1
 800a514:	9304      	str	r3, [sp, #16]
 800a516:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a51a:	4826      	ldr	r0, [pc, #152]	; (800a5b4 <_svfiprintf_r+0x1f0>)
 800a51c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a520:	2206      	movs	r2, #6
 800a522:	f7f5 fe8d 	bl	8000240 <memchr>
 800a526:	2800      	cmp	r0, #0
 800a528:	d038      	beq.n	800a59c <_svfiprintf_r+0x1d8>
 800a52a:	4b23      	ldr	r3, [pc, #140]	; (800a5b8 <_svfiprintf_r+0x1f4>)
 800a52c:	bb1b      	cbnz	r3, 800a576 <_svfiprintf_r+0x1b2>
 800a52e:	9b03      	ldr	r3, [sp, #12]
 800a530:	3307      	adds	r3, #7
 800a532:	f023 0307 	bic.w	r3, r3, #7
 800a536:	3308      	adds	r3, #8
 800a538:	9303      	str	r3, [sp, #12]
 800a53a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a53c:	4433      	add	r3, r6
 800a53e:	9309      	str	r3, [sp, #36]	; 0x24
 800a540:	e767      	b.n	800a412 <_svfiprintf_r+0x4e>
 800a542:	fb0c 3202 	mla	r2, ip, r2, r3
 800a546:	460c      	mov	r4, r1
 800a548:	2001      	movs	r0, #1
 800a54a:	e7a5      	b.n	800a498 <_svfiprintf_r+0xd4>
 800a54c:	2300      	movs	r3, #0
 800a54e:	3401      	adds	r4, #1
 800a550:	9305      	str	r3, [sp, #20]
 800a552:	4619      	mov	r1, r3
 800a554:	f04f 0c0a 	mov.w	ip, #10
 800a558:	4620      	mov	r0, r4
 800a55a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a55e:	3a30      	subs	r2, #48	; 0x30
 800a560:	2a09      	cmp	r2, #9
 800a562:	d903      	bls.n	800a56c <_svfiprintf_r+0x1a8>
 800a564:	2b00      	cmp	r3, #0
 800a566:	d0c5      	beq.n	800a4f4 <_svfiprintf_r+0x130>
 800a568:	9105      	str	r1, [sp, #20]
 800a56a:	e7c3      	b.n	800a4f4 <_svfiprintf_r+0x130>
 800a56c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a570:	4604      	mov	r4, r0
 800a572:	2301      	movs	r3, #1
 800a574:	e7f0      	b.n	800a558 <_svfiprintf_r+0x194>
 800a576:	ab03      	add	r3, sp, #12
 800a578:	9300      	str	r3, [sp, #0]
 800a57a:	462a      	mov	r2, r5
 800a57c:	4b0f      	ldr	r3, [pc, #60]	; (800a5bc <_svfiprintf_r+0x1f8>)
 800a57e:	a904      	add	r1, sp, #16
 800a580:	4638      	mov	r0, r7
 800a582:	f7fd fc85 	bl	8007e90 <_printf_float>
 800a586:	1c42      	adds	r2, r0, #1
 800a588:	4606      	mov	r6, r0
 800a58a:	d1d6      	bne.n	800a53a <_svfiprintf_r+0x176>
 800a58c:	89ab      	ldrh	r3, [r5, #12]
 800a58e:	065b      	lsls	r3, r3, #25
 800a590:	f53f af2c 	bmi.w	800a3ec <_svfiprintf_r+0x28>
 800a594:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a596:	b01d      	add	sp, #116	; 0x74
 800a598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a59c:	ab03      	add	r3, sp, #12
 800a59e:	9300      	str	r3, [sp, #0]
 800a5a0:	462a      	mov	r2, r5
 800a5a2:	4b06      	ldr	r3, [pc, #24]	; (800a5bc <_svfiprintf_r+0x1f8>)
 800a5a4:	a904      	add	r1, sp, #16
 800a5a6:	4638      	mov	r0, r7
 800a5a8:	f7fd ff16 	bl	80083d8 <_printf_i>
 800a5ac:	e7eb      	b.n	800a586 <_svfiprintf_r+0x1c2>
 800a5ae:	bf00      	nop
 800a5b0:	0800aa40 	.word	0x0800aa40
 800a5b4:	0800aa4a 	.word	0x0800aa4a
 800a5b8:	08007e91 	.word	0x08007e91
 800a5bc:	0800a30f 	.word	0x0800a30f
 800a5c0:	0800aa46 	.word	0x0800aa46

0800a5c4 <_sbrk_r>:
 800a5c4:	b538      	push	{r3, r4, r5, lr}
 800a5c6:	4d06      	ldr	r5, [pc, #24]	; (800a5e0 <_sbrk_r+0x1c>)
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	4604      	mov	r4, r0
 800a5cc:	4608      	mov	r0, r1
 800a5ce:	602b      	str	r3, [r5, #0]
 800a5d0:	f7f8 f850 	bl	8002674 <_sbrk>
 800a5d4:	1c43      	adds	r3, r0, #1
 800a5d6:	d102      	bne.n	800a5de <_sbrk_r+0x1a>
 800a5d8:	682b      	ldr	r3, [r5, #0]
 800a5da:	b103      	cbz	r3, 800a5de <_sbrk_r+0x1a>
 800a5dc:	6023      	str	r3, [r4, #0]
 800a5de:	bd38      	pop	{r3, r4, r5, pc}
 800a5e0:	20000ffc 	.word	0x20000ffc

0800a5e4 <_raise_r>:
 800a5e4:	291f      	cmp	r1, #31
 800a5e6:	b538      	push	{r3, r4, r5, lr}
 800a5e8:	4604      	mov	r4, r0
 800a5ea:	460d      	mov	r5, r1
 800a5ec:	d904      	bls.n	800a5f8 <_raise_r+0x14>
 800a5ee:	2316      	movs	r3, #22
 800a5f0:	6003      	str	r3, [r0, #0]
 800a5f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a5f6:	bd38      	pop	{r3, r4, r5, pc}
 800a5f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a5fa:	b112      	cbz	r2, 800a602 <_raise_r+0x1e>
 800a5fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a600:	b94b      	cbnz	r3, 800a616 <_raise_r+0x32>
 800a602:	4620      	mov	r0, r4
 800a604:	f000 f830 	bl	800a668 <_getpid_r>
 800a608:	462a      	mov	r2, r5
 800a60a:	4601      	mov	r1, r0
 800a60c:	4620      	mov	r0, r4
 800a60e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a612:	f000 b817 	b.w	800a644 <_kill_r>
 800a616:	2b01      	cmp	r3, #1
 800a618:	d00a      	beq.n	800a630 <_raise_r+0x4c>
 800a61a:	1c59      	adds	r1, r3, #1
 800a61c:	d103      	bne.n	800a626 <_raise_r+0x42>
 800a61e:	2316      	movs	r3, #22
 800a620:	6003      	str	r3, [r0, #0]
 800a622:	2001      	movs	r0, #1
 800a624:	e7e7      	b.n	800a5f6 <_raise_r+0x12>
 800a626:	2400      	movs	r4, #0
 800a628:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a62c:	4628      	mov	r0, r5
 800a62e:	4798      	blx	r3
 800a630:	2000      	movs	r0, #0
 800a632:	e7e0      	b.n	800a5f6 <_raise_r+0x12>

0800a634 <raise>:
 800a634:	4b02      	ldr	r3, [pc, #8]	; (800a640 <raise+0xc>)
 800a636:	4601      	mov	r1, r0
 800a638:	6818      	ldr	r0, [r3, #0]
 800a63a:	f7ff bfd3 	b.w	800a5e4 <_raise_r>
 800a63e:	bf00      	nop
 800a640:	20000030 	.word	0x20000030

0800a644 <_kill_r>:
 800a644:	b538      	push	{r3, r4, r5, lr}
 800a646:	4d07      	ldr	r5, [pc, #28]	; (800a664 <_kill_r+0x20>)
 800a648:	2300      	movs	r3, #0
 800a64a:	4604      	mov	r4, r0
 800a64c:	4608      	mov	r0, r1
 800a64e:	4611      	mov	r1, r2
 800a650:	602b      	str	r3, [r5, #0]
 800a652:	f7f7 ff87 	bl	8002564 <_kill>
 800a656:	1c43      	adds	r3, r0, #1
 800a658:	d102      	bne.n	800a660 <_kill_r+0x1c>
 800a65a:	682b      	ldr	r3, [r5, #0]
 800a65c:	b103      	cbz	r3, 800a660 <_kill_r+0x1c>
 800a65e:	6023      	str	r3, [r4, #0]
 800a660:	bd38      	pop	{r3, r4, r5, pc}
 800a662:	bf00      	nop
 800a664:	20000ffc 	.word	0x20000ffc

0800a668 <_getpid_r>:
 800a668:	f7f7 bf74 	b.w	8002554 <_getpid>

0800a66c <__sread>:
 800a66c:	b510      	push	{r4, lr}
 800a66e:	460c      	mov	r4, r1
 800a670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a674:	f000 f8ba 	bl	800a7ec <_read_r>
 800a678:	2800      	cmp	r0, #0
 800a67a:	bfab      	itete	ge
 800a67c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a67e:	89a3      	ldrhlt	r3, [r4, #12]
 800a680:	181b      	addge	r3, r3, r0
 800a682:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a686:	bfac      	ite	ge
 800a688:	6563      	strge	r3, [r4, #84]	; 0x54
 800a68a:	81a3      	strhlt	r3, [r4, #12]
 800a68c:	bd10      	pop	{r4, pc}

0800a68e <__swrite>:
 800a68e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a692:	461f      	mov	r7, r3
 800a694:	898b      	ldrh	r3, [r1, #12]
 800a696:	05db      	lsls	r3, r3, #23
 800a698:	4605      	mov	r5, r0
 800a69a:	460c      	mov	r4, r1
 800a69c:	4616      	mov	r6, r2
 800a69e:	d505      	bpl.n	800a6ac <__swrite+0x1e>
 800a6a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6a4:	2302      	movs	r3, #2
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f000 f868 	bl	800a77c <_lseek_r>
 800a6ac:	89a3      	ldrh	r3, [r4, #12]
 800a6ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a6b6:	81a3      	strh	r3, [r4, #12]
 800a6b8:	4632      	mov	r2, r6
 800a6ba:	463b      	mov	r3, r7
 800a6bc:	4628      	mov	r0, r5
 800a6be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6c2:	f000 b817 	b.w	800a6f4 <_write_r>

0800a6c6 <__sseek>:
 800a6c6:	b510      	push	{r4, lr}
 800a6c8:	460c      	mov	r4, r1
 800a6ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6ce:	f000 f855 	bl	800a77c <_lseek_r>
 800a6d2:	1c43      	adds	r3, r0, #1
 800a6d4:	89a3      	ldrh	r3, [r4, #12]
 800a6d6:	bf15      	itete	ne
 800a6d8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a6da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a6de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a6e2:	81a3      	strheq	r3, [r4, #12]
 800a6e4:	bf18      	it	ne
 800a6e6:	81a3      	strhne	r3, [r4, #12]
 800a6e8:	bd10      	pop	{r4, pc}

0800a6ea <__sclose>:
 800a6ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6ee:	f000 b813 	b.w	800a718 <_close_r>
	...

0800a6f4 <_write_r>:
 800a6f4:	b538      	push	{r3, r4, r5, lr}
 800a6f6:	4d07      	ldr	r5, [pc, #28]	; (800a714 <_write_r+0x20>)
 800a6f8:	4604      	mov	r4, r0
 800a6fa:	4608      	mov	r0, r1
 800a6fc:	4611      	mov	r1, r2
 800a6fe:	2200      	movs	r2, #0
 800a700:	602a      	str	r2, [r5, #0]
 800a702:	461a      	mov	r2, r3
 800a704:	f7f7 ff65 	bl	80025d2 <_write>
 800a708:	1c43      	adds	r3, r0, #1
 800a70a:	d102      	bne.n	800a712 <_write_r+0x1e>
 800a70c:	682b      	ldr	r3, [r5, #0]
 800a70e:	b103      	cbz	r3, 800a712 <_write_r+0x1e>
 800a710:	6023      	str	r3, [r4, #0]
 800a712:	bd38      	pop	{r3, r4, r5, pc}
 800a714:	20000ffc 	.word	0x20000ffc

0800a718 <_close_r>:
 800a718:	b538      	push	{r3, r4, r5, lr}
 800a71a:	4d06      	ldr	r5, [pc, #24]	; (800a734 <_close_r+0x1c>)
 800a71c:	2300      	movs	r3, #0
 800a71e:	4604      	mov	r4, r0
 800a720:	4608      	mov	r0, r1
 800a722:	602b      	str	r3, [r5, #0]
 800a724:	f7f7 ff71 	bl	800260a <_close>
 800a728:	1c43      	adds	r3, r0, #1
 800a72a:	d102      	bne.n	800a732 <_close_r+0x1a>
 800a72c:	682b      	ldr	r3, [r5, #0]
 800a72e:	b103      	cbz	r3, 800a732 <_close_r+0x1a>
 800a730:	6023      	str	r3, [r4, #0]
 800a732:	bd38      	pop	{r3, r4, r5, pc}
 800a734:	20000ffc 	.word	0x20000ffc

0800a738 <_fstat_r>:
 800a738:	b538      	push	{r3, r4, r5, lr}
 800a73a:	4d07      	ldr	r5, [pc, #28]	; (800a758 <_fstat_r+0x20>)
 800a73c:	2300      	movs	r3, #0
 800a73e:	4604      	mov	r4, r0
 800a740:	4608      	mov	r0, r1
 800a742:	4611      	mov	r1, r2
 800a744:	602b      	str	r3, [r5, #0]
 800a746:	f7f7 ff6c 	bl	8002622 <_fstat>
 800a74a:	1c43      	adds	r3, r0, #1
 800a74c:	d102      	bne.n	800a754 <_fstat_r+0x1c>
 800a74e:	682b      	ldr	r3, [r5, #0]
 800a750:	b103      	cbz	r3, 800a754 <_fstat_r+0x1c>
 800a752:	6023      	str	r3, [r4, #0]
 800a754:	bd38      	pop	{r3, r4, r5, pc}
 800a756:	bf00      	nop
 800a758:	20000ffc 	.word	0x20000ffc

0800a75c <_isatty_r>:
 800a75c:	b538      	push	{r3, r4, r5, lr}
 800a75e:	4d06      	ldr	r5, [pc, #24]	; (800a778 <_isatty_r+0x1c>)
 800a760:	2300      	movs	r3, #0
 800a762:	4604      	mov	r4, r0
 800a764:	4608      	mov	r0, r1
 800a766:	602b      	str	r3, [r5, #0]
 800a768:	f7f7 ff6b 	bl	8002642 <_isatty>
 800a76c:	1c43      	adds	r3, r0, #1
 800a76e:	d102      	bne.n	800a776 <_isatty_r+0x1a>
 800a770:	682b      	ldr	r3, [r5, #0]
 800a772:	b103      	cbz	r3, 800a776 <_isatty_r+0x1a>
 800a774:	6023      	str	r3, [r4, #0]
 800a776:	bd38      	pop	{r3, r4, r5, pc}
 800a778:	20000ffc 	.word	0x20000ffc

0800a77c <_lseek_r>:
 800a77c:	b538      	push	{r3, r4, r5, lr}
 800a77e:	4d07      	ldr	r5, [pc, #28]	; (800a79c <_lseek_r+0x20>)
 800a780:	4604      	mov	r4, r0
 800a782:	4608      	mov	r0, r1
 800a784:	4611      	mov	r1, r2
 800a786:	2200      	movs	r2, #0
 800a788:	602a      	str	r2, [r5, #0]
 800a78a:	461a      	mov	r2, r3
 800a78c:	f7f7 ff64 	bl	8002658 <_lseek>
 800a790:	1c43      	adds	r3, r0, #1
 800a792:	d102      	bne.n	800a79a <_lseek_r+0x1e>
 800a794:	682b      	ldr	r3, [r5, #0]
 800a796:	b103      	cbz	r3, 800a79a <_lseek_r+0x1e>
 800a798:	6023      	str	r3, [r4, #0]
 800a79a:	bd38      	pop	{r3, r4, r5, pc}
 800a79c:	20000ffc 	.word	0x20000ffc

0800a7a0 <__ascii_mbtowc>:
 800a7a0:	b082      	sub	sp, #8
 800a7a2:	b901      	cbnz	r1, 800a7a6 <__ascii_mbtowc+0x6>
 800a7a4:	a901      	add	r1, sp, #4
 800a7a6:	b142      	cbz	r2, 800a7ba <__ascii_mbtowc+0x1a>
 800a7a8:	b14b      	cbz	r3, 800a7be <__ascii_mbtowc+0x1e>
 800a7aa:	7813      	ldrb	r3, [r2, #0]
 800a7ac:	600b      	str	r3, [r1, #0]
 800a7ae:	7812      	ldrb	r2, [r2, #0]
 800a7b0:	1e10      	subs	r0, r2, #0
 800a7b2:	bf18      	it	ne
 800a7b4:	2001      	movne	r0, #1
 800a7b6:	b002      	add	sp, #8
 800a7b8:	4770      	bx	lr
 800a7ba:	4610      	mov	r0, r2
 800a7bc:	e7fb      	b.n	800a7b6 <__ascii_mbtowc+0x16>
 800a7be:	f06f 0001 	mvn.w	r0, #1
 800a7c2:	e7f8      	b.n	800a7b6 <__ascii_mbtowc+0x16>

0800a7c4 <__malloc_lock>:
 800a7c4:	4801      	ldr	r0, [pc, #4]	; (800a7cc <__malloc_lock+0x8>)
 800a7c6:	f7ff b862 	b.w	800988e <__retarget_lock_acquire_recursive>
 800a7ca:	bf00      	nop
 800a7cc:	20000ff0 	.word	0x20000ff0

0800a7d0 <__malloc_unlock>:
 800a7d0:	4801      	ldr	r0, [pc, #4]	; (800a7d8 <__malloc_unlock+0x8>)
 800a7d2:	f7ff b85d 	b.w	8009890 <__retarget_lock_release_recursive>
 800a7d6:	bf00      	nop
 800a7d8:	20000ff0 	.word	0x20000ff0

0800a7dc <_malloc_usable_size_r>:
 800a7dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7e0:	1f18      	subs	r0, r3, #4
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	bfbc      	itt	lt
 800a7e6:	580b      	ldrlt	r3, [r1, r0]
 800a7e8:	18c0      	addlt	r0, r0, r3
 800a7ea:	4770      	bx	lr

0800a7ec <_read_r>:
 800a7ec:	b538      	push	{r3, r4, r5, lr}
 800a7ee:	4d07      	ldr	r5, [pc, #28]	; (800a80c <_read_r+0x20>)
 800a7f0:	4604      	mov	r4, r0
 800a7f2:	4608      	mov	r0, r1
 800a7f4:	4611      	mov	r1, r2
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	602a      	str	r2, [r5, #0]
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	f7f7 fecc 	bl	8002598 <_read>
 800a800:	1c43      	adds	r3, r0, #1
 800a802:	d102      	bne.n	800a80a <_read_r+0x1e>
 800a804:	682b      	ldr	r3, [r5, #0]
 800a806:	b103      	cbz	r3, 800a80a <_read_r+0x1e>
 800a808:	6023      	str	r3, [r4, #0]
 800a80a:	bd38      	pop	{r3, r4, r5, pc}
 800a80c:	20000ffc 	.word	0x20000ffc

0800a810 <__ascii_wctomb>:
 800a810:	b149      	cbz	r1, 800a826 <__ascii_wctomb+0x16>
 800a812:	2aff      	cmp	r2, #255	; 0xff
 800a814:	bf85      	ittet	hi
 800a816:	238a      	movhi	r3, #138	; 0x8a
 800a818:	6003      	strhi	r3, [r0, #0]
 800a81a:	700a      	strbls	r2, [r1, #0]
 800a81c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a820:	bf98      	it	ls
 800a822:	2001      	movls	r0, #1
 800a824:	4770      	bx	lr
 800a826:	4608      	mov	r0, r1
 800a828:	4770      	bx	lr
	...

0800a82c <_init>:
 800a82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a82e:	bf00      	nop
 800a830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a832:	bc08      	pop	{r3}
 800a834:	469e      	mov	lr, r3
 800a836:	4770      	bx	lr

0800a838 <_fini>:
 800a838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a83a:	bf00      	nop
 800a83c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a83e:	bc08      	pop	{r3}
 800a840:	469e      	mov	lr, r3
 800a842:	4770      	bx	lr
